
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

theory Logic_edge_saved

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate edge_saved (g_3 : (pointer voidP)) (k_4 : int)
  (__anonstruct_Graph_4_edges_g_3_6_at_L2 : (memory voidP (pointer voidP)))
  (__anonstruct_Graph_4_edges_g_3_6_at_L1 : (memory voidP (pointer voidP)))
  (__anonstruct_Edge_3_existent_0_edges_19_at_L2 : (memory voidP Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_19_at_L1 : (memory voidP Int32.t))
  (__anonstruct_Edge_3_to_edges_19_at_L2 : (memory voidP Int32.t))
  (__anonstruct_Edge_3_to_edges_19_at_L1 : (memory voidP Int32.t))
  (__anonstruct_Edge_3_from_edges_19_at_L2 : (memory voidP Int32.t))
  (__anonstruct_Edge_3_from_edges_19_at_L1 : (memory voidP Int32.t))
  =
     ((Int32.(=)
      (select __anonstruct_Edge_3_from_edges_19_at_L1
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L1 g_3) k_4))
      (select __anonstruct_Edge_3_from_edges_19_at_L2
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L2 g_3) k_4)))
     /\
     ((Int32.(=)
      (select __anonstruct_Edge_3_to_edges_19_at_L1
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L1 g_3) k_4))
      (select __anonstruct_Edge_3_to_edges_19_at_L2
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L2 g_3) k_4)))
     /\
     (Int32.(=)
     (select __anonstruct_Edge_3_existent_0_edges_19_at_L1
     (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L1 g_3) k_4))
     (select __anonstruct_Edge_3_existent_0_edges_19_at_L2
     (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L2 g_3) k_4)))))
  
  
end

theory Logic_edges_saved

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edge_saved 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edges_saved (g_4 : (pointer voidP)) (m : int) (n_2 : int)
  (__anonstruct_Graph_4_edges_g_4_7_at_L2 : (memory voidP (pointer voidP)))
  (__anonstruct_Graph_4_edges_g_4_7_at_L1 : (memory voidP (pointer voidP)))
  (__anonstruct_Edge_3_existent_0_edges_61_at_L2 : (memory voidP Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_61_at_L1 : (memory voidP Int32.t))
  (__anonstruct_Edge_3_to_edges_61_at_L2 : (memory voidP Int32.t))
  (__anonstruct_Edge_3_to_edges_61_at_L1 : (memory voidP Int32.t))
  (__anonstruct_Edge_3_from_edges_61_at_L2 : (memory voidP Int32.t))
  (__anonstruct_Edge_3_from_edges_61_at_L1 : (memory voidP Int32.t))
  =
     (forall k_5 : int.
      ((((<=) m k_5) /\ ((<) k_5 n_2)) ->
       (edge_saved g_4 k_5 __anonstruct_Graph_4_edges_g_4_7_at_L2
       __anonstruct_Graph_4_edges_g_4_7_at_L1
       __anonstruct_Edge_3_existent_0_edges_61_at_L2
       __anonstruct_Edge_3_existent_0_edges_61_at_L1
       __anonstruct_Edge_3_to_edges_61_at_L2
       __anonstruct_Edge_3_to_edges_61_at_L1
       __anonstruct_Edge_3_from_edges_61_at_L2
       __anonstruct_Edge_3_from_edges_61_at_L1)))
  
  
end

theory Axiomatic_EdgesCount

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edges_saved 
  
  use enum.Int32 
  
  use import int.Int 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  function count (pointer voidP) int int int int (memory voidP (pointer
  voidP)) (memory voidP Int32.t) (memory voidP Int32.t) (memory voidP
  Int32.t) : int
  
  
  axiom Count_zero
  #"/home/student/mfsp/examples/constr_destr/graph_3.c" 55 65 180#
  "expl:Axiom count_zero"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory voidP (pointer
   voidP)).
   (forall __anonstruct_Edge_3_existent_0_edges_23_at_L : (memory voidP
    Int32.t).
    (forall __anonstruct_Edge_3_to_edges_23_at_L : (memory voidP Int32.t).
     (forall __anonstruct_Edge_3_from_edges_23_at_L : (memory voidP Int32.t).
      (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 57 26 112#
      (forall g_10 : (pointer voidP).
       (forall f_2 : int.
        (forall t_2 : int.
         (forall m_3 : int.
          (forall n_6 : int.
           (((>=) m_3 n_6) ->
            ((=)
            (count g_10 f_2 t_2 m_3 n_6
            __anonstruct_Graph_4_edges_g_7_10_at_L
            __anonstruct_Edge_3_existent_0_edges_23_at_L
            __anonstruct_Edge_3_to_edges_23_at_L
            __anonstruct_Edge_3_from_edges_23_at_L) (0)))))))))))))
  
  axiom Count_one
  #"/home/student/mfsp/examples/constr_destr/graph_3.c" 58 38 219#
  "expl:Axiom count_one"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory voidP (pointer
   voidP)).
   (forall __anonstruct_Edge_3_existent_0_edges_23_at_L : (memory voidP
    Int32.t).
    (forall __anonstruct_Edge_3_to_edges_23_at_L : (memory voidP Int32.t).
     (forall __anonstruct_Edge_3_from_edges_23_at_L : (memory voidP Int32.t).
      (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 60 25 178#
      (forall g_11 : (pointer voidP).
       (forall f_3 : int.
        (forall t_3 : int.
         (forall m_4 : int.
          ((=)
          (count g_11 f_3 t_3 m_4 (Int.(+) m_4 (1))
          __anonstruct_Graph_4_edges_g_7_10_at_L
          __anonstruct_Edge_3_existent_0_edges_23_at_L
          __anonstruct_Edge_3_to_edges_23_at_L
          __anonstruct_Edge_3_from_edges_23_at_L)
          (if
           (Bool.andb
           (Bool.andb
           ((<>)
           (Int32.to_int
           (select __anonstruct_Edge_3_existent_0_edges_23_at_L
           (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4)))
           (0))
           ((=)
           (Int32.to_int
           (select __anonstruct_Edge_3_from_edges_23_at_L
           (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4)))
           f_3))
           ((=)
           (Int32.to_int
           (select __anonstruct_Edge_3_to_edges_23_at_L
           (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4)))
           t_3)) then (1) else (0))))))))))))
  
  axiom Count_split
  #"/home/student/mfsp/examples/constr_destr/graph_3.c" 61 119 285#
  "expl:Axiom count_split"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory voidP (pointer
   voidP)).
   (forall __anonstruct_Edge_3_existent_0_edges_23_at_L : (memory voidP
    Int32.t).
    (forall __anonstruct_Edge_3_to_edges_23_at_L : (memory voidP Int32.t).
     (forall __anonstruct_Edge_3_from_edges_23_at_L : (memory voidP Int32.t).
      (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 63 27 163#
      (forall g_12 : (pointer voidP).
       (forall f_4 : int.
        (forall t_4 : int.
         (forall m_5 : int.
          (forall n_7 : int.
           (forall k_7 : int.
            ((((<=) m_5 n_7) /\ ((<=) n_7 k_7)) ->
             ((=)
             (count g_12 f_4 t_4 m_5 k_7
             __anonstruct_Graph_4_edges_g_7_10_at_L
             __anonstruct_Edge_3_existent_0_edges_23_at_L
             __anonstruct_Edge_3_to_edges_23_at_L
             __anonstruct_Edge_3_from_edges_23_at_L)
             (Int.(+)
             (count g_12 f_4 t_4 m_5 n_7
             __anonstruct_Graph_4_edges_g_7_10_at_L
             __anonstruct_Edge_3_existent_0_edges_23_at_L
             __anonstruct_Edge_3_to_edges_23_at_L
             __anonstruct_Edge_3_from_edges_23_at_L)
             (count g_12 f_4 t_4 n_7 k_7
             __anonstruct_Graph_4_edges_g_7_10_at_L
             __anonstruct_Edge_3_existent_0_edges_23_at_L
             __anonstruct_Edge_3_to_edges_23_at_L
             __anonstruct_Edge_3_from_edges_23_at_L)))))))))))))))
  
  predicate count_saved (g_9 : (pointer voidP)) (f_1 : int) (t_1 : int) (m_2
  : int) (n_5 : int) (__anonstruct_Graph_4_edges_g_7_10_at_L2 : (memory voidP
  (pointer voidP))) (__anonstruct_Graph_4_edges_g_7_10_at_L1 : (memory voidP
  (pointer voidP))) (__anonstruct_Edge_3_existent_0_edges_23_at_L2 : (memory
  voidP Int32.t)) (__anonstruct_Edge_3_existent_0_edges_23_at_L1 : (memory
  voidP Int32.t)) (__anonstruct_Edge_3_to_edges_23_at_L2 : (memory voidP
  Int32.t)) (__anonstruct_Edge_3_to_edges_23_at_L1 : (memory voidP Int32.t))
  (__anonstruct_Edge_3_from_edges_23_at_L2 : (memory voidP Int32.t))
  (__anonstruct_Edge_3_from_edges_23_at_L1 : (memory voidP Int32.t))
  =
     ((=)
     (count g_9 f_1 t_1 m_2 n_5 __anonstruct_Graph_4_edges_g_7_10_at_L1
     __anonstruct_Edge_3_existent_0_edges_23_at_L1
     __anonstruct_Edge_3_to_edges_23_at_L1
     __anonstruct_Edge_3_from_edges_23_at_L1)
     (count g_9 f_1 t_1 m_2 n_5 __anonstruct_Graph_4_edges_g_7_10_at_L2
     __anonstruct_Edge_3_existent_0_edges_23_at_L2
     __anonstruct_Edge_3_to_edges_23_at_L2
     __anonstruct_Edge_3_from_edges_23_at_L2))
  
  
  axiom Count_saved_ax
  #"/home/student/mfsp/examples/constr_destr/graph_3.c" 64 80 238#
  "expl:Axiom count_saved_ax"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L2 : (memory voidP (pointer
   voidP)).
   (forall __anonstruct_Graph_4_edges_g_7_10_at_L1 : (memory voidP (pointer
    voidP)).
    (forall __anonstruct_Edge_3_existent_0_edges_23_at_L2 : (memory voidP
     Int32.t).
     (forall __anonstruct_Edge_3_existent_0_edges_23_at_L1 : (memory voidP
      Int32.t).
      (forall __anonstruct_Edge_3_to_edges_23_at_L2 : (memory voidP Int32.t).
       (forall __anonstruct_Edge_3_to_edges_23_at_L1 : (memory voidP
        Int32.t).
        (forall __anonstruct_Edge_3_from_edges_23_at_L2 : (memory voidP
         Int32.t).
         (forall __anonstruct_Edge_3_from_edges_23_at_L1 : (memory voidP
          Int32.t).
          (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 66 38 155#
          (forall g_13 : (pointer voidP).
           (forall f_5 : int.
            (forall t_5 : int.
             (forall m_6 : int.
              (forall n_8 : int.
               ((edges_saved g_13 m_6 n_8
                __anonstruct_Graph_4_edges_g_7_10_at_L2
                __anonstruct_Graph_4_edges_g_7_10_at_L1
                __anonstruct_Edge_3_existent_0_edges_23_at_L2
                __anonstruct_Edge_3_existent_0_edges_23_at_L1
                __anonstruct_Edge_3_to_edges_23_at_L2
                __anonstruct_Edge_3_to_edges_23_at_L1
                __anonstruct_Edge_3_from_edges_23_at_L2
                __anonstruct_Edge_3_from_edges_23_at_L1) ->
                (count_saved g_13 f_5 t_5 m_6 n_8
                __anonstruct_Graph_4_edges_g_7_10_at_L2
                __anonstruct_Graph_4_edges_g_7_10_at_L1
                __anonstruct_Edge_3_existent_0_edges_23_at_L2
                __anonstruct_Edge_3_existent_0_edges_23_at_L1
                __anonstruct_Edge_3_to_edges_23_at_L2
                __anonstruct_Edge_3_to_edges_23_at_L1
                __anonstruct_Edge_3_from_edges_23_at_L2
                __anonstruct_Edge_3_from_edges_23_at_L1))))))))))))))))
  
  function all_count (g_8 : (pointer voidP)) (f_0 : int) (t_0 : int)
  (__anonstruct_Graph_4_esize_g_8_11_at_L : (memory voidP Int32.t))
  (__anonstruct_Graph_4_edges_g_8_11_at_L : (memory voidP (pointer voidP)))
  (__anonstruct_Edge_3_existent_0_edges_89_at_L : (memory voidP Int32.t))
  (__anonstruct_Edge_3_to_edges_89_at_L : (memory voidP Int32.t))
  (__anonstruct_Edge_3_from_edges_89_at_L : (memory voidP Int32.t)) : int
  =
     (count g_8 f_0 t_0 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_8_11_at_L g_8))
     __anonstruct_Graph_4_edges_g_8_11_at_L
     __anonstruct_Edge_3_existent_0_edges_89_at_L
     __anonstruct_Edge_3_to_edges_89_at_L
     __anonstruct_Edge_3_from_edges_89_at_L)
  
  
end

theory Struct_voidP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate strict_left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct___anonstruct_Graph_4

  use import core.Voidp_tag_id 
  
  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Graph_4_tag  : (tag_id
  voidP)
  
  axiom U___anonstruct_Graph_4_parenttag_voidP  :
  (parenttag __anonstruct_Graph_4_tag voidP_tag)
  
  axiom U___anonstruct_Graph_4_is_final  :
  (forall voidP_tag_table : (tag_table voidP).
   (forall p : (pointer voidP).
    ((instanceof voidP_tag_table p __anonstruct_Graph_4_tag) ->
     ((=) (typeof voidP_tag_table p) __anonstruct_Graph_4_tag))))
  
  predicate frame_tag_struct___anonstruct_Graph_4 (p : (pointer voidP))
  (old_voidP_tag_table : (tag_table voidP)) (voidP_tag_table : (tag_table
  voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct___anonstruct_Graph_4 (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Graph_4 (p : (pointer voidP)) (n
  : int) (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Graph_4 (p : (pointer voidP)) (n :
  int) (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct___anonstruct_Graph_4 (p : (pointer voidP)) (n
  : int) (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct___anonstruct_Graph_4 (p : (pointer
  voidP)) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct___anonstruct_Graph_4 (p : (pointer voidP)) (l
  : int) (r : int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  voidP)) (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) __anonstruct_Graph_4_tag)
  
  predicate typeof_struct___anonstruct_Graph_4 (p : (pointer voidP)) (l :
  int) (r : int) (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) __anonstruct_Graph_4_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) __anonstruct_Graph_4_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  voidP)) (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p __anonstruct_Graph_4_tag)
  
  predicate instanceof_struct___anonstruct_Graph_4 (p : (pointer voidP)) (l :
  int) (r : int) (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p __anonstruct_Graph_4_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) __anonstruct_Graph_4_tag))))
  
  predicate right_valid_struct___anonstruct_Graph_4 (p : (pointer voidP)) (b
  : int) (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct___anonstruct_Graph_4 (p : (pointer voidP)) (a :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct___anonstruct_Graph_4 (p : (pointer
  voidP)) (a : int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct___anonstruct_Graph_4 (p : (pointer voidP)) (a : int)
  (b : int) (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct___anonstruct_Graph_4 (p : (pointer voidP)) (a
  : int) (b : int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
  axiom U___anonstruct_Graph_4_int  :
  ((=) (int_of_tag __anonstruct_Graph_4_tag) (5))
  
end

module Struct___anonstruct_Graph_4_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Graph_4
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct___anonstruct_Graph_4 p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !voidP_alloc_table) p) !voidP_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !voidP_alloc_table) !voidP_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n !voidP_tag_table) /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !voidP_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Graph_4
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Graph_4 result (0) (0)
       !voidP_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Graph_4 result (1) (old
       !voidP_alloc_table) !voidP_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Graph_4 result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Graph_4 result (0) (old
       !voidP_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Graph_4 result (0) (old
       !voidP_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Graph_4 result !voidP_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Graph_4 result
      !voidP_tag_table))))))) }
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto_while_0_break_exc unit
  
  exception Goto_while_0_break_0_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

theory Struct___anonstruct_Vertex_2

  use import core.Voidp_tag_id 
  
  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Vertex_2_tag  : (tag_id
  voidP)
  
  axiom U___anonstruct_Vertex_2_parenttag_voidP  :
  (parenttag __anonstruct_Vertex_2_tag voidP_tag)
  
  axiom U___anonstruct_Vertex_2_is_final  :
  (forall voidP_tag_table : (tag_table voidP).
   (forall p : (pointer voidP).
    ((instanceof voidP_tag_table p __anonstruct_Vertex_2_tag) ->
     ((=) (typeof voidP_tag_table p) __anonstruct_Vertex_2_tag))))
  
  predicate frame_tag_struct___anonstruct_Vertex_2 (p : (pointer voidP))
  (old_voidP_tag_table : (tag_table voidP)) (voidP_tag_table : (tag_table
  voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct___anonstruct_Vertex_2 (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Vertex_2 (p : (pointer voidP)) (n
  : int) (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Vertex_2 (p : (pointer voidP)) (n :
  int) (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct___anonstruct_Vertex_2 (p : (pointer voidP)) (n
  : int) (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  voidP)) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct___anonstruct_Vertex_2 (p : (pointer voidP))
  (l : int) (r : int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  voidP)) (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) __anonstruct_Vertex_2_tag)
  
  predicate typeof_struct___anonstruct_Vertex_2 (p : (pointer voidP)) (l :
  int) (r : int) (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) __anonstruct_Vertex_2_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) __anonstruct_Vertex_2_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  voidP)) (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p __anonstruct_Vertex_2_tag)
  
  predicate instanceof_struct___anonstruct_Vertex_2 (p : (pointer voidP)) (l
  : int) (r : int) (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p __anonstruct_Vertex_2_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) __anonstruct_Vertex_2_tag))))
  
  predicate right_valid_struct___anonstruct_Vertex_2 (p : (pointer voidP)) (b
  : int) (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct___anonstruct_Vertex_2 (p : (pointer voidP)) (a
  : int) (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  voidP)) (a : int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct___anonstruct_Vertex_2 (p : (pointer voidP)) (a :
  int) (b : int) (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct___anonstruct_Vertex_2 (p : (pointer voidP))
  (a : int) (b : int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
  axiom U___anonstruct_Vertex_2_int  :
  ((=) (int_of_tag __anonstruct_Vertex_2_tag) (6))
  
end

module Struct___anonstruct_Vertex_2_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Vertex_2
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !voidP_alloc_table) p) !voidP_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !voidP_alloc_table) !voidP_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n !voidP_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !voidP_tag_table))))))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Struct___anonstruct_Graph_4_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Graph_4
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct___anonstruct_Graph_4 p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !voidP_alloc_table) p) !voidP_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !voidP_alloc_table) !voidP_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n !voidP_tag_table) /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !voidP_tag_table))))))) }
  
end

theory Struct___anonstruct_Edge_3

  use import core.Voidp_tag_id 
  
  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Edge_3_tag  : (tag_id
  voidP)
  
  axiom U___anonstruct_Edge_3_parenttag_voidP  :
  (parenttag __anonstruct_Edge_3_tag voidP_tag)
  
  axiom U___anonstruct_Edge_3_is_final  :
  (forall voidP_tag_table : (tag_table voidP).
   (forall p : (pointer voidP).
    ((instanceof voidP_tag_table p __anonstruct_Edge_3_tag) ->
     ((=) (typeof voidP_tag_table p) __anonstruct_Edge_3_tag))))
  
  predicate frame_tag_struct___anonstruct_Edge_3 (p : (pointer voidP))
  (old_voidP_tag_table : (tag_table voidP)) (voidP_tag_table : (tag_table
  voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct___anonstruct_Edge_3 (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Edge_3 (p : (pointer voidP)) (n :
  int) (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Edge_3 (p : (pointer voidP)) (n :
  int) (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct___anonstruct_Edge_3 (p : (pointer voidP)) (n :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct___anonstruct_Edge_3 (p : (pointer
  voidP)) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct___anonstruct_Edge_3 (p : (pointer voidP)) (l
  : int) (r : int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct___anonstruct_Edge_3 (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) __anonstruct_Edge_3_tag)
  
  predicate typeof_struct___anonstruct_Edge_3 (p : (pointer voidP)) (l : int)
  (r : int) (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) __anonstruct_Edge_3_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) __anonstruct_Edge_3_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  voidP)) (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p __anonstruct_Edge_3_tag)
  
  predicate instanceof_struct___anonstruct_Edge_3 (p : (pointer voidP)) (l :
  int) (r : int) (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p __anonstruct_Edge_3_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) __anonstruct_Edge_3_tag))))
  
  predicate right_valid_struct___anonstruct_Edge_3 (p : (pointer voidP)) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct___anonstruct_Edge_3 (p : (pointer voidP)) (a :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct___anonstruct_Edge_3 (p : (pointer
  voidP)) (a : int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct___anonstruct_Edge_3 (p : (pointer voidP)) (a : int)
  (b : int) (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct___anonstruct_Edge_3 (p : (pointer voidP)) (a
  : int) (b : int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
  axiom U___anonstruct_Edge_3_int  :
  ((=) (int_of_tag __anonstruct_Edge_3_tag) (4))
  
end

module Struct___anonstruct_Edge_3_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Edge_3
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct___anonstruct_Edge_3 p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !voidP_alloc_table) p) !voidP_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !voidP_alloc_table) !voidP_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n !voidP_tag_table) /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !voidP_tag_table))))))) }
  
end

module Function_graph_create_safety
#"/home/student/mfsp/examples/constr_destr/graph_3.c" 82 6 25#
"expl:graph_create, safety"

  use import core.Voidp 
  
  use import core.Upd_safe 
  
  use import core.Upd_offset_safe 
  
  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2_unsafe 
  
  use import Struct___anonstruct_Graph_4_unsafe 
  
  use import Struct___anonstruct_Graph_4_safe 
  
  use import Struct___anonstruct_Edge_3_unsafe 
  
  use import core.Shift_safe 
  
  use Safe_uint64_of_Safe_int32 
  
  use Safe_uint64 
  
  use Safe_int32 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import core.Eq_pointer_safe 
  
  use bool.Bool 
  
  use import core.Any_pointer 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use why3.Bool.Bool 
  
  let graph_create
  #"/home/student/mfsp/examples/constr_destr/graph_3.c" 82 6 25#
  "expl:Function graph_create, safety" =
  fun
   (voidP_result_13_alloc_table : ref (alloc_table voidP))
   (voidP_vertices_27_alloc_table : ref (alloc_table voidP))
   (voidP_edges_28_alloc_table : ref (alloc_table voidP))
   (voidP_edges_28_tag_table : ref (tag_table voidP))
   (voidP_vertices_27_tag_table : ref (tag_table voidP))
   (voidP_result_13_tag_table : ref (tag_table voidP))
   (__anonstruct_Vertex_2_existent_vertices_27 : ref (memory voidP Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_28 : ref (memory voidP Int32.t))
   (__anonstruct_Graph_4_vertices_result_13 : ref (memory voidP (pointer
   voidP))) (__anonstruct_Graph_4_vsize_result_13 : ref (memory voidP
   Int32.t)) (__anonstruct_Graph_4_edges_result_13 : ref (memory voidP
   (pointer voidP))) (__anonstruct_Graph_4_ecnt_result_13 : ref (memory voidP
   Int32.t)) (__anonstruct_Graph_4_esize_result_13 : ref (memory voidP
   Int32.t)) (__anonstruct_Edge_3_from_edges_28 : (memory voidP Int32.t))
   (__anonstruct_Edge_3_to_edges_28 : (memory voidP Int32.t)) 
   requires { (true) } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let g_14 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0 = (any_pointer  () : (pointer voidP)) in
    (let i = ref (Safe_int32.any_  () ) in
    (let i_0 = ref (Safe_int32.any_  () ) in
    (let __retres = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     (g_14 :=
      (let _jessie_95 =
      (allocate_singleton_struct___anonstruct_Graph_4 
       voidP_result_13_alloc_table voidP_result_13_tag_table ) in
      begin
      (assert {
      (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 84 15 32#
      "expl:Pointer index bounds" true) }); _jessie_95 end));
      (if
      (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 85 8 10#
      (Bool.notb 
       (#"graph_3_c.jc" 179 22 31#
       (neq_pointer  !voidP_result_13_alloc_table
        !voidP_result_13_alloc_table !g_14 (null  ) )) ))
      then
       begin
       (__retres :=
        (let _jessie_96 = (null  ) in
        begin
        (assert {
        (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 86 8 17#
        "expl:Pointer index bounds" true) }); _jessie_96 end));
        (raise (Return_label_exc ())) end else ());
      begin
      (let _jessie_91 =
      (let _jessie_90 =
      (#"graph_3_c.jc" 184 35 50# "expl:Integer cast"
      (Safe_int32.of_int (1024))) in
      begin
      (assert {
      (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 88 4 19#
      "expl:Pointer index bounds" true) }); _jessie_90 end) in
      (let _jessie_92 = !g_14 in
      (let _jessie_93 = (0) in
      (let _jessie_94 = _jessie_92 in
      (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 88 4 19#
      "expl:Pointer dereference"
      (upd  !voidP_result_13_alloc_table __anonstruct_Graph_4_vsize_result_13
       _jessie_92 _jessie_91 ))))));
       begin
       (let _jessie_85 =
       (let _jessie_84 =
       (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 89 18 56#
       "expl:Allocation size"
       (allocate_struct___anonstruct_Vertex_2_requires 
        (Safe_uint64.to_int 
         (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 89 25 33#
         "expl:Integer cast"
         (Safe_uint64_of_Safe_int32.cast 
          (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 89 25 33#
          "expl:Pointer dereference"
          (acc  !voidP_result_13_alloc_table
           !__anonstruct_Graph_4_vsize_result_13 !g_14 )) )) )
        voidP_vertices_27_alloc_table voidP_vertices_27_tag_table )) in
       begin
       (assert {
       (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 89 18 56#
       "expl:Pointer index bounds" true) }); _jessie_84 end) in
       (let _jessie_86 = !g_14 in
       (let _jessie_87 = (0) in
       (let _jessie_88 = _jessie_86 in
       (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 89 18 56#
       "expl:Pointer dereference"
       (upd  !voidP_result_13_alloc_table
        __anonstruct_Graph_4_vertices_result_13 _jessie_86 _jessie_85 ))))));
        (if
        (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 90 8 20#
        (Bool.notb 
         (#"graph_3_c.jc" 187 23 51#
         (neq_pointer  !voidP_vertices_27_alloc_table
          !voidP_vertices_27_alloc_table
          (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 90 9 20#
          "expl:Pointer dereference"
          (acc  !voidP_result_13_alloc_table
           !__anonstruct_Graph_4_vertices_result_13 !g_14 )) (null  ) )) ))
        then
         begin
         (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 91 8 15#
         (free_struct___anonstruct_Graph_4  !g_14 voidP_result_13_alloc_table
          ));
          begin
          (__retres :=
           (let _jessie_89 = (null  ) in
           begin
           (assert {
           (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 92 8 17#
           "expl:Pointer index bounds" true) }); _jessie_89 end));
           (raise (Return_label_exc ())) end end else ());
        begin
        (let _jessie_80 =
        (let _jessie_79 =
        (#"graph_3_c.jc" 195 36 51# "expl:Integer cast"
        (Safe_int32.of_int (1024))) in
        begin
        (assert {
        (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 94 4 19#
        "expl:Pointer index bounds" true) }); _jessie_79 end) in
        (let _jessie_81 = !g_14 in
        (let _jessie_82 = (0) in
        (let _jessie_83 = _jessie_81 in
        (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 94 4 19#
        "expl:Pointer dereference"
        (upd  !voidP_result_13_alloc_table
         __anonstruct_Graph_4_esize_result_13 _jessie_81 _jessie_80 ))))));
         begin
         (let _jessie_75 =
         (let _jessie_74 =
         (#"graph_3_c.jc" 196 35 47# "expl:Integer cast"
         (Safe_int32.of_int (0))) in
         begin
         (assert {
         (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 95 4 15#
         "expl:Pointer index bounds" true) }); _jessie_74 end) in
         (let _jessie_76 = !g_14 in
         (let _jessie_77 = (0) in
         (let _jessie_78 = _jessie_76 in
         (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 95 4 15#
         "expl:Pointer dereference"
         (upd  !voidP_result_13_alloc_table
          __anonstruct_Graph_4_ecnt_result_13 _jessie_76 _jessie_75 ))))));
          begin
          (let _jessie_55 =
          (let _jessie_54 =
          (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 96 15 50#
          "expl:Allocation size"
          (allocate_struct___anonstruct_Edge_3_requires 
           (Safe_uint64.to_int 
            (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 96 22 30#
            "expl:Integer cast"
            (Safe_uint64_of_Safe_int32.cast 
             (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 96 22 30#
             "expl:Pointer dereference"
             (acc  !voidP_result_13_alloc_table
              !__anonstruct_Graph_4_esize_result_13 !g_14 )) )) )
           voidP_edges_28_alloc_table voidP_edges_28_tag_table )) in
          begin
          (assert {
          (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 96 15 50#
          "expl:Pointer index bounds" true) }); _jessie_54 end) in
          (let _jessie_56 = !g_14 in
          (let _jessie_57 = (0) in
          (let _jessie_58 = _jessie_56 in
          (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 96 15 50#
          "expl:Pointer dereference"
          (upd  !voidP_result_13_alloc_table
           __anonstruct_Graph_4_edges_result_13 _jessie_56 _jessie_55 ))))));
           (if
           (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 97 8 17#
           (Bool.notb 
            (#"graph_3_c.jc" 199 23 48#
            (neq_pointer  !voidP_edges_28_alloc_table
             !voidP_edges_28_alloc_table
             (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 97 9 17#
             "expl:Pointer dereference"
             (acc  !voidP_result_13_alloc_table
              !__anonstruct_Graph_4_edges_result_13 !g_14 )) (null  ) )) ))
           then
            begin
            (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 98 8 25#
            (free_struct___anonstruct_Vertex_2 
             (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 98 13 24#
             "expl:Pointer dereference"
             (acc  !voidP_result_13_alloc_table
              !__anonstruct_Graph_4_vertices_result_13 !g_14 ))
             voidP_vertices_27_alloc_table ));
             begin
             (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 99 8 15#
             (free_struct___anonstruct_Graph_4  !g_14
              voidP_result_13_alloc_table ));
              begin
              (__retres :=
               (let _jessie_59 = (null  ) in
               begin
               (assert {
               (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 100 8 17#
               "expl:Pointer index bounds" true) }); _jessie_59 end));
               (raise (Return_label_exc ())) end end end else ());
           try
            begin
            (i :=
             (let _jessie_66 =
             (#"graph_3_c.jc" 209 23 35# "expl:Integer cast"
             (Safe_int32.of_int (0))) in
             begin
             (assert {
             (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 107 13 14#
             "expl:Pointer index bounds" true) }); _jessie_66 end));
             'LoopEntry:
             begin
             'LoopEntry:
             'Loop_3:
             loop
             invariant { (#"graph_3_c.jc" 211 9 837# true) }
               variant {
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 105 21 33#
                 (Int.(-)
                 (Int32.to_int
                 (select !__anonstruct_Graph_4_vsize_result_13 !g_14))
                 (Int32.to_int !i))) }
              begin
              any unit
              requires { true } reads {
              __anonstruct_Graph_4_vertices_result_13,
              __anonstruct_Graph_4_vsize_result_13,
              __anonstruct_Vertex_2_existent_vertices_27 }
              ensures {
                ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 104 23 41#
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 104 23 41#
                 ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 104 23 29#
                  (Int32.(<=) (#"graph_3_c.jc" 217 41 53# "expl:Integer cast"
                  (Int32.of_int (0))) !i))
                 /\
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 104 28 41#
                 (Int32.(<=) !i
                 (select !__anonstruct_Graph_4_vsize_result_13 !g_14))))))
                /\
                (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 103 23 81#
                (forall k_8 : int.
                 ((((<=) (0) k_8) /\ ((<) k_8 (Int32.to_int !i))) ->
                  ((=)
                  (Int32.to_int
                  (select !__anonstruct_Vertex_2_existent_vertices_27
                  (shift
                  (select !__anonstruct_Graph_4_vertices_result_13 !g_14)
                  k_8))) (0)))))) } ;
               try
                begin
                'LoopCurrent:
                begin
                'LoopCurrent:
                (if
                (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 107 20 32#
                (Safe_int32.(<)  !i
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 107 24 32#
                 "expl:Pointer dereference"
                 (acc  !voidP_result_13_alloc_table
                  !__anonstruct_Graph_4_vsize_result_13 !g_14 )) )) then ()
                else (raise (Goto_while_0_break_exc ())));
                 begin
                 (let _jessie_61 =
                 (let _jessie_60 =
                 (#"graph_3_c.jc" 224 83 95# "expl:Integer cast"
                 (Safe_int32.of_int (0))) in
                 begin
                 (assert {
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 108 8 35#
                 "expl:Pointer index bounds" true) }); _jessie_60 end) in
                 (let _jessie_62 =
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 108 8 19#
                 "expl:Pointer dereference"
                 (acc  !voidP_result_13_alloc_table
                  !__anonstruct_Graph_4_vertices_result_13 !g_14 )) in
                 (let _jessie_63 = (Safe_int32.to_int  !i ) in
                 (let _jessie_64 = (shift_typesafe  _jessie_62 _jessie_63 )
                 in
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 108 8 35#
                 "expl:Pointer dereference"
                 (upd_offset_typesafe  !voidP_vertices_27_alloc_table
                  __anonstruct_Vertex_2_existent_vertices_27 _jessie_62
                  _jessie_63 _jessie_61 ))))));
                  (i :=
                   (let _jessie_65 =
                   (Safe_int32.(+)  !i
                    (#"graph_3_c.jc" 225 53 65# "expl:Integer cast"
                    (Safe_int32.of_int (1))) ) in
                   begin
                   (assert {
                   (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 107 34 37#
                   "expl:Pointer index bounds" true) }); _jessie_65 end)) end
                end; (raise (Loop_continue_exc ())) end with
                Loop_continue_exc _jessie_5 -> () end end end;
              (raise (Goto_while_0_break_exc ())) end end with
            Goto_while_0_break_exc _jessie_1 ->
            'While_0_break: 'While_0_break: () end;
           try
            begin
            (i_0 :=
             (let _jessie_73 =
             (#"graph_3_c.jc" 231 25 37# "expl:Integer cast"
             (Safe_int32.of_int (0))) in
             begin
             (assert {
             (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 115 13 14#
             "expl:Pointer index bounds" true) }); _jessie_73 end));
             'LoopEntry:
             begin
             'LoopEntry:
             'Loop_4:
             loop
             invariant { (#"graph_3_c.jc" 233 9 853# true) }
               variant {
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 113 21 33#
                 (Int.(-)
                 (Int32.to_int
                 (select !__anonstruct_Graph_4_esize_result_13 !g_14))
                 (Int32.to_int !i_0))) }
              begin
              any unit
              requires { true } reads {
              __anonstruct_Edge_3_existent_0_edges_28,
              __anonstruct_Graph_4_edges_result_13,
              __anonstruct_Graph_4_esize_result_13 }
              ensures {
                ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 112 23 41#
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 112 23 41#
                 ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 112 23 29#
                  (Int32.(<=) (#"graph_3_c.jc" 239 41 53# "expl:Integer cast"
                  (Int32.of_int (0))) !i_0))
                 /\
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 112 28 41#
                 (Int32.(<=) !i_0
                 (select !__anonstruct_Graph_4_esize_result_13 !g_14))))))
                /\
                (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 111 23 78#
                (forall k_9 : int.
                 ((((<=) (0) k_9) /\ ((<) k_9 (Int32.to_int !i_0))) ->
                  ((=)
                  (Int32.to_int
                  (select !__anonstruct_Edge_3_existent_0_edges_28
                  (shift (select !__anonstruct_Graph_4_edges_result_13 !g_14)
                  k_9))) (0)))))) } ;
               try
                begin
                'LoopCurrent:
                begin
                'LoopCurrent:
                (if
                (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 115 20 32#
                (Safe_int32.(<)  !i_0
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 115 24 32#
                 "expl:Pointer dereference"
                 (acc  !voidP_result_13_alloc_table
                  !__anonstruct_Graph_4_esize_result_13 !g_14 )) )) then ()
                else (raise (Goto_while_0_break_0_exc ())));
                 begin
                 (let _jessie_68 =
                 (let _jessie_67 =
                 (#"graph_3_c.jc" 246 84 96# "expl:Integer cast"
                 (Safe_int32.of_int (0))) in
                 begin
                 (assert {
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 116 8 32#
                 "expl:Pointer index bounds" true) }); _jessie_67 end) in
                 (let _jessie_69 =
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 116 8 16#
                 "expl:Pointer dereference"
                 (acc  !voidP_result_13_alloc_table
                  !__anonstruct_Graph_4_edges_result_13 !g_14 )) in
                 (let _jessie_70 = (Safe_int32.to_int  !i_0 ) in
                 (let _jessie_71 = (shift_typesafe  _jessie_69 _jessie_70 )
                 in
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 116 8 32#
                 "expl:Pointer dereference"
                 (upd_offset_typesafe  !voidP_edges_28_alloc_table
                  __anonstruct_Edge_3_existent_0_edges_28 _jessie_69
                  _jessie_70 _jessie_68 ))))));
                  (i_0 :=
                   (let _jessie_72 =
                   (Safe_int32.(+)  !i_0
                    (#"graph_3_c.jc" 247 57 69# "expl:Integer cast"
                    (Safe_int32.of_int (1))) ) in
                   begin
                   (assert {
                   (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 115 34 37#
                   "expl:Pointer index bounds" true) }); _jessie_72 end)) end
                end; (raise (Loop_continue_exc ())) end with
                Loop_continue_exc _jessie_7 -> () end end end;
              (raise (Goto_while_0_break_0_exc ())) end end with
            Goto_while_0_break_0_exc _jessie_2 ->
            'While_0_break_0: 'While_0_break_0: () end;
           begin
           (__retres :=
            (let _jessie_53 = !g_14 in
            begin
            (assert {
            (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 118 4 13#
            "expl:Pointer index bounds" true) }); _jessie_53 end));
            (raise (Return_label_exc ())) end end end end end end end with
     Return_label_exc _jessie_3 ->
     'Return_label:
     'Return_label:
     begin
     (return :=
      (let _jessie_97 = !__retres in
      begin
      (assert { (#"graph_3_c.jc" 254 7 22# "expl:Pointer index bounds" true)
      }); _jessie_97 end)); (raise Return) end end))))); absurd  end with
    Return -> !return end)
  
end

module Struct___anonstruct_Vertex_2_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Vertex_2
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !voidP_alloc_table) p) !voidP_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !voidP_alloc_table) !voidP_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n !voidP_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !voidP_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Vertex_2
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Vertex_2 result (0) (0)
       !voidP_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Vertex_2 result (1) (old
       !voidP_alloc_table) !voidP_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Vertex_2 result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Vertex_2 result (0) (old
       !voidP_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Vertex_2 result (0) (old
       !voidP_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Vertex_2 result
       !voidP_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Vertex_2 result
      !voidP_tag_table))))))) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Struct___anonstruct_Edge_3_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Edge_3
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct___anonstruct_Edge_3 p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !voidP_alloc_table) p) !voidP_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !voidP_alloc_table) !voidP_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n !voidP_tag_table) /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !voidP_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Edge_3
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Edge_3 result (0) (0)
       !voidP_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Edge_3 result (1) (old
       !voidP_alloc_table) !voidP_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Edge_3 result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Edge_3 result (0) (old
       !voidP_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Edge_3 result (0) (old
       !voidP_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Edge_3 result !voidP_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Edge_3 result
      !voidP_tag_table))))))) }
  
end

theory Logic_is_vertex

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate is_vertex (g : (pointer voidP)) (v : int)
  (__anonstruct_Graph_4_vsize_g_2_at_L : (memory voidP Int32.t))
  =
     (((<=) (0) v) /\
     ((<) v (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_at_L g))))
  
  
end

theory Logic_edge_valid

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edge_valid (g_0 : (pointer voidP)) (k_1 : int)
  (__anonstruct_Graph_4_edges_g_0_3_at_L : (memory voidP (pointer voidP)))
  (__anonstruct_Graph_4_vsize_g_0_3_at_L : (memory voidP Int32.t))
  (__anonstruct_Graph_4_vertices_g_0_3_at_L : (memory voidP (pointer voidP)))
  (__anonstruct_Edge_3_existent_0_edges_15_at_L : (memory voidP Int32.t))
  (__anonstruct_Edge_3_to_edges_15_at_L : (memory voidP Int32.t))
  (__anonstruct_Edge_3_from_edges_15_at_L : (memory voidP Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_16_at_L : (memory voidP Int32.t))
  =
     ((not
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_existent_0_edges_15_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))) (0)))
      ->
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_15_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_to_edges_15_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((not
       ((=)
       (Int32.to_int
       (select __anonstruct_Vertex_2_existent_vertices_16_at_L
       (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_15_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
       (0)))
      /\
      (not
      ((=)
      (Int32.to_int
      (select __anonstruct_Vertex_2_existent_vertices_16_at_L
      (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
      (Int32.to_int
      (select __anonstruct_Edge_3_to_edges_15_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
      (0)))))))
  
  
end

theory Logic_edges_valid

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edge_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edges_valid (g_1 : (pointer voidP)) (n_1 : int)
  (__anonstruct_Graph_4_edges_g_1_4_at_L : (memory voidP (pointer voidP)))
  (__anonstruct_Graph_4_vsize_g_1_4_at_L : (memory voidP Int32.t))
  (__anonstruct_Graph_4_vertices_g_1_4_at_L : (memory voidP (pointer voidP)))
  (__anonstruct_Edge_3_existent_0_edges_49_at_L : (memory voidP Int32.t))
  (__anonstruct_Edge_3_to_edges_49_at_L : (memory voidP Int32.t))
  (__anonstruct_Edge_3_from_edges_49_at_L : (memory voidP Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_50_at_L : (memory voidP Int32.t))
  =
     (forall k_2 : int.
      ((((<=) (0) k_2) /\ ((<) k_2 n_1)) ->
       (edge_valid g_1 k_2 __anonstruct_Graph_4_edges_g_1_4_at_L
       __anonstruct_Graph_4_vsize_g_1_4_at_L
       __anonstruct_Graph_4_vertices_g_1_4_at_L
       __anonstruct_Edge_3_existent_0_edges_49_at_L
       __anonstruct_Edge_3_to_edges_49_at_L
       __anonstruct_Edge_3_from_edges_49_at_L
       __anonstruct_Vertex_2_existent_vertices_50_at_L)))
  
  
end

theory Logic_valid_0

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edges_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  predicate valid_0 (g_2 : (pointer voidP)) (voidP_edges_18_alloc_table_at_L
  : (alloc_table voidP)) (voidP_vertices_17_alloc_table_at_L : (alloc_table
  voidP)) (__anonstruct_Graph_4_esize_g_2_5_at_L : (memory voidP Int32.t))
  (__anonstruct_Graph_4_ecnt_g_2_5_at_L : (memory voidP Int32.t))
  (__anonstruct_Graph_4_edges_g_2_5_at_L : (memory voidP (pointer voidP)))
  (__anonstruct_Graph_4_vsize_g_2_5_at_L : (memory voidP Int32.t))
  (__anonstruct_Graph_4_vertices_g_2_5_at_L : (memory voidP (pointer voidP)))
  (__anonstruct_Edge_3_existent_0_edges_18_at_L : (memory voidP Int32.t))
  (__anonstruct_Edge_3_to_edges_18_at_L : (memory voidP Int32.t))
  (__anonstruct_Edge_3_from_edges_18_at_L : (memory voidP Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_17_at_L : (memory voidP Int32.t))
  =
     ((Int32.(>) (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)
      (#"graph_3_c.jc" 53 24 36# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (#"graph_3_c.jc" 53 54 66# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)
      (#"graph_3_c.jc" 55 23 35# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min voidP_vertices_17_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max voidP_vertices_17_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp2 : int.
        ((((<=) (0) __framac_tmp2) /\
         ((<=) __framac_tmp2
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min voidP_edges_18_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max voidP_edges_18_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp1 : int.
        ((((<=) (0) __framac_tmp1) /\
         ((<=) __framac_tmp1
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((edges_valid g_2
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
      __anonstruct_Graph_4_edges_g_2_5_at_L
      __anonstruct_Graph_4_vsize_g_2_5_at_L
      __anonstruct_Graph_4_vertices_g_2_5_at_L
      __anonstruct_Edge_3_existent_0_edges_18_at_L
      __anonstruct_Edge_3_to_edges_18_at_L
      __anonstruct_Edge_3_from_edges_18_at_L
      __anonstruct_Vertex_2_existent_vertices_17_at_L)
     /\
     (forall k_3 : int.
      ((((<=)
        (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)) k_3)
       /\
       ((<) k_3
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)))) ->
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_18_at_L
       (shift (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2) k_3))) (0)))))))))))
  
  
end

module Function_graph_create_behaviors
#"/home/student/mfsp/examples/constr_destr/graph_3.c" 82 6 25#
"expl:graph_create, behaviors"

  use import core.Voidp 
  
  use import core.Upd_unsafe 
  
  use Unsafe_uint64_of_Unsafe_int32 
  
  use Unsafe_uint64 
  
  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2_safe 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Struct___anonstruct_Graph_4_safe 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Struct___anonstruct_Edge_3_safe 
  
  use import Struct___anonstruct_Edge_3 
  
  use import core.Shift_unsafe 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use bool.Bool 
  
  use import core.Any_pointer 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let graph_create_ensures_default
  #"/home/student/mfsp/examples/constr_destr/graph_3.c" 82 6 25#
  "expl:Function graph_create, default behavior" =
  fun
   (voidP_result_13_alloc_table : ref (alloc_table voidP))
   (voidP_vertices_27_alloc_table : ref (alloc_table voidP))
   (voidP_edges_28_alloc_table : ref (alloc_table voidP))
   (voidP_edges_28_tag_table : ref (tag_table voidP))
   (voidP_vertices_27_tag_table : ref (tag_table voidP))
   (voidP_result_13_tag_table : ref (tag_table voidP))
   (__anonstruct_Vertex_2_existent_vertices_27 : ref (memory voidP Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_28 : ref (memory voidP Int32.t))
   (__anonstruct_Graph_4_vertices_result_13 : ref (memory voidP (pointer
   voidP))) (__anonstruct_Graph_4_vsize_result_13 : ref (memory voidP
   Int32.t)) (__anonstruct_Graph_4_edges_result_13 : ref (memory voidP
   (pointer voidP))) (__anonstruct_Graph_4_ecnt_result_13 : ref (memory voidP
   Int32.t)) (__anonstruct_Graph_4_esize_result_13 : ref (memory voidP
   Int32.t)) (__anonstruct_Edge_3_from_edges_28 : (memory voidP Int32.t))
   (__anonstruct_Edge_3_to_edges_28 : (memory voidP Int32.t)) 
   requires { (true) }
   ensures {
     ("expl:Postcondition"
     (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 74 12 215#
     "expl:Ensures clause"
     ((not ((=) result null)) ->
      ((valid_0 result !voidP_edges_28_alloc_table
       !voidP_vertices_27_alloc_table !__anonstruct_Graph_4_esize_result_13
       !__anonstruct_Graph_4_ecnt_result_13
       !__anonstruct_Graph_4_edges_result_13
       !__anonstruct_Graph_4_vsize_result_13
       !__anonstruct_Graph_4_vertices_result_13
       !__anonstruct_Edge_3_existent_0_edges_28
       __anonstruct_Edge_3_to_edges_28 __anonstruct_Edge_3_from_edges_28
       !__anonstruct_Vertex_2_existent_vertices_27)
      /\
      ((((<=) (offset_min !voidP_result_13_alloc_table result) (0)) /\
       (((>=) (offset_max !voidP_result_13_alloc_table result) (0)) /\
       ((=) true true)))
      /\
      (((strict_left_valid_struct___anonstruct_Graph_4 result (0)
        !voidP_result_13_alloc_table)
       /\
       (right_valid_struct___anonstruct_Graph_4 result (Int.(-_) 1)
       !voidP_result_13_alloc_table))
      /\
      (((strict_left_valid_struct___anonstruct_Vertex_2
        (select !__anonstruct_Graph_4_vertices_result_13 result) (0)
        !voidP_vertices_27_alloc_table)
       /\
       (right_valid_struct___anonstruct_Vertex_2
       (select !__anonstruct_Graph_4_vertices_result_13 result) (Int.(-_) 1)
       !voidP_vertices_27_alloc_table))
      /\
      (((strict_left_valid_struct___anonstruct_Edge_3
        (select !__anonstruct_Graph_4_edges_result_13 result) (0)
        !voidP_edges_28_alloc_table)
       /\
       (right_valid_struct___anonstruct_Edge_3
       (select !__anonstruct_Graph_4_edges_result_13 result) (Int.(-_) 1)
       !voidP_edges_28_alloc_table))
      /\
      (Int32.(=) (select !__anonstruct_Graph_4_ecnt_result_13 result)
      (#"graph_3_c.jc" 166 40 52# "expl:Integer cast" (Int32.of_int (0))))))))))))
     } diverges  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let g_14 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0 = (any_pointer  () : (pointer voidP)) in
    (let i = ref (Unsafe_int32.any_  () ) in
    (let i_0 = ref (Unsafe_int32.any_  () ) in
    (let __retres = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     (g_14 :=
      (allocate_singleton_struct___anonstruct_Graph_4 
       voidP_result_13_alloc_table voidP_result_13_tag_table ));
      (if
      (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 85 8 10#
      (Bool.notb  ((<>)  !g_14 (null  ) ) ))
      then begin (__retres := (null  )); (raise (Return_label_exc ())) end
      else ());
      begin
      (let _jessie_46 =
      (#"graph_3_c.jc" 184 35 50# "expl:Integer cast"
      (Unsafe_int32.of_int (1024))) in
      (let _jessie_47 = !g_14 in
      (let _jessie_48 = (0) in
      (let _jessie_49 = _jessie_47 in
      (upd  __anonstruct_Graph_4_vsize_result_13 _jessie_49 _jessie_46 )))));
       begin
       (let _jessie_40 =
       (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 89 18 56#
       "expl:Allocation size"
       (allocate_struct___anonstruct_Vertex_2 
        (Unsafe_uint64.to_int 
         (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 89 25 33#
         "expl:Integer cast"
         (Unsafe_uint64_of_Unsafe_int32.cast 
          (acc  !__anonstruct_Graph_4_vsize_result_13 !g_14 ) )) )
        voidP_vertices_27_alloc_table voidP_vertices_27_tag_table )) in
       (let _jessie_41 = !g_14 in
       (let _jessie_42 = (0) in
       (let _jessie_43 = _jessie_41 in
       (upd  __anonstruct_Graph_4_vertices_result_13 _jessie_43 _jessie_40 )))));
        (if
        (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 90 8 20#
        (Bool.notb 
         ((<>)  (acc  !__anonstruct_Graph_4_vertices_result_13 !g_14 )
          (null  ) ) ))
        then
         begin
         (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 91 8 15#
         (safe_free_struct___anonstruct_Graph_4  !g_14
          voidP_result_13_alloc_table ));
          begin (__retres := (null  )); (raise (Return_label_exc ())) end end
        else ());
        begin
        (let _jessie_35 =
        (#"graph_3_c.jc" 195 36 51# "expl:Integer cast"
        (Unsafe_int32.of_int (1024))) in
        (let _jessie_36 = !g_14 in
        (let _jessie_37 = (0) in
        (let _jessie_38 = _jessie_36 in
        (upd  __anonstruct_Graph_4_esize_result_13 _jessie_38 _jessie_35 )))));
         begin
         (let _jessie_30 =
         (#"graph_3_c.jc" 196 35 47# "expl:Integer cast"
         (Unsafe_int32.of_int (0))) in
         (let _jessie_31 = !g_14 in
         (let _jessie_32 = (0) in
         (let _jessie_33 = _jessie_31 in
         (upd  __anonstruct_Graph_4_ecnt_result_13 _jessie_33 _jessie_30 )))));
          begin
          (let _jessie_10 =
          (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 96 15 50#
          "expl:Allocation size"
          (allocate_struct___anonstruct_Edge_3 
           (Unsafe_uint64.to_int 
            (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 96 22 30#
            "expl:Integer cast"
            (Unsafe_uint64_of_Unsafe_int32.cast 
             (acc  !__anonstruct_Graph_4_esize_result_13 !g_14 ) )) )
           voidP_edges_28_alloc_table voidP_edges_28_tag_table )) in
          (let _jessie_11 = !g_14 in
          (let _jessie_12 = (0) in
          (let _jessie_13 = _jessie_11 in
          (upd  __anonstruct_Graph_4_edges_result_13 _jessie_13 _jessie_10 )))));
           (if
           (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 97 8 17#
           (Bool.notb 
            ((<>)  (acc  !__anonstruct_Graph_4_edges_result_13 !g_14 )
             (null  ) ) ))
           then
            begin
            (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 98 8 25#
            (safe_free_struct___anonstruct_Vertex_2 
             (acc  !__anonstruct_Graph_4_vertices_result_13 !g_14 )
             voidP_vertices_27_alloc_table ));
             begin
             (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 99 8 15#
             (safe_free_struct___anonstruct_Graph_4  !g_14
              voidP_result_13_alloc_table ));
              begin (__retres := (null  )); (raise (Return_label_exc ())) end
             end end else ());
           try
            begin
            (i :=
             (#"graph_3_c.jc" 209 23 35# "expl:Integer cast"
             (Unsafe_int32.of_int (0))));
             'LoopEntry:
             begin
             'LoopEntry:
             'Loop_1:
             loop
             invariant
               { ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 103 23 81#
                  (forall k_8 : int.
                   ((((<=) (0) k_8) /\ ((<) k_8 (Int32.to_int !i))) ->
                    ((=)
                    (Int32.to_int
                    (select !__anonstruct_Vertex_2_existent_vertices_27
                    (shift
                    (select !__anonstruct_Graph_4_vertices_result_13 !g_14)
                    k_8))) (0)))))
                 &&
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 104 23 41#
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 104 23 41#
                 ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 104 23 29#
                  (Int32.(<=) (#"graph_3_c.jc" 217 41 53# "expl:Integer cast"
                  (Int32.of_int (0))) !i))
                 /\
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 104 28 41#
                 (Int32.(<=) !i
                 (select !__anonstruct_Graph_4_vsize_result_13 !g_14))))))) } 
               
              begin
              any unit requires { true } ensures { true } ;
               try
                begin
                'LoopCurrent:
                begin
                'LoopCurrent:
                (if
                (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 107 20 32#
                (Unsafe_int32.(<)  !i
                 (acc  !__anonstruct_Graph_4_vsize_result_13 !g_14 ) ))
                then () else (raise (Goto_while_0_break_exc ())));
                 begin
                 (let _jessie_16 =
                 (#"graph_3_c.jc" 224 83 95# "expl:Integer cast"
                 (Unsafe_int32.of_int (0))) in
                 (let _jessie_17 =
                 (acc  !__anonstruct_Graph_4_vertices_result_13 !g_14 ) in
                 (let _jessie_18 = (Unsafe_int32.to_int  !i ) in
                 (let _jessie_19 = (shift_  _jessie_17 _jessie_18 ) in
                 (upd  __anonstruct_Vertex_2_existent_vertices_27 _jessie_19
                  _jessie_16 )))));
                  (i :=
                   (Unsafe_int32.(+)  !i
                    (#"graph_3_c.jc" 225 53 65# "expl:Integer cast"
                    (Unsafe_int32.of_int (1))) )) end end;
                 (raise (Loop_continue_exc ())) end with Loop_continue_exc
                _jessie_5 -> () end end end;
              (raise (Goto_while_0_break_exc ())) end end with
            Goto_while_0_break_exc _jessie_1 ->
            'While_0_break: 'While_0_break: () end;
           try
            begin
            (i_0 :=
             (#"graph_3_c.jc" 231 25 37# "expl:Integer cast"
             (Unsafe_int32.of_int (0))));
             'LoopEntry:
             begin
             'LoopEntry:
             'Loop_2:
             loop
             invariant
               { ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 111 23 78#
                  (forall k_9 : int.
                   ((((<=) (0) k_9) /\ ((<) k_9 (Int32.to_int !i_0))) ->
                    ((=)
                    (Int32.to_int
                    (select !__anonstruct_Edge_3_existent_0_edges_28
                    (shift
                    (select !__anonstruct_Graph_4_edges_result_13 !g_14) k_9)))
                    (0)))))
                 &&
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 112 23 41#
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 112 23 41#
                 ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 112 23 29#
                  (Int32.(<=) (#"graph_3_c.jc" 239 41 53# "expl:Integer cast"
                  (Int32.of_int (0))) !i_0))
                 /\
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 112 28 41#
                 (Int32.(<=) !i_0
                 (select !__anonstruct_Graph_4_esize_result_13 !g_14))))))) } 
               
              begin
              any unit requires { true } ensures { true } ;
               try
                begin
                'LoopCurrent:
                begin
                'LoopCurrent:
                (if
                (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 115 20 32#
                (Unsafe_int32.(<)  !i_0
                 (acc  !__anonstruct_Graph_4_esize_result_13 !g_14 ) ))
                then () else (raise (Goto_while_0_break_0_exc ())));
                 begin
                 (let _jessie_23 =
                 (#"graph_3_c.jc" 246 84 96# "expl:Integer cast"
                 (Unsafe_int32.of_int (0))) in
                 (let _jessie_24 =
                 (acc  !__anonstruct_Graph_4_edges_result_13 !g_14 ) in
                 (let _jessie_25 = (Unsafe_int32.to_int  !i_0 ) in
                 (let _jessie_26 = (shift_  _jessie_24 _jessie_25 ) in
                 (upd  __anonstruct_Edge_3_existent_0_edges_28 _jessie_26
                  _jessie_23 )))));
                  (i_0 :=
                   (Unsafe_int32.(+)  !i_0
                    (#"graph_3_c.jc" 247 57 69# "expl:Integer cast"
                    (Unsafe_int32.of_int (1))) )) end end;
                 (raise (Loop_continue_exc ())) end with Loop_continue_exc
                _jessie_7 -> () end end end;
              (raise (Goto_while_0_break_0_exc ())) end end with
            Goto_while_0_break_0_exc _jessie_2 ->
            'While_0_break_0: 'While_0_break_0: () end;
           begin (__retres := !g_14); (raise (Return_label_exc ())) end end
         end end end end end with Return_label_exc _jessie_3 ->
     'Return_label:
     'Return_label: begin (return := !__retres); (raise Return) end end)))));
     absurd  end with Return -> !return end)
  
end

module Function_graph_destroy_safety
#"/home/student/mfsp/examples/constr_destr/graph_3.c" 131 5 32#
"expl:graph_destroy, safety"

  use import core.Voidp 
  
  use import Struct___anonstruct_Vertex_2_unsafe 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Struct___anonstruct_Graph_4_unsafe 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Struct___anonstruct_Edge_3_unsafe 
  
  use import Struct___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use why3.Bool.Bool 
  
  let graph_destroy
  #"/home/student/mfsp/examples/constr_destr/graph_3.c" 131 5 32#
  "expl:Function graph_destroy, safety" =
  fun
   (graph : (pointer voidP)) (voidP_graph_14_alloc_table : ref (alloc_table
   voidP)) (voidP_vertices_43_alloc_table : ref (alloc_table voidP))
   (voidP_edges_44_alloc_table : ref (alloc_table voidP))
   (__anonstruct_Vertex_2_existent_vertices_43 : (memory voidP Int32.t))
   (__anonstruct_Edge_3_from_edges_44 : (memory voidP Int32.t))
   (__anonstruct_Edge_3_to_edges_44 : (memory voidP Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_44 : (memory voidP Int32.t))
   (__anonstruct_Graph_4_vertices_graph_14 : (memory voidP (pointer voidP)))
   (__anonstruct_Graph_4_vsize_graph_14 : (memory voidP Int32.t))
   (__anonstruct_Graph_4_edges_graph_14 : (memory voidP (pointer voidP)))
   (__anonstruct_Graph_4_ecnt_graph_14 : (memory voidP Int32.t))
   (__anonstruct_Graph_4_esize_graph_14 : (memory voidP Int32.t)) 
   requires {
   (#"graph_3_c.jc" 259 12 422#
   ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 122 13 25#
    (valid_0 graph !voidP_edges_44_alloc_table !voidP_vertices_43_alloc_table
    __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
    __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
    __anonstruct_Graph_4_vertices_graph_14
    __anonstruct_Edge_3_existent_0_edges_44 __anonstruct_Edge_3_to_edges_44
    __anonstruct_Edge_3_from_edges_44
    __anonstruct_Vertex_2_existent_vertices_43))
   /\
   (#"graph_3_c.jc" 259 12 422#
   ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 123 13 26#
    (#"graph_3_c.jc" 259 12 422#
    ((#"graph_3_c.jc" 259 12 422#
     ((<=) (offset_min !voidP_graph_14_alloc_table graph) (0)))
    /\
    (#"graph_3_c.jc" 259 12 422#
    ((#"graph_3_c.jc" 259 12 422#
     ((>=) (offset_max !voidP_graph_14_alloc_table graph) (0)))
    /\ (#"graph_3_c.jc" 259 12 422# ((=) true true)))))))
   /\
   (#"graph_3_c.jc" 259 12 422#
   ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 124 13 29#
    (#"graph_3_c.jc" 259 12 422#
    ((#"graph_3_c.jc" 259 12 422#
     (strict_left_valid_struct___anonstruct_Graph_4 graph (0)
     !voidP_graph_14_alloc_table))
    /\
    (#"graph_3_c.jc" 259 12 422#
    (right_valid_struct___anonstruct_Graph_4 graph (Int.(-_) 1)
    !voidP_graph_14_alloc_table)))))
   /\
   (#"graph_3_c.jc" 259 12 422#
   ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 125 13 39#
    (#"graph_3_c.jc" 259 12 422#
    ((#"graph_3_c.jc" 259 12 422#
     (strict_left_valid_struct___anonstruct_Vertex_2
     (select __anonstruct_Graph_4_vertices_graph_14 graph) (0)
     !voidP_vertices_43_alloc_table))
    /\
    (#"graph_3_c.jc" 259 12 422#
    (right_valid_struct___anonstruct_Vertex_2
    (select __anonstruct_Graph_4_vertices_graph_14 graph) (Int.(-_) 1)
    !voidP_vertices_43_alloc_table)))))
   /\
   (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 126 13 36#
   (#"graph_3_c.jc" 259 12 422#
   ((#"graph_3_c.jc" 259 12 422#
    (strict_left_valid_struct___anonstruct_Edge_3
    (select __anonstruct_Graph_4_edges_graph_14 graph) (0)
    !voidP_edges_44_alloc_table))
   /\
   (#"graph_3_c.jc" 259 12 422#
   (right_valid_struct___anonstruct_Edge_3
   (select __anonstruct_Graph_4_edges_graph_14 graph) (Int.(-_) 1)
   !voidP_edges_44_alloc_table))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 133 4 22#
    (free_struct___anonstruct_Edge_3 
     (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 133 9 21#
     "expl:Pointer dereference"
     (acc  !voidP_graph_14_alloc_table __anonstruct_Graph_4_edges_graph_14
      graph )) voidP_edges_44_alloc_table ));
     begin
     (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 134 4 25#
     (free_struct___anonstruct_Vertex_2 
      (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 134 9 24#
      "expl:Pointer dereference"
      (acc  !voidP_graph_14_alloc_table
       __anonstruct_Graph_4_vertices_graph_14 graph ))
      voidP_vertices_43_alloc_table ));
      begin
      (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 135 4 15#
      (free_struct___anonstruct_Graph_4  graph voidP_graph_14_alloc_table ));
       (raise Return) end end; (raise Return) end with Return -> () end
  
end

module Function_graph_destroy_behaviors
#"/home/student/mfsp/examples/constr_destr/graph_3.c" 131 5 32#
"expl:graph_destroy, behaviors"

  use import core.Voidp 
  
  use import Struct___anonstruct_Vertex_2_safe 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Struct___anonstruct_Graph_4_safe 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Struct___anonstruct_Edge_3_safe 
  
  use import Struct___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let graph_destroy_ensures_default
  #"/home/student/mfsp/examples/constr_destr/graph_3.c" 131 5 32#
  "expl:Function graph_destroy, default behavior" =
  fun
   (graph : (pointer voidP)) (voidP_graph_14_alloc_table : ref (alloc_table
   voidP)) (voidP_vertices_43_alloc_table : ref (alloc_table voidP))
   (voidP_edges_44_alloc_table : ref (alloc_table voidP))
   (__anonstruct_Vertex_2_existent_vertices_43 : (memory voidP Int32.t))
   (__anonstruct_Edge_3_from_edges_44 : (memory voidP Int32.t))
   (__anonstruct_Edge_3_to_edges_44 : (memory voidP Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_44 : (memory voidP Int32.t))
   (__anonstruct_Graph_4_vertices_graph_14 : (memory voidP (pointer voidP)))
   (__anonstruct_Graph_4_vsize_graph_14 : (memory voidP Int32.t))
   (__anonstruct_Graph_4_edges_graph_14 : (memory voidP (pointer voidP)))
   (__anonstruct_Graph_4_ecnt_graph_14 : (memory voidP Int32.t))
   (__anonstruct_Graph_4_esize_graph_14 : (memory voidP Int32.t)) 
   requires {
   (#"graph_3_c.jc" 259 12 422#
   ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 122 13 25#
    (valid_0 graph !voidP_edges_44_alloc_table !voidP_vertices_43_alloc_table
    __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
    __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
    __anonstruct_Graph_4_vertices_graph_14
    __anonstruct_Edge_3_existent_0_edges_44 __anonstruct_Edge_3_to_edges_44
    __anonstruct_Edge_3_from_edges_44
    __anonstruct_Vertex_2_existent_vertices_43))
   /\
   (#"graph_3_c.jc" 259 12 422#
   ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 123 13 26#
    (#"graph_3_c.jc" 259 12 422#
    ((#"graph_3_c.jc" 259 12 422#
     ((<=) (offset_min !voidP_graph_14_alloc_table graph) (0)))
    /\
    (#"graph_3_c.jc" 259 12 422#
    ((#"graph_3_c.jc" 259 12 422#
     ((>=) (offset_max !voidP_graph_14_alloc_table graph) (0)))
    /\ (#"graph_3_c.jc" 259 12 422# ((=) true true)))))))
   /\
   (#"graph_3_c.jc" 259 12 422#
   ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 124 13 29#
    (#"graph_3_c.jc" 259 12 422#
    ((#"graph_3_c.jc" 259 12 422#
     (strict_left_valid_struct___anonstruct_Graph_4 graph (0)
     !voidP_graph_14_alloc_table))
    /\
    (#"graph_3_c.jc" 259 12 422#
    (right_valid_struct___anonstruct_Graph_4 graph (Int.(-_) 1)
    !voidP_graph_14_alloc_table)))))
   /\
   (#"graph_3_c.jc" 259 12 422#
   ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 125 13 39#
    (#"graph_3_c.jc" 259 12 422#
    ((#"graph_3_c.jc" 259 12 422#
     (strict_left_valid_struct___anonstruct_Vertex_2
     (select __anonstruct_Graph_4_vertices_graph_14 graph) (0)
     !voidP_vertices_43_alloc_table))
    /\
    (#"graph_3_c.jc" 259 12 422#
    (right_valid_struct___anonstruct_Vertex_2
    (select __anonstruct_Graph_4_vertices_graph_14 graph) (Int.(-_) 1)
    !voidP_vertices_43_alloc_table)))))
   /\
   (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 126 13 36#
   (#"graph_3_c.jc" 259 12 422#
   ((#"graph_3_c.jc" 259 12 422#
    (strict_left_valid_struct___anonstruct_Edge_3
    (select __anonstruct_Graph_4_edges_graph_14 graph) (0)
    !voidP_edges_44_alloc_table))
   /\
   (#"graph_3_c.jc" 259 12 422#
   (right_valid_struct___anonstruct_Edge_3
   (select __anonstruct_Graph_4_edges_graph_14 graph) (Int.(-_) 1)
   !voidP_edges_44_alloc_table))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 127 12 29#
     "expl:Ensures clause"
     (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 127 12 29#
     "expl:Ensures clause"
     ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 127 12 29#
      "expl:Ensures clause"
      (fresh_alloc_struct___anonstruct_Graph_4 graph (0)
      !voidP_graph_14_alloc_table))
     /\
     (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 127 12 29#
     "expl:Ensures clause"
     ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 128 12 49#
      "expl:Ensures clause"
      (fresh_alloc_struct___anonstruct_Vertex_2
      (select __anonstruct_Graph_4_vertices_graph_14 graph) (0)
      !voidP_vertices_43_alloc_table))
     /\
     (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 129 12 46#
     "expl:Ensures clause"
     (fresh_alloc_struct___anonstruct_Edge_3
     (select __anonstruct_Graph_4_edges_graph_14 graph) (0)
     !voidP_edges_44_alloc_table)))))))) }  ->
   'Init:
   try
    begin
    (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 133 4 22#
    (safe_free_struct___anonstruct_Edge_3 
     (acc  __anonstruct_Graph_4_edges_graph_14 graph )
     voidP_edges_44_alloc_table ));
     begin
     (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 134 4 25#
     (safe_free_struct___anonstruct_Vertex_2 
      (acc  __anonstruct_Graph_4_vertices_graph_14 graph )
      voidP_vertices_43_alloc_table ));
      begin
      (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 135 4 15#
      (safe_free_struct___anonstruct_Graph_4  graph
       voidP_graph_14_alloc_table )); (raise Return) end end; (raise Return)
    end with Return -> () end
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct_charP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

theory Logic_range_existent

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate range_existent (g_6 : (pointer voidP)) (m_0 : int) (n_3 : int)
  (__anonstruct_Graph_4_edges_g_6_9_at_L : (memory voidP (pointer voidP)))
  (__anonstruct_Edge_3_existent_0_edges_20_at_L : (memory voidP Int32.t))
  =
     (forall k_6 : int.
      ((((<=) m_0 k_6) /\ ((<) k_6 n_3)) ->
       (not
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_20_at_L
       (shift (select __anonstruct_Graph_4_edges_g_6_9_at_L g_6) k_6))) (0)))))
  
  
end

theory Logic_full

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_range_existent 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate full (g_5 : (pointer voidP))
  (__anonstruct_Graph_4_esize_g_5_8_at_L : (memory voidP Int32.t))
  (__anonstruct_Graph_4_edges_g_5_8_at_L : (memory voidP (pointer voidP)))
  (__anonstruct_Edge_3_existent_0_edges_65_at_L : (memory voidP Int32.t))
  =
     (range_existent g_5 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_5_8_at_L g_5))
     __anonstruct_Graph_4_edges_g_5_8_at_L
     __anonstruct_Edge_3_existent_0_edges_65_at_L)
  
  
end

module Function_graph_create

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Struct___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val graph_create
  (voidP_edges_28_alloc_table : ref (alloc_table voidP)) 
   (voidP_vertices_27_alloc_table : ref (alloc_table voidP)) 
    (voidP_result_13_alloc_table : ref (alloc_table voidP)) 
     (voidP_edges_28_tag_table : ref (tag_table voidP)) 
      (voidP_vertices_27_tag_table : ref (tag_table voidP)) 
       (voidP_result_13_tag_table : ref (tag_table voidP)) 
        (__anonstruct_Graph_4_esize_result_13 : ref (memory voidP Int32.t)) 
         (__anonstruct_Graph_4_ecnt_result_13 : ref (memory voidP Int32.t)) 
          (__anonstruct_Graph_4_edges_result_13 : ref (memory voidP (pointer
           voidP))) 
           (__anonstruct_Graph_4_vsize_result_13 : ref (memory voidP
            Int32.t)) 
            (__anonstruct_Graph_4_vertices_result_13 : ref (memory voidP
             (pointer voidP))) 
             (__anonstruct_Edge_3_existent_0_edges_28 : ref (memory voidP
              Int32.t)) 
              (__anonstruct_Vertex_2_existent_vertices_27 : ref (memory voidP
               Int32.t)) 
               (__anonstruct_Edge_3_to_edges_28 : (memory voidP Int32.t)) 
                (__anonstruct_Edge_3_from_edges_28 : (memory voidP
                 Int32.t)) : (pointer voidP)
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_28,
                 __anonstruct_Graph_4_ecnt_result_13,
                 __anonstruct_Graph_4_edges_result_13,
                 __anonstruct_Graph_4_esize_result_13,
                 __anonstruct_Graph_4_vertices_result_13,
                 __anonstruct_Graph_4_vsize_result_13,
                 __anonstruct_Vertex_2_existent_vertices_27,
                 voidP_edges_28_alloc_table, voidP_edges_28_tag_table,
                 voidP_result_13_alloc_table, voidP_vertices_27_alloc_table,
                 voidP_vertices_27_tag_table } writes {
                 __anonstruct_Edge_3_existent_0_edges_28,
                 __anonstruct_Graph_4_ecnt_result_13,
                 __anonstruct_Graph_4_edges_result_13,
                 __anonstruct_Graph_4_esize_result_13,
                 __anonstruct_Graph_4_vertices_result_13,
                 __anonstruct_Graph_4_vsize_result_13,
                 __anonstruct_Vertex_2_existent_vertices_27,
                 voidP_edges_28_alloc_table, voidP_edges_28_tag_table,
                 voidP_result_13_alloc_table, voidP_result_13_tag_table,
                 voidP_vertices_27_alloc_table, voidP_vertices_27_tag_table }
                 ensures {
                   (((allocated !voidP_result_13_alloc_table result) ->
                     (((=) (typeof !voidP_result_13_tag_table result)
                      __anonstruct_Graph_4_tag)
                     /\
                     (forall i : int.
                      ((((<=)
                        (offset_min !voidP_result_13_alloc_table result) i)
                       /\
                       ((<) i
                       (offset_max !voidP_result_13_alloc_table result))) ->
                       ((=)
                       (typeof !voidP_result_13_tag_table (shift result i))
                       __anonstruct_Graph_4_tag)))))
                   /\
                   (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 74 12 215#
                   "expl:Ensures clause"
                   ((not ((=) result null)) ->
                    ((valid_0 result !voidP_edges_28_alloc_table
                     !voidP_vertices_27_alloc_table
                     !__anonstruct_Graph_4_esize_result_13
                     !__anonstruct_Graph_4_ecnt_result_13
                     !__anonstruct_Graph_4_edges_result_13
                     !__anonstruct_Graph_4_vsize_result_13
                     !__anonstruct_Graph_4_vertices_result_13
                     !__anonstruct_Edge_3_existent_0_edges_28
                     __anonstruct_Edge_3_to_edges_28
                     __anonstruct_Edge_3_from_edges_28
                     !__anonstruct_Vertex_2_existent_vertices_27)
                    /\
                    ((((<=) (offset_min !voidP_result_13_alloc_table result)
                      (0))
                     /\
                     (((>=) (offset_max !voidP_result_13_alloc_table result)
                      (0))
                     /\ ((=) true true)))
                    /\
                    (((strict_left_valid_struct___anonstruct_Graph_4 result
                      (0) !voidP_result_13_alloc_table)
                     /\
                     (right_valid_struct___anonstruct_Graph_4 result
                     (Int.(-_) 1) !voidP_result_13_alloc_table))
                    /\
                    (((strict_left_valid_struct___anonstruct_Vertex_2
                      (select !__anonstruct_Graph_4_vertices_result_13
                      result) (0) !voidP_vertices_27_alloc_table)
                     /\
                     (right_valid_struct___anonstruct_Vertex_2
                     (select !__anonstruct_Graph_4_vertices_result_13 result)
                     (Int.(-_) 1) !voidP_vertices_27_alloc_table))
                    /\
                    (((strict_left_valid_struct___anonstruct_Edge_3
                      (select !__anonstruct_Graph_4_edges_result_13 result)
                      (0) !voidP_edges_28_alloc_table)
                     /\
                     (right_valid_struct___anonstruct_Edge_3
                     (select !__anonstruct_Graph_4_edges_result_13 result)
                     (Int.(-_) 1) !voidP_edges_28_alloc_table))
                    /\
                    (Int32.(=)
                    (select !__anonstruct_Graph_4_ecnt_result_13 result)
                    (#"graph_3_c.jc" 166 40 52# "expl:Integer cast"
                    (Int32.of_int (0)))))))))))) }
  
end

module Function_graph_create_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Struct___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val graph_create
  (voidP_edges_28_alloc_table : ref (alloc_table voidP)) 
   (voidP_vertices_27_alloc_table : ref (alloc_table voidP)) 
    (voidP_result_13_alloc_table : ref (alloc_table voidP)) 
     (voidP_edges_28_tag_table : ref (tag_table voidP)) 
      (voidP_vertices_27_tag_table : ref (tag_table voidP)) 
       (voidP_result_13_tag_table : ref (tag_table voidP)) 
        (__anonstruct_Graph_4_esize_result_13 : ref (memory voidP Int32.t)) 
         (__anonstruct_Graph_4_ecnt_result_13 : ref (memory voidP Int32.t)) 
          (__anonstruct_Graph_4_edges_result_13 : ref (memory voidP (pointer
           voidP))) 
           (__anonstruct_Graph_4_vsize_result_13 : ref (memory voidP
            Int32.t)) 
            (__anonstruct_Graph_4_vertices_result_13 : ref (memory voidP
             (pointer voidP))) 
             (__anonstruct_Edge_3_existent_0_edges_28 : ref (memory voidP
              Int32.t)) 
              (__anonstruct_Vertex_2_existent_vertices_27 : ref (memory voidP
               Int32.t)) 
               (__anonstruct_Edge_3_to_edges_28 : (memory voidP Int32.t)) 
                (__anonstruct_Edge_3_from_edges_28 : (memory voidP
                 Int32.t)) : (pointer voidP)
                 requires { (true) } reads {
                 __anonstruct_Edge_3_existent_0_edges_28,
                 __anonstruct_Graph_4_ecnt_result_13,
                 __anonstruct_Graph_4_edges_result_13,
                 __anonstruct_Graph_4_esize_result_13,
                 __anonstruct_Graph_4_vertices_result_13,
                 __anonstruct_Graph_4_vsize_result_13,
                 __anonstruct_Vertex_2_existent_vertices_27,
                 voidP_edges_28_alloc_table, voidP_edges_28_tag_table,
                 voidP_result_13_alloc_table, voidP_vertices_27_alloc_table,
                 voidP_vertices_27_tag_table } writes {
                 __anonstruct_Edge_3_existent_0_edges_28,
                 __anonstruct_Graph_4_ecnt_result_13,
                 __anonstruct_Graph_4_edges_result_13,
                 __anonstruct_Graph_4_esize_result_13,
                 __anonstruct_Graph_4_vertices_result_13,
                 __anonstruct_Graph_4_vsize_result_13,
                 __anonstruct_Vertex_2_existent_vertices_27,
                 voidP_edges_28_alloc_table, voidP_edges_28_tag_table,
                 voidP_result_13_alloc_table, voidP_result_13_tag_table,
                 voidP_vertices_27_alloc_table, voidP_vertices_27_tag_table }
                 ensures {
                   (((allocated !voidP_result_13_alloc_table result) ->
                     (((=) (typeof !voidP_result_13_tag_table result)
                      __anonstruct_Graph_4_tag)
                     /\
                     (forall i : int.
                      ((((<=)
                        (offset_min !voidP_result_13_alloc_table result) i)
                       /\
                       ((<) i
                       (offset_max !voidP_result_13_alloc_table result))) ->
                       ((=)
                       (typeof !voidP_result_13_tag_table (shift result i))
                       __anonstruct_Graph_4_tag)))))
                   /\
                   (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 74 12 215#
                   "expl:Ensures clause"
                   ((not ((=) result null)) ->
                    ((valid_0 result !voidP_edges_28_alloc_table
                     !voidP_vertices_27_alloc_table
                     !__anonstruct_Graph_4_esize_result_13
                     !__anonstruct_Graph_4_ecnt_result_13
                     !__anonstruct_Graph_4_edges_result_13
                     !__anonstruct_Graph_4_vsize_result_13
                     !__anonstruct_Graph_4_vertices_result_13
                     !__anonstruct_Edge_3_existent_0_edges_28
                     __anonstruct_Edge_3_to_edges_28
                     __anonstruct_Edge_3_from_edges_28
                     !__anonstruct_Vertex_2_existent_vertices_27)
                    /\
                    ((((<=) (offset_min !voidP_result_13_alloc_table result)
                      (0))
                     /\
                     (((>=) (offset_max !voidP_result_13_alloc_table result)
                      (0))
                     /\ ((=) true true)))
                    /\
                    (((strict_left_valid_struct___anonstruct_Graph_4 result
                      (0) !voidP_result_13_alloc_table)
                     /\
                     (right_valid_struct___anonstruct_Graph_4 result
                     (Int.(-_) 1) !voidP_result_13_alloc_table))
                    /\
                    (((strict_left_valid_struct___anonstruct_Vertex_2
                      (select !__anonstruct_Graph_4_vertices_result_13
                      result) (0) !voidP_vertices_27_alloc_table)
                     /\
                     (right_valid_struct___anonstruct_Vertex_2
                     (select !__anonstruct_Graph_4_vertices_result_13 result)
                     (Int.(-_) 1) !voidP_vertices_27_alloc_table))
                    /\
                    (((strict_left_valid_struct___anonstruct_Edge_3
                      (select !__anonstruct_Graph_4_edges_result_13 result)
                      (0) !voidP_edges_28_alloc_table)
                     /\
                     (right_valid_struct___anonstruct_Edge_3
                     (select !__anonstruct_Graph_4_edges_result_13 result)
                     (Int.(-_) 1) !voidP_edges_28_alloc_table))
                    /\
                    (Int32.(=)
                    (select !__anonstruct_Graph_4_ecnt_result_13 result)
                    (#"graph_3_c.jc" 166 40 52# "expl:Integer cast"
                    (Int32.of_int (0)))))))))))) }
  
end

module Function_graph_destroy

  use import core.Voidp 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Struct___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val graph_destroy
  (graph : (pointer voidP)) 
   (voidP_edges_44_alloc_table : ref (alloc_table voidP)) 
    (voidP_vertices_43_alloc_table : ref (alloc_table voidP)) 
     (voidP_graph_14_alloc_table : ref (alloc_table voidP)) 
      (__anonstruct_Graph_4_esize_graph_14 : (memory voidP Int32.t)) 
       (__anonstruct_Graph_4_ecnt_graph_14 : (memory voidP Int32.t)) 
        (__anonstruct_Graph_4_edges_graph_14 : (memory voidP (pointer
         voidP))) 
         (__anonstruct_Graph_4_vsize_graph_14 : (memory voidP Int32.t)) 
          (__anonstruct_Graph_4_vertices_graph_14 : (memory voidP (pointer
           voidP))) 
           (__anonstruct_Edge_3_existent_0_edges_44 : (memory voidP
            Int32.t)) 
            (__anonstruct_Edge_3_to_edges_44 : (memory voidP Int32.t)) 
             (__anonstruct_Edge_3_from_edges_44 : (memory voidP Int32.t)) 
              (__anonstruct_Vertex_2_existent_vertices_43 : (memory voidP
               Int32.t)) : unit
               requires { true } reads { voidP_edges_44_alloc_table,
               voidP_graph_14_alloc_table, voidP_vertices_43_alloc_table }
               writes { voidP_edges_44_alloc_table,
               voidP_graph_14_alloc_table, voidP_vertices_43_alloc_table }
               ensures {
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 127 12 29#
                 "expl:Ensures clause"
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 127 12 29#
                 "expl:Ensures clause"
                 ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 127 12 29#
                  "expl:Ensures clause"
                  (fresh_alloc_struct___anonstruct_Graph_4 graph (0)
                  !voidP_graph_14_alloc_table))
                 /\
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 127 12 29#
                 "expl:Ensures clause"
                 ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 128 12 49#
                  "expl:Ensures clause"
                  (fresh_alloc_struct___anonstruct_Vertex_2
                  (select __anonstruct_Graph_4_vertices_graph_14 graph) (0)
                  !voidP_vertices_43_alloc_table))
                 /\
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 129 12 46#
                 "expl:Ensures clause"
                 (fresh_alloc_struct___anonstruct_Edge_3
                 (select __anonstruct_Graph_4_edges_graph_14 graph) (0)
                 !voidP_edges_44_alloc_table))))))) }
  
end

module Function_graph_destroy_safe

  use import core.Voidp 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Struct___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val graph_destroy
  (graph : (pointer voidP)) 
   (voidP_edges_44_alloc_table : ref (alloc_table voidP)) 
    (voidP_vertices_43_alloc_table : ref (alloc_table voidP)) 
     (voidP_graph_14_alloc_table : ref (alloc_table voidP)) 
      (__anonstruct_Graph_4_esize_graph_14 : (memory voidP Int32.t)) 
       (__anonstruct_Graph_4_ecnt_graph_14 : (memory voidP Int32.t)) 
        (__anonstruct_Graph_4_edges_graph_14 : (memory voidP (pointer
         voidP))) 
         (__anonstruct_Graph_4_vsize_graph_14 : (memory voidP Int32.t)) 
          (__anonstruct_Graph_4_vertices_graph_14 : (memory voidP (pointer
           voidP))) 
           (__anonstruct_Edge_3_existent_0_edges_44 : (memory voidP
            Int32.t)) 
            (__anonstruct_Edge_3_to_edges_44 : (memory voidP Int32.t)) 
             (__anonstruct_Edge_3_from_edges_44 : (memory voidP Int32.t)) 
              (__anonstruct_Vertex_2_existent_vertices_43 : (memory voidP
               Int32.t)) : unit
               requires {
                 ("expl:Internal"
                 (#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                 ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 122 13 25#
                  "expl:Requires clause"
                  (valid_0 graph !voidP_edges_44_alloc_table
                  !voidP_vertices_43_alloc_table
                  __anonstruct_Graph_4_esize_graph_14
                  __anonstruct_Graph_4_ecnt_graph_14
                  __anonstruct_Graph_4_edges_graph_14
                  __anonstruct_Graph_4_vsize_graph_14
                  __anonstruct_Graph_4_vertices_graph_14
                  __anonstruct_Edge_3_existent_0_edges_44
                  __anonstruct_Edge_3_to_edges_44
                  __anonstruct_Edge_3_from_edges_44
                  __anonstruct_Vertex_2_existent_vertices_43))
                 /\
                 (#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                 ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 123 13 26#
                  "expl:Requires clause"
                  (#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                  ((#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                   ((<=) (offset_min !voidP_graph_14_alloc_table graph) (0)))
                  /\
                  (#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                  ((#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                   ((>=) (offset_max !voidP_graph_14_alloc_table graph) (0)))
                  /\
                  (#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                  ((=) true true)))))))
                 /\
                 (#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                 ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 124 13 29#
                  "expl:Requires clause"
                  (#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                  ((#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                   (strict_left_valid_struct___anonstruct_Graph_4 graph (0)
                   !voidP_graph_14_alloc_table))
                  /\
                  (#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                  (right_valid_struct___anonstruct_Graph_4 graph (Int.(-_) 1)
                  !voidP_graph_14_alloc_table)))))
                 /\
                 (#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                 ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 125 13 39#
                  "expl:Requires clause"
                  (#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                  ((#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                   (strict_left_valid_struct___anonstruct_Vertex_2
                   (select __anonstruct_Graph_4_vertices_graph_14 graph) (0)
                   !voidP_vertices_43_alloc_table))
                  /\
                  (#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                  (right_valid_struct___anonstruct_Vertex_2
                  (select __anonstruct_Graph_4_vertices_graph_14 graph)
                  (Int.(-_) 1) !voidP_vertices_43_alloc_table)))))
                 /\
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 126 13 36#
                 "expl:Requires clause"
                 (#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                 ((#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                  (strict_left_valid_struct___anonstruct_Edge_3
                  (select __anonstruct_Graph_4_edges_graph_14 graph) (0)
                  !voidP_edges_44_alloc_table))
                 /\
                 (#"graph_3_c.jc" 259 12 422# "expl:Requires clause"
                 (right_valid_struct___anonstruct_Edge_3
                 (select __anonstruct_Graph_4_edges_graph_14 graph)
                 (Int.(-_) 1) !voidP_edges_44_alloc_table)))))))))))))) }
               reads { voidP_edges_44_alloc_table,
               voidP_graph_14_alloc_table, voidP_vertices_43_alloc_table }
               writes { voidP_edges_44_alloc_table,
               voidP_graph_14_alloc_table, voidP_vertices_43_alloc_table }
               ensures {
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 127 12 29#
                 "expl:Ensures clause"
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 127 12 29#
                 "expl:Ensures clause"
                 ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 127 12 29#
                  "expl:Ensures clause"
                  (fresh_alloc_struct___anonstruct_Graph_4 graph (0)
                  !voidP_graph_14_alloc_table))
                 /\
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 127 12 29#
                 "expl:Ensures clause"
                 ((#"/home/student/mfsp/examples/constr_destr/graph_3.c" 128 12 49#
                  "expl:Ensures clause"
                  (fresh_alloc_struct___anonstruct_Vertex_2
                  (select __anonstruct_Graph_4_vertices_graph_14 graph) (0)
                  !voidP_vertices_43_alloc_table))
                 /\
                 (#"/home/student/mfsp/examples/constr_destr/graph_3.c" 129 12 46#
                 "expl:Ensures clause"
                 (fresh_alloc_struct___anonstruct_Edge_3
                 (select __anonstruct_Graph_4_edges_graph_14 graph) (0)
                 !voidP_edges_44_alloc_table))))))) }
  
end
