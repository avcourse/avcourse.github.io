
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

int32 loop_0(uint32 _N)
behavior default:
  ensures (_C_13 : ((_C_14 : ((0 :> int32) <= \result)) &&
                     (_C_15 : (\result <= (1 :> int32)))));
{  
   (var int32 c);
   
   (var int32 i);
   
   {  (_C_1 : (c = (0 :> int32)));
      (_C_2 : (i = (1 :> int32)));
      
      loop 
      behavior default:
        invariant (_C_4 : ((i :> integer) <= ((_N :> integer) + 1)));
      variant (_C_3 : (((_N :> integer) + 1) - (i :> integer)));
      while (true)
      {  
         {  (if (_C_6 : ((_C_5 : (i :> uint32)) <= _N)) then () else 
            (goto while_0_break));
            (_C_9 : (c = (_C_8 : ((_C_7 : ((1 :> int32) - c)) :> int32))));
            (_C_12 : (i = (_C_11 : ((_C_10 : (i + (1 :> int32))) :> int32))))
         }
      };
      (while_0_break : ());
      
      (return c)
   }
}
