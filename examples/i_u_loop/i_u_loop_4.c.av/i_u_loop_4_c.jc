
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

int32 loop_0(uint32 _N)
behavior default:
  ensures (_C_15 : ((_C_16 : ((0 :> int32) <= \result)) &&
                     (_C_17 : (\result <= (1 :> int32)))));
{  
   (var int32 c);
   
   (var uint32 i);
   
   {  (_C_1 : (c = (0 :> int32)));
      (_C_2 : (i = (0 :> uint32)));
      
      loop 
      behavior default:
        invariant (_C_5 : ((_C_6 : ((0 :> int32) <= c)) &&
                            (_C_7 : (c <= (1 :> int32)))));
      behavior default:
        invariant (_C_4 : (i <= _N));
      variant (_C_3 : ((_N :> integer) - (i :> integer)));
      while (true)
      {  
         {  (if (_C_8 : (i < _N)) then () else 
            (goto while_0_break));
            (_C_11 : (c = (_C_10 : ((_C_9 : ((1 :> int32) - c)) :> int32))));
            (_C_14 : (i = (_C_13 : ((_C_12 : (i + (1 :> uint32))) :> uint32))))
         }
      };
      (while_0_break : ());
      
      (return c)
   }
}
