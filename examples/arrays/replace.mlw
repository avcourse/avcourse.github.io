module ReplaceInArrayTask

use import int.Int

type array 't
type arrayVar 't = { mutable items: array 't }

function len (a: array 't): int
function get (a: array 't) (i: int): 't
function set (a: array 't) (i: int) (v: 't): array 't

axiom get_set: forall a: array 't, i, j, v: 't.
    get (set a i v) j = (if i = j then v else get a j)

axiom len_set: forall a: array 't, i, v: 't.
    len (set a i v) = len a

axiom len_nonneg: forall a: array 't.
    len a >= 0

predicate valid_index (a: array 't) (i: int) =
    0 <= i < len a

val ln (a: arrayVar 't): int
    ensures { result = len a.items }

val gt (a: arrayVar 't) (i: int): 't
    requires { valid_index a.items i }
    ensures { result = get a.items i }

val st (a: arrayVar 't) (i: int) (v: 't): array 't
    requires { valid_index a.items i }
    ensures { result = set a.items i v }

type intVar = { mutable v: int }

let replace (a: arrayVar 't) (v1 v2: 't): arrayVar 't
    ensures { len a.items = len result.items }
    ensures { forall i. valid_index a.items i ->
            get result.items i = (if get a.items i = v1 then v2 else get a.items i) }
=
    let a1 = { items = a.items; } in
    let i = { v = 0; } in
        while i.v < ln a1 do
            invariant { 0 <= i.v <= len a.items }
            invariant { len a1.items = len a.items }
            invariant { forall k. 0 <= k < i.v ->
                get a1.items k = (if get a.items k = v1 then v2 else get a.items k) }
            invariant { forall k. i.v <= k < len a.items ->
                get a1.items k = get a.items k }
            variant { len a1.items - i.v }
            if gt a1 i.v = v1 then
                a1.items <- st a1 i.v v2
            else
                ();
            i.v <- i.v + 1
        done;
        a1
end

module ReplaceInArrayTask_Ref

use import int.Int

type array 't
type arrayVar 't = { mutable items: array 't }

function len (a: array 't): int
function get (a: array 't) (i: int): 't
function set (a: array 't) (i: int) (v: 't): array 't

axiom get_set: forall a: array 't, i, j, v: 't.
    get (set a i v) j = (if i = j then v else get a j)

axiom len_set: forall a: array 't, i, v: 't.
    len (set a i v) = len a

predicate valid_index (a: array 't) (i: int) =
    0 <= i < len a

val ln (a: array 't): int
    ensures { result = len a }

val gt (a: array 't) (i: int): 't
    requires { valid_index a i }
    ensures { result = get a i }

val st (a: array 't) (i: int) (v: 't): array 't
    requires { valid_index a i }
    ensures { result = set a i v }

type intVar = { mutable v: int }

let replace (a: arrayVar 't) (v1 v2: 't)
    requires { len a.items >= 0 }
    ensures { old (len a.items) = len a.items }
    ensures { forall i. valid_index a.items i ->
            get a.items i = (if get (old a.items) i = v1 then v2 else get (old a.items) i) }
=
    'Pre:
    let i = { v = 0; } in
        while i.v < ln a.items do
            invariant { 0 <= i.v <= len a.items }
            invariant { len a.items = len (at a 'Pre).items }
            invariant { forall k. 0 <= k < i.v ->
                get a.items k = (if get (at a.items 'Pre) k = v1 then v2 else get (at a.items 'Pre) k) }
            invariant { forall k. i.v <= k < len (at a.items 'Pre) ->
                get a.items k = get (at a.items 'Pre) k }
            variant { len a.items - i.v }
            if gt a.items i.v = v1 then
                a.items <- st a.items i.v v2
            else
                ();
            i.v <- i.v + 1
        done;
        a.items
end
