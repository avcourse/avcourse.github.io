(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

axiom CompatOrderMult :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

logic abs : int -> int

axiom abs_def : (forall x:int. ((x >= 0) -> (abs(x) = x)))

axiom abs_def1 : (forall x:int. ((not (x >= 0)) -> (abs(x) = (-x))))

axiom Abs_le :
  (forall x:int. forall y:int [abs(x), y]. ((abs(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 :
  (forall x:int. forall y:int [abs(x), y]. ((abs(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:int. forall y:int [abs(x), y]. ((((-y) <= x) and (x <= y)) ->
  (abs(x) <= y)))

axiom Abs_pos : (forall x:int. (abs(x) >= 0))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((x >= 0) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((x >= 0) and (0 <  y)) ->
  (comp_div(x,y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  ((-abs(y)) <  comp_mod(x,y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (comp_mod(x,y) <  abs(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((x >= 0) and (0 <  y)) ->
  (comp_div(x,y) >= 0)))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((x >= 0) and (not (y = 0))) ->
  (comp_mod(x,y) >= 0)))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((y >= 0) and (z >= 0))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((y >= 0) and (z >= 0))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mult_simplest :
  (forall x:int. forall y:int [comp_div((x * y),y)]. (((x >= 0) and
  (0 <  y)) -> (comp_div((x * y),y) = x)))

predicate in_bounds(n: int) = (((-2147483648) <= n) and (n <= 2147483647))

type t

logic to_int : t -> int

axiom To_int_in_bounds : (forall a:t [to_int(a)]. in_bounds(to_int(a)))

logic of_int : int -> t

axiom Of_int :
  (forall a:int [of_int(a)]. (in_bounds(a) -> (to_int(of_int(a)) = a)))

axiom Of_int_to_int : (forall a:t [to_int(a)]. (of_int(to_int(a)) = a))

predicate infix_lseq(a: t, b: t) = (to_int(a) <= to_int(b))

predicate infix_ls(a: t, b: t) = (to_int(a) <  to_int(b))

predicate infix_gteq(a: t, b: t) = (to_int(a) >= to_int(b))

predicate infix_gt(a: t, b: t) = (to_int(b) <  to_int(a))

axiom Select_eq :
  (forall m:('a,'b) farray.
  (forall a1:'a. forall a2:'a.
  (forall b1:'b [((m[a1 <- b1])[a2])]. ((a1 = a2) ->
  (((m[a1 <- b1])[a2]) = b1)))))

axiom Select_neq :
  (forall m:('a,'b) farray.
  (forall a1:'a. forall a2:'a.
  (forall b1:'b [((m[a1 <- b1])[a2])]. ((not (a1 = a2)) ->
  (((m[a1 <- b1])[a2]) = (m[a2]))))))

type 't1 pointer

logic null : 't1 pointer

logic sub_pointer : 't1 pointer, 't1 pointer -> int

logic shift : 't1 pointer, int -> 't1 pointer

logic same_block : 't1 pointer, 't1 pointer -> prop

axiom Sub_pointer_def :
  (forall a:'t1 pointer.
  (forall i:int. forall j:int [shift(a, i), shift(a, j)].
  (sub_pointer(shift(a, i), shift(a, j)) = (i - j))))

axiom Shift_def1 :
  (forall a:'t1 pointer.
  (forall i:int [shift(a, i)].
  (forall j:int [shift(shift(a, i), j)]. (shift(shift(a, i), j) = shift(a,
  (i + j))))))

axiom Shift_def2 : (forall a:'t1 pointer [shift(a, 0)]. (shift(a, 0) = a))

axiom Same_block_def :
  (forall a:'t1 pointer. forall b:'t1 pointer [same_block(a, b)].
  (same_block(a, b) -> (exists i:int. (a = shift(b, i)))))

axiom Same_block_def1 :
  (forall a:'t1 pointer. forall b:'t1 pointer [same_block(a, b)].
  ((exists i:int. (a = shift(b, i))) -> same_block(a, b)))

axiom Sub_pointer_shift :
  (forall p:'t1 pointer. forall q:'t1 pointer [same_block(p, q)|
  sub_pointer(p, q)]. (same_block(p, q) -> (p = shift(q, sub_pointer(p,
  q)))))

axiom Sub_pointer_self :
  (forall p:'t1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom Sub_pointer_zero :
  (forall p:'t1 pointer. forall q:'t1 pointer [sub_pointer(p, q)].
  (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q))))

axiom Sub_pointer_shift_left :
  (forall p:'t1 pointer. forall q:'t1 pointer. forall i:int
  [sub_pointer(shift(p, i), q)]. (same_block(p, q) -> (sub_pointer(shift(p,
  i), q) = (sub_pointer(p, q) + i))))

axiom Sub_pointer_shift_right :
  (forall p:'t1 pointer. forall q:'t1 pointer. forall i:int [sub_pointer(p,
  shift(q, i))]. (same_block(p, q) -> (sub_pointer(p, shift(q,
  i)) = (sub_pointer(p, q) - i))))

axiom Sub_pointer_neg :
  (forall p:'t1 pointer. forall q:'t1 pointer [sub_pointer(p, q)|
  sub_pointer(q, p)]. (same_block(p, q) -> (sub_pointer(p,
  q) = (-sub_pointer(q, p)))))

axiom Shift_shift :
  (forall p:'t1 pointer.
  (forall i:int. forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
  j) = shift(p, (i + j)))))

axiom Neq_shift :
  (forall p:'t1 pointer.
  (forall i:int.
  (forall j:int [shift(p, i), shift(p, j)]. ((not (i = j)) -> (not (shift(p,
  i) = shift(p, j)))))))

axiom Same_block_refl : (forall p:'t1 pointer. same_block(p, p))

axiom Same_block_shift :
  (forall p:'t1 pointer.
  (forall i:int [shift(p, i)]. same_block(p, shift(p, i))))

axiom Same_block_symm :
  (forall p:'t1 pointer.
  (forall q:'t1 pointer [same_block(p, q)| same_block(q, p)]. (same_block(p,
  q) -> same_block(q, p))))

axiom Same_block_symm1 :
  (forall p:'t1 pointer.
  (forall q:'t1 pointer [same_block(p, q)| same_block(q, p)]. (same_block(q,
  p) -> same_block(p, q))))

axiom Same_block_trans :
  (forall p:'t1 pointer.
  (forall q:'t1 pointer [same_block(p, q)| same_block(q, p)].
  (forall r:'t1 pointer [same_block(p, r)]. ((same_block(p, q) and
  same_block(q, r)) -> same_block(p, r)))))

axiom Same_block_shift_right :
  (forall p:'t1 pointer.
  (forall q:'t1 pointer [same_block(p, q)| same_block(q, p)].
  (forall i:int [same_block(p, shift(q, i))]. (same_block(p, q) ->
  same_block(p, shift(q, i))))))

axiom Same_block_shift_left :
  (forall p:'t1 pointer.
  (forall q:'t1 pointer [same_block(p, q)| same_block(q, p)].
  (forall i:int [same_block(shift(q, i), p)]. (same_block(q, p) ->
  same_block(shift(q, i), p)))))

type 't1 tag_id

logic int_of_tag : 't1 tag_id -> int

logic parenttag : 't1 tag_id, 't1 tag_id -> prop

logic subtag : 't1 tag_id, 't1 tag_id -> prop

axiom Subtag_refl : (forall t1:'t2 tag_id [subtag(t1, t1)]. subtag(t1, t1))

axiom Subtag_parent :
  (forall t1:'t2 tag_id.
  (forall t21:'t2 tag_id.
  (forall t3:'t2 tag_id [subtag(t1, t21)| parenttag(t21, t3)| subtag(t1,
  t3)]. (subtag(t1, t21) -> (parenttag(t21, t3) -> subtag(t1, t3))))))

axiom Subtag_antisymmetric :
  (forall t1:'t2 tag_id. forall t21:'t2 tag_id. (subtag(t1, t21) ->
  (subtag(t21, t1) -> (t1 = t21))))

logic bottom_tag : 'a tag_id

axiom Bottom_tag :
  (forall t1:'t2 tag_id [subtag(t1, (bottom_tag : 't2 tag_id))]. subtag(t1,
  (bottom_tag : 't2 tag_id)))

axiom Bottom_int : (int_of_tag((bottom_tag : 'a tag_id)) = 0)

axiom Root_subtag :
  (forall a:'t1 tag_id.
  (forall b:'t1 tag_id.
  (forall c:'t1 tag_id [subtag(c, a), parenttag(a,
  (bottom_tag : 't1 tag_id)), subtag(c, b), parenttag(b,
  (bottom_tag : 't1 tag_id))]. (parenttag(a, (bottom_tag : 't1 tag_id)) ->
  (parenttag(b, (bottom_tag : 't1 tag_id)) -> ((not (a = b)) -> (subtag(c,
  a) -> (not subtag(c, b)))))))))

predicate instanceof(t1: ('t2 pointer,'t2 tag_id) farray, p: 't2 pointer,
  s: 't2 tag_id) = subtag((t1[p]), s)

logic downcast : ('t1 pointer,'t1 tag_id) farray, 't1 pointer,
  't1 tag_id -> 't1 pointer

axiom Downcast_instanceof :
  (forall t1:('t2 pointer,'t2 tag_id) farray.
  (forall p:'t2 pointer.
  (forall s:'t2 tag_id [instanceof(t1, p, s)| downcast(t1, p, s)].
  (instanceof(t1, p, s) -> (downcast(t1, p, s) = p)))))

axiom Downcast_null :
  (forall t1:('t2 pointer,'t2 tag_id) farray.
  (forall s:'t2 tag_id [downcast(t1, (null : 't2 pointer), s)]. (downcast(t1,
  (null : 't2 pointer), s) = (null : 't2 pointer))))

type intP

type 'a ref = { contents : 'a
}

type 't1 alloc_table

logic offset_min : 't1 alloc_table, 't1 pointer -> int

logic offset_max : 't1 alloc_table, 't1 pointer -> int

axiom Null_pointer :
  (forall a:'t1 alloc_table [offset_max(a, (null : 't1 pointer))|
  offset_min(a, (null : 't1 pointer))]. (offset_max(a,
  (null : 't1 pointer)) = (-2)))

axiom Null_pointer1 :
  (forall a:'t1 alloc_table [offset_max(a, (null : 't1 pointer))|
  offset_min(a, (null : 't1 pointer))]. ((-2) <  offset_min(a,
  (null : 't1 pointer))))

axiom Null_pointer2 :
  (forall a:'t1 alloc_table [offset_max(a, (null : 't1 pointer))|
  offset_min(a, (null : 't1 pointer))]. (offset_min(a,
  (null : 't1 pointer)) = 0))

axiom Offset_max_shift :
  (forall a:'t1 alloc_table.
  (forall p:'t1 pointer.
  (forall i:int [offset_max(a, shift(p, i))| offset_max(a, p)].
  (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom Offset_min_shift :
  (forall a:'t1 alloc_table.
  (forall p:'t1 pointer.
  (forall i:int [offset_min(a, shift(p, i))| offset_min(a, p)].
  (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

predicate valid(a: 't1 alloc_table, p: 't1 pointer) = ((offset_min(a,
  p) <= 0) and (0 <= offset_max(a, p)))

predicate allocable(a: 't1 alloc_table, p: 't1 pointer) = ((offset_max(a,
  p) = (-3)) and (((-3) <  offset_min(a, p)) and (offset_min(a, p) = 0)))

predicate freeable(a: 't1 alloc_table, p: 't1 pointer) = ((offset_min(a,
  p) = 0) and (0 <= (offset_max(a, p) + 1)))

predicate allocated(a: 't1 alloc_table, p: 't1 pointer) = (offset_min(a,
  p) <= offset_max(a, p))

predicate tag_fresh(t1: ('t2 pointer,'t2 tag_id) farray, p: 't2 pointer) =
  ((t1[p]) = (bottom_tag : 't2 tag_id))

axiom Alloc_fresh_not_same_block :
  (forall p1:'t1 pointer.
  (forall p2:'t1 pointer [same_block(p1, p2)].
  (forall a:'t1 alloc_table [allocable(a, p1), freeable(a, p2)].
  ((allocable(a, p1) and freeable(a, p2)) -> (not same_block(p1, p2))))))

type 't1 pset

logic pset_empty : 't1 pset

logic pset_singleton : 't1 pointer -> 't1 pset

logic in_pset : 't1 pointer, 't1 pset -> prop

axiom In_pset_empty :
  (forall p:'t1 pointer [in_pset(p, (pset_empty : 't1 pset))].
  (not in_pset(p, (pset_empty : 't1 pset))))

axiom In_pset_singleton :
  (forall p:'t1 pointer.
  (forall q:'t1 pointer [in_pset(p, pset_singleton(q))]. (in_pset(p,
  pset_singleton(q)) -> (p = q))))

axiom In_pset_singleton1 :
  (forall p:'t1 pointer.
  (forall q:'t1 pointer [in_pset(p, pset_singleton(q))]. ((p = q) ->
  in_pset(p, pset_singleton(q)))))

predicate alloc_extends(a1: 't1 alloc_table, a2: 't1 alloc_table) =
  (forall p:'t1 pointer [valid(a1, p)| valid(a2, p)| offset_min(a1, p)|
  offset_min(a2, p)| offset_max(a1, p)| offset_max(a2, p)]. (valid(a1, p) ->
  ((offset_min(a1, p) = offset_min(a2, p)) and (offset_max(a1,
  p) = offset_max(a2, p)))))

predicate free_extends(a1: 't1 alloc_table, a2: 't1 alloc_table) =
  (forall p:'t1 pointer [valid(a1, p)| valid(a2, p)| offset_min(a1, p)|
  offset_min(a2, p)| offset_max(a1, p)| offset_max(a2, p)].
  ((not allocated(a1, p)) -> ((offset_min(a1, p) = offset_min(a2, p)) and
  (offset_max(a1, p) = offset_max(a2, p)))))

predicate alloc_block(a1: 't1 alloc_table, a2: 't1 alloc_table,
  p: 't1 pointer, n: int) =
  (forall q:'t1 pointer [offset_min(a2, q)| offset_min(a1, q)| offset_max(a1,
  q)| offset_max(a1, q)]. (((not same_block(q, p)) -> ((offset_min(a2,
  q) = offset_min(a1, q)) and (offset_max(a2, q) = offset_max(a1, q)))) and
  (same_block(q, p) -> ((offset_min(a2, q) = (0 - sub_pointer(q, p))) and
  (offset_max(a2, q) = ((n - 1) - sub_pointer(q, p)))))))

predicate free_block(a1: 't1 alloc_table, a2: 't1 alloc_table,
  p: 't1 pointer) =
  (forall q:'t1 pointer [offset_min(a2, q)| offset_min(a1, q)| offset_max(a2,
  q)| offset_max(a1, q)]. (((not same_block(q, p)) -> ((offset_min(a2,
  q) = offset_min(a1, q)) and (offset_max(a2, q) = offset_max(a1, q)))) and
  (same_block(q, p) -> ((offset_min(a2, q) = (0 - sub_pointer(q, p))) and
  (offset_max(a2, q) = ((-3) - sub_pointer(q, p)))))))

predicate switch_blocks(a1: 't1 alloc_table, a2: 't1 alloc_table,
  p: 't1 pointer, q: 't1 pointer, n: int) =
  (forall r:'t1 pointer [offset_min(a2, r)| offset_min(a1, r)| offset_max(a2,
  r)| offset_max(a1, r)]. ((((not same_block(r, p)) and (not same_block(r,
  q))) -> ((offset_min(a2, r) = offset_min(a1, r)) and (offset_max(a2,
  r) = offset_max(a1, r)))) and ((same_block(r, p) -> ((offset_min(a2,
  r) = (0 - sub_pointer(r, p))) and (offset_max(a2,
  r) = ((-3) - sub_pointer(r, p))))) and (same_block(r, q) ->
  ((offset_min(a2, r) = (0 - sub_pointer(r, q))) and (offset_max(a2,
  r) = ((n - 1) - sub_pointer(r, q))))))))

predicate alloc_blockset(a1: 't1 alloc_table, a2: 't1 alloc_table,
  q: 't1 pset) =
  (forall p:'t1 pointer [valid(a1, p)| valid(a2, p)| offset_min(a1, p)|
  offset_min(a2, p)| offset_max(a1, p)| offset_max(a2, p)].
  ((forall r:'t1 pointer. (in_pset(r, q) -> (not same_block(p, r)))) ->
  ((offset_min(a1, p) = offset_min(a2, p)) and (offset_max(a1,
  p) = offset_max(a2, p)))))

predicate tag_extends(t1: ('t2 pointer,'t2 tag_id) farray,
  t21: ('t2 pointer,'t2 tag_id) farray) =
  (forall p:'t2 pointer. ((not ((t1[p]) = (bottom_tag : 't2 tag_id))) ->
  ((t21[p]) = (t1[p]))))

predicate alloc_tag_blockset(t1: ('t2 pointer,'t2 tag_id) farray,
  t21: ('t2 pointer,'t2 tag_id) farray, q: 't2 pset) =
  (forall p:'t2 pointer [(t1[p])| (t21[p])].
  ((not ((t1[p]) = (bottom_tag : 't2 tag_id))) -> ((t21[p]) = (t1[p]))))

logic intP_tag : intP tag_id

axiom IntP_parenttag_bottom : parenttag(intP_tag, (bottom_tag : intP tag_id))

axiom IntP_is_final :
  (forall intP_tag_table:(intP pointer,intP tag_id) farray.
  (forall p:intP pointer. (instanceof(intP_tag_table, p, intP_tag) ->
  ((intP_tag_table[p]) = intP_tag))))

predicate frame_tag_struct_intP(p: intP pointer,
  old_intP_tag_table: (intP pointer,intP tag_id) farray,
  intP_tag_table: (intP pointer,intP tag_id) farray) =
  tag_extends(old_intP_tag_table, intP_tag_table)

predicate frame_free_struct_intP(p: intP pointer,
  old_intP_alloc_table: intP alloc_table,
  intP_alloc_table: intP alloc_table) = (free_extends(old_intP_alloc_table,
  intP_alloc_table) and free_block(old_intP_alloc_table, intP_alloc_table,
  p))

predicate frame_alloc_struct_intP(p: intP pointer, n: int,
  old_intP_alloc_table: intP alloc_table,
  intP_alloc_table: intP alloc_table) = (alloc_extends(old_intP_alloc_table,
  intP_alloc_table) and alloc_block(old_intP_alloc_table, intP_alloc_table,
  p, n))

predicate typeof_singleton_struct_intP(p: intP pointer,
  intP_tag_table: (intP pointer,intP tag_id) farray) =
  ((intP_tag_table[p]) = intP_tag)

predicate typeof_struct_intP(p: intP pointer, l: int, r: int,
  intP_tag_table: (intP pointer,intP tag_id) farray) =
  (((intP_tag_table[p]) = intP_tag) and
  (forall i:int. (((l <= i) and (i <  r)) -> ((intP_tag_table[shift(p,
  i)]) = intP_tag))))

predicate instanceof_struct_intP(p: intP pointer, l: int, r: int,
  intP_tag_table: (intP pointer,intP tag_id) farray) =
  (instanceof(intP_tag_table, p, intP_tag) and
  (forall i:int. (((l <= i) and (i <  r)) -> instanceof(intP_tag_table,
  shift(p, i), intP_tag))))

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate strict_left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table, p) = a)

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) = ((offset_min(intP_alloc_table,
  p) <= a) and (offset_max(intP_alloc_table, p) >= b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) = ((offset_min(intP_alloc_table,
  p) = a) and (offset_max(intP_alloc_table, p) = b))

axiom IntP_int : (int_of_tag(intP_tag) = 4)

logic count : intP pointer, int, int, int, (intP pointer,t) farray -> int

axiom Base :
  (forall intP_intM_a_2_at_L:(intP pointer,t) farray.
  (forall a_0_1:intP pointer.
  (forall i_0_0:int.
  (forall j_0_0:int.
  (forall p_0_0:int. ((i_0_0 >= j_0_0) -> (count(a_0_1, i_0_0, j_0_0, p_0_0,
  intP_intM_a_2_at_L) = 0)))))))

axiom Split :
  (forall intP_intM_a_2_at_L:(intP pointer,t) farray.
  (forall a_1:intP pointer.
  (forall i_1:int.
  (forall k_1:int.
  (forall j_1:int.
  (forall p_1:int. (((i_1 <= k_1) and (k_1 <= j_1)) -> (count(a_1, i_1, j_1,
  p_1, intP_intM_a_2_at_L) = (count(a_1, i_1, k_1, p_1,
  intP_intM_a_2_at_L) + count(a_1, k_1, j_1, p_1, intP_intM_a_2_at_L))))))))))

axiom One :
  (forall intP_intM_a_2_at_L:(intP pointer,t) farray.
  (forall a_2:intP pointer.
  (forall i_2:int.
  (forall p_2:int. ((to_int((intP_intM_a_2_at_L[shift(a_2, i_2)])) = p_2) ->
  (count(a_2, i_2, (i_2 + 1), p_2, intP_intM_a_2_at_L) = 1))))))

axiom One1 :
  (forall intP_intM_a_2_at_L:(intP pointer,t) farray.
  (forall a_2:intP pointer.
  (forall i_2:int.
  (forall p_2:int. ((not (to_int((intP_intM_a_2_at_L[shift(a_2,
  i_2)])) = p_2)) -> (count(a_2, i_2, (i_2 + 1), p_2,
  intP_intM_a_2_at_L) = 0))))))

axiom LF__Lemma__lemma_max_count_value_proof :
  (forall intP_a_3_8_alloc_table:intP alloc_table.
  (forall intP_intM_a_3_8:(intP pointer,t) farray.
  (forall a_3:intP pointer.
  (forall i_3:t.
  (forall j_2:t.
  (forall p_3:t. ((infix_lseq(i_3, j_2) and
  (((to_int(i_3) <= (to_int(j_2) - 1)) and
  ((offset_min(intP_a_3_8_alloc_table, a_3) <= to_int(i_3)) and
  (offset_max(intP_a_3_8_alloc_table, a_3) >= (to_int(j_2) - 1)))) or
  (not (to_int(i_3) <= (to_int(j_2) - 1))))) -> (0 <= count(a_3, to_int(i_3),
  to_int(j_2), to_int(p_3), intP_intM_a_3_8)))))))))

axiom LF__Lemma__lemma_max_count_value_proof1 :
  (forall intP_a_3_8_alloc_table:intP alloc_table.
  (forall intP_intM_a_3_8:(intP pointer,t) farray.
  (forall a_3:intP pointer.
  (forall i_3:t.
  (forall j_2:t.
  (forall p_3:t. ((infix_lseq(i_3, j_2) and
  (((to_int(i_3) <= (to_int(j_2) - 1)) and
  ((offset_min(intP_a_3_8_alloc_table, a_3) <= to_int(i_3)) and
  (offset_max(intP_a_3_8_alloc_table, a_3) >= (to_int(j_2) - 1)))) or
  (not (to_int(i_3) <= (to_int(j_2) - 1))))) -> (count(a_3, to_int(i_3),
  to_int(j_2), to_int(p_3),
  intP_intM_a_3_8) <= (to_int(j_2) - to_int(i_3))))))))))

goal WP_parameter_what_more_ensures_default :
  (forall a_0_0:intP pointer. forall n_9:t. forall x:t. forall y:t.
  forall intP_a_0_4_alloc_table:intP alloc_table.
  forall intP_a_0_4_tag_table:(intP pointer,intP tag_id) farray.
  forall intP_intM_a_0_4:(intP pointer,t) farray.
  (((allocated(intP_a_0_4_alloc_table, a_0_0) ->
  (((intP_a_0_4_tag_table[a_0_0]) = intP_tag) and
  (forall i:int. (((offset_min(intP_a_0_4_alloc_table, a_0_0) <= i) and
  (i <  offset_max(intP_a_0_4_alloc_table, a_0_0))) ->
  ((intP_a_0_4_tag_table[shift(a_0_0, i)]) = intP_tag))))) and (infix_gt(n_9,
  of_int(0)) and ((0 <= (to_int(n_9) - 1)) ->
  ((offset_min(intP_a_0_4_alloc_table, a_0_0) <= 0) and
  (offset_max(intP_a_0_4_alloc_table, a_0_0) >= (to_int(n_9) - 1)))))) ->
  ((not (x = y)) ->
  (forall o:t. ((to_int(o) = 0) ->
  (forall c_x:t. ((c_x = o) ->
  (forall o1:t. ((to_int(o1) = 0) ->
  (forall c_y:t. ((c_y = o1) ->
  (forall o2:t. ((to_int(o2) = 0) ->
  (forall i_0_1:t. ((i_0_1 = o2) ->
  (forall i_0_11:t. forall c_y1:t. forall c_x1:t. ((((of_int(0) = i_0_11) or
  infix_ls(of_int(0), i_0_11)) and ((infix_ls(i_0_11, n_9) or
  (i_0_11 = n_9)) and ((to_int(c_x1) = count(a_0_0, 0, to_int(i_0_11),
  to_int(x), intP_intM_a_0_4)) and (to_int(c_y1) = count(a_0_0, 0,
  to_int(i_0_11), to_int(y), intP_intM_a_0_4))))) ->
  (forall result:bool. (((result = true) <->
  (to_int(i_0_11) <  to_int(n_9))) -> ((result = true) ->
  (((intP_intM_a_0_4[shift(a_0_0, to_int(i_0_11))]) = x) ->
  (forall o3:t. ((to_int(o3) = 1) ->
  (forall o4:t. ((to_int(o4) = (to_int(c_x1) + to_int(o3))) ->
  (forall c_x2:t. ((c_x2 = o4) ->
  (forall o5:t. ((to_int(o5) = 0) ->
  (forall z:t. ((z = o5) ->
  (forall o6:t. ((to_int(o6) = 1) ->
  (forall o7:t. ((to_int(o7) = (to_int(i_0_11) + to_int(o6))) ->
  (forall i1:t. ((i1 = o7) -> ((count(a_0_0, 0, to_int(n_9), to_int(x),
  intP_intM_a_0_4) = (count(a_0_0, 0, (to_int(i_0_11) + 1), to_int(x),
  intP_intM_a_0_4) + count(a_0_0, (to_int(i_0_11) + 1), to_int(n_9),
  to_int(x), intP_intM_a_0_4))) -> ((count(a_0_0, 0, to_int(n_9), to_int(y),
  intP_intM_a_0_4) = (count(a_0_0, 0, (to_int(i_0_11) + 1), to_int(y),
  intP_intM_a_0_4) + count(a_0_0, (to_int(i_0_11) + 1), to_int(n_9),
  to_int(y), intP_intM_a_0_4))) ->
  (forall o8:t. ((to_int(o8) = 1) ->
  (forall o9:t. ((to_int(o9) = (to_int(n_9) - to_int(i_0_11))) ->
  (forall o10:t. ((to_int(o10) = (to_int(o9) - to_int(o8))) ->
  (forall o11:t. ((to_int(o11) = (to_int(c_y1) + to_int(o10))) ->
  (forall result1:bool. (((result1 = true) <->
  (to_int(o11) <  to_int(c_x2))) -> ((result1 = true) ->
  (forall o12:t. ((to_int(o12) = 1) ->
  (forall us_retres:t. ((us_retres = o12) ->
  (forall return:t. ((return = us_retres) -> (infix_gt(return, of_int(0)) ->
  (count(a_0_0, 0, to_int(n_9), to_int(y), intP_intM_a_0_4) <  count(a_0_0,
  0, to_int(n_9), to_int(x), intP_intM_a_0_4)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
