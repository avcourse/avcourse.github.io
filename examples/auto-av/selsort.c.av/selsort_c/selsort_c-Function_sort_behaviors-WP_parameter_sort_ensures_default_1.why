(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

axiom CompatOrderMult :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

type 't pointer

logic null : 't pointer

logic sub_pointer : 't pointer, 't pointer -> int

logic shift : 't pointer, int -> 't pointer

logic same_block : 't pointer, 't pointer -> prop

axiom Sub_pointer_def :
  (forall a:'t pointer.
  (forall i:int. forall j:int [shift(a, i), shift(a, j)].
  (sub_pointer(shift(a, i), shift(a, j)) = (i - j))))

axiom Shift_def1 :
  (forall a:'t pointer.
  (forall i:int [shift(a, i)].
  (forall j:int [shift(shift(a, i), j)]. (shift(shift(a, i), j) = shift(a,
  (i + j))))))

axiom Shift_def2 : (forall a:'t pointer [shift(a, 0)]. (shift(a, 0) = a))

axiom Same_block_def :
  (forall a:'t pointer. forall b:'t pointer [same_block(a, b)].
  (same_block(a, b) -> (exists i:int. (a = shift(b, i)))))

axiom Same_block_def1 :
  (forall a:'t pointer. forall b:'t pointer [same_block(a, b)].
  ((exists i:int. (a = shift(b, i))) -> same_block(a, b)))

axiom Sub_pointer_shift :
  (forall p:'t pointer. forall q:'t pointer [same_block(p, q)| sub_pointer(p,
  q)]. (same_block(p, q) -> (p = shift(q, sub_pointer(p, q)))))

axiom Sub_pointer_self :
  (forall p:'t pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom Sub_pointer_zero :
  (forall p:'t pointer. forall q:'t pointer [sub_pointer(p, q)].
  (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q))))

axiom Sub_pointer_shift_left :
  (forall p:'t pointer. forall q:'t pointer. forall i:int
  [sub_pointer(shift(p, i), q)]. (same_block(p, q) -> (sub_pointer(shift(p,
  i), q) = (sub_pointer(p, q) + i))))

axiom Sub_pointer_shift_right :
  (forall p:'t pointer. forall q:'t pointer. forall i:int [sub_pointer(p,
  shift(q, i))]. (same_block(p, q) -> (sub_pointer(p, shift(q,
  i)) = (sub_pointer(p, q) - i))))

axiom Sub_pointer_neg :
  (forall p:'t pointer. forall q:'t pointer [sub_pointer(p, q)|
  sub_pointer(q, p)]. (same_block(p, q) -> (sub_pointer(p,
  q) = (-sub_pointer(q, p)))))

axiom Shift_shift :
  (forall p:'t pointer.
  (forall i:int. forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
  j) = shift(p, (i + j)))))

axiom Neq_shift :
  (forall p:'t pointer.
  (forall i:int.
  (forall j:int [shift(p, i), shift(p, j)]. ((not (i = j)) -> (not (shift(p,
  i) = shift(p, j)))))))

axiom Same_block_refl : (forall p:'t pointer. same_block(p, p))

axiom Same_block_shift :
  (forall p:'t pointer.
  (forall i:int [shift(p, i)]. same_block(p, shift(p, i))))

axiom Same_block_symm :
  (forall p:'t pointer.
  (forall q:'t pointer [same_block(p, q)| same_block(q, p)]. (same_block(p,
  q) -> same_block(q, p))))

axiom Same_block_symm1 :
  (forall p:'t pointer.
  (forall q:'t pointer [same_block(p, q)| same_block(q, p)]. (same_block(q,
  p) -> same_block(p, q))))

axiom Same_block_trans :
  (forall p:'t pointer.
  (forall q:'t pointer [same_block(p, q)| same_block(q, p)].
  (forall r:'t pointer [same_block(p, r)]. ((same_block(p, q) and
  same_block(q, r)) -> same_block(p, r)))))

axiom Same_block_shift_right :
  (forall p:'t pointer.
  (forall q:'t pointer [same_block(p, q)| same_block(q, p)].
  (forall i:int [same_block(p, shift(q, i))]. (same_block(p, q) ->
  same_block(p, shift(q, i))))))

axiom Same_block_shift_left :
  (forall p:'t pointer.
  (forall q:'t pointer [same_block(p, q)| same_block(q, p)].
  (forall i:int [same_block(shift(q, i), p)]. (same_block(q, p) ->
  same_block(shift(q, i), p)))))

axiom Select_eq :
  (forall m:('a,'b) farray.
  (forall a1:'a. forall a2:'a.
  (forall b1:'b [((m[a1 <- b1])[a2])]. ((a1 = a2) ->
  (((m[a1 <- b1])[a2]) = b1)))))

axiom Select_neq :
  (forall m:('a,'b) farray.
  (forall a1:'a. forall a2:'a.
  (forall b1:'b [((m[a1 <- b1])[a2])]. ((not (a1 = a2)) ->
  (((m[a1 <- b1])[a2]) = (m[a2]))))))

type 't tag_id

logic int_of_tag : 't tag_id -> int

type voidP

axiom Voidp_whole_block_tag :
  (forall t:(voidP pointer,voidP tag_id) farray.
  (forall p:voidP pointer.
  (forall q:voidP pointer. (same_block(p, q) -> ((t[p]) = (t[q]))))))

type 'a ref = { contents : 'a
}

logic abs : int -> int

axiom abs_def : (forall x:int. ((x >= 0) -> (abs(x) = x)))

axiom abs_def1 : (forall x:int. ((not (x >= 0)) -> (abs(x) = (-x))))

axiom Abs_le :
  (forall x:int. forall y:int [abs(x), y]. ((abs(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 :
  (forall x:int. forall y:int [abs(x), y]. ((abs(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:int. forall y:int [abs(x), y]. ((((-y) <= x) and (x <= y)) ->
  (abs(x) <= y)))

axiom Abs_pos : (forall x:int. (abs(x) >= 0))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((x >= 0) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((x >= 0) and (0 <  y)) ->
  (comp_div(x,y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  ((-abs(y)) <  comp_mod(x,y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (comp_mod(x,y) <  abs(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((x >= 0) and (0 <  y)) ->
  (comp_div(x,y) >= 0)))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((x >= 0) and (not (y = 0))) ->
  (comp_mod(x,y) >= 0)))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((y >= 0) and (z >= 0))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((y >= 0) and (z >= 0))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mult_simplest :
  (forall x:int. forall y:int [comp_div((x * y),y)]. (((x >= 0) and
  (0 <  y)) -> (comp_div((x * y),y) = x)))

predicate in_bounds(n: int) = ((0 <= n) and (n <= 18446744073709551615))

type t

logic to_int : t -> int

axiom To_int_in_bounds : (forall a:t [to_int(a)]. in_bounds(to_int(a)))

logic of_int : int -> t

axiom Of_int :
  (forall a:int [of_int(a)]. (in_bounds(a) -> (to_int(of_int(a)) = a)))

axiom Of_int_to_int : (forall a:t [to_int(a)]. (of_int(to_int(a)) = a))

predicate infix_lseq(a: t, b: t) = (to_int(a) <= to_int(b))

predicate infix_ls(a: t, b: t) = (to_int(a) <  to_int(b))

predicate infix_gteq(a: t, b: t) = (to_int(a) >= to_int(b))

predicate infix_gt(a: t, b: t) = (to_int(b) <  to_int(a))

predicate in_bounds1(n: int) = (((-2147483648) <= n) and (n <= 2147483647))

type t1

logic to_int1 : t1 -> int

axiom To_int_in_bounds1 : (forall a:t1 [to_int1(a)]. in_bounds1(to_int1(a)))

logic of_int1 : int -> t1

axiom Of_int1 :
  (forall a:int [of_int1(a)]. (in_bounds1(a) -> (to_int1(of_int1(a)) = a)))

axiom Of_int_to_int1 : (forall a:t1 [to_int1(a)]. (of_int1(to_int1(a)) = a))

predicate infix_lseq1(a: t1, b: t1) = (to_int1(a) <= to_int1(b))

predicate infix_ls1(a: t1, b: t1) = (to_int1(a) <  to_int1(b))

predicate infix_gteq1(a: t1, b: t1) = (to_int1(a) >= to_int1(b))

predicate infix_gt1(a: t1, b: t1) = (to_int1(b) <  to_int1(a))

logic parenttag : 't2 tag_id, 't2 tag_id -> prop

logic subtag : 't2 tag_id, 't2 tag_id -> prop

axiom Subtag_refl : (forall t2:'t3 tag_id [subtag(t2, t2)]. subtag(t2, t2))

axiom Subtag_parent :
  (forall t11:'t2 tag_id.
  (forall t21:'t2 tag_id.
  (forall t3:'t2 tag_id [subtag(t11, t21)| parenttag(t21, t3)| subtag(t11,
  t3)]. (subtag(t11, t21) -> (parenttag(t21, t3) -> subtag(t11, t3))))))

axiom Subtag_antisymmetric :
  (forall t11:'t2 tag_id. forall t21:'t2 tag_id. (subtag(t11, t21) ->
  (subtag(t21, t11) -> (t11 = t21))))

logic bottom_tag : 'a tag_id

axiom Bottom_tag :
  (forall t2:'t3 tag_id [subtag(t2, (bottom_tag : 't3 tag_id))]. subtag(t2,
  (bottom_tag : 't3 tag_id)))

axiom Bottom_int : (int_of_tag((bottom_tag : 'a tag_id)) = 0)

axiom Root_subtag :
  (forall a:'t2 tag_id.
  (forall b:'t2 tag_id.
  (forall c:'t2 tag_id [subtag(c, a), parenttag(a,
  (bottom_tag : 't2 tag_id)), subtag(c, b), parenttag(b,
  (bottom_tag : 't2 tag_id))]. (parenttag(a, (bottom_tag : 't2 tag_id)) ->
  (parenttag(b, (bottom_tag : 't2 tag_id)) -> ((not (a = b)) -> (subtag(c,
  a) -> (not subtag(c, b)))))))))

logic voidP_tag : voidP tag_id

axiom Voidp_int : (int_of_tag(voidP_tag) = 1)

axiom Voidp_parenttag_bottom : parenttag(voidP_tag,
  (bottom_tag : voidP tag_id))

predicate instanceof(t2: ('t3 pointer,'t3 tag_id) farray, p: 't3 pointer,
  s: 't3 tag_id) = subtag((t2[p]), s)

logic downcast : ('t2 pointer,'t2 tag_id) farray, 't2 pointer,
  't2 tag_id -> 't2 pointer

axiom Downcast_instanceof :
  (forall t2:('t3 pointer,'t3 tag_id) farray.
  (forall p:'t3 pointer.
  (forall s:'t3 tag_id [instanceof(t2, p, s)| downcast(t2, p, s)].
  (instanceof(t2, p, s) -> (downcast(t2, p, s) = p)))))

axiom Downcast_null :
  (forall t2:('t3 pointer,'t3 tag_id) farray.
  (forall s:'t3 tag_id [downcast(t2, (null : 't3 pointer), s)]. (downcast(t2,
  (null : 't3 pointer), s) = (null : 't3 pointer))))

type 't2 alloc_table

logic offset_min : 't2 alloc_table, 't2 pointer -> int

logic offset_max : 't2 alloc_table, 't2 pointer -> int

axiom Null_pointer :
  (forall a:'t2 alloc_table [offset_max(a, (null : 't2 pointer))|
  offset_min(a, (null : 't2 pointer))]. (offset_max(a,
  (null : 't2 pointer)) = (-2)))

axiom Null_pointer1 :
  (forall a:'t2 alloc_table [offset_max(a, (null : 't2 pointer))|
  offset_min(a, (null : 't2 pointer))]. ((-2) <  offset_min(a,
  (null : 't2 pointer))))

axiom Null_pointer2 :
  (forall a:'t2 alloc_table [offset_max(a, (null : 't2 pointer))|
  offset_min(a, (null : 't2 pointer))]. (offset_min(a,
  (null : 't2 pointer)) = 0))

axiom Offset_max_shift :
  (forall a:'t2 alloc_table.
  (forall p:'t2 pointer.
  (forall i:int [offset_max(a, shift(p, i))| offset_max(a, p)].
  (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom Offset_min_shift :
  (forall a:'t2 alloc_table.
  (forall p:'t2 pointer.
  (forall i:int [offset_min(a, shift(p, i))| offset_min(a, p)].
  (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

predicate valid(a: 't2 alloc_table, p: 't2 pointer) = ((offset_min(a,
  p) <= 0) and (0 <= offset_max(a, p)))

predicate allocable(a: 't2 alloc_table, p: 't2 pointer) = ((offset_max(a,
  p) = (-3)) and (((-3) <  offset_min(a, p)) and (offset_min(a, p) = 0)))

predicate freeable(a: 't2 alloc_table, p: 't2 pointer) = ((offset_min(a,
  p) = 0) and (0 <= (offset_max(a, p) + 1)))

predicate allocated(a: 't2 alloc_table, p: 't2 pointer) = (offset_min(a,
  p) <= offset_max(a, p))

predicate tag_fresh(t2: ('t3 pointer,'t3 tag_id) farray, p: 't3 pointer) =
  ((t2[p]) = (bottom_tag : 't3 tag_id))

axiom Alloc_fresh_not_same_block :
  (forall p1:'t2 pointer.
  (forall p2:'t2 pointer [same_block(p1, p2)].
  (forall a:'t2 alloc_table [allocable(a, p1), freeable(a, p2)].
  ((allocable(a, p1) and freeable(a, p2)) -> (not same_block(p1, p2))))))

type 't2 pset

logic pset_empty : 't2 pset

logic pset_singleton : 't2 pointer -> 't2 pset

logic in_pset : 't2 pointer, 't2 pset -> prop

axiom In_pset_empty :
  (forall p:'t2 pointer [in_pset(p, (pset_empty : 't2 pset))].
  (not in_pset(p, (pset_empty : 't2 pset))))

axiom In_pset_singleton :
  (forall p:'t2 pointer.
  (forall q:'t2 pointer [in_pset(p, pset_singleton(q))]. (in_pset(p,
  pset_singleton(q)) -> (p = q))))

axiom In_pset_singleton1 :
  (forall p:'t2 pointer.
  (forall q:'t2 pointer [in_pset(p, pset_singleton(q))]. ((p = q) ->
  in_pset(p, pset_singleton(q)))))

predicate alloc_extends(a1: 't2 alloc_table, a2: 't2 alloc_table) =
  (forall p:'t2 pointer [valid(a1, p)| valid(a2, p)| offset_min(a1, p)|
  offset_min(a2, p)| offset_max(a1, p)| offset_max(a2, p)]. (valid(a1, p) ->
  ((offset_min(a1, p) = offset_min(a2, p)) and (offset_max(a1,
  p) = offset_max(a2, p)))))

predicate free_extends(a1: 't2 alloc_table, a2: 't2 alloc_table) =
  (forall p:'t2 pointer [valid(a1, p)| valid(a2, p)| offset_min(a1, p)|
  offset_min(a2, p)| offset_max(a1, p)| offset_max(a2, p)].
  ((not allocated(a1, p)) -> ((offset_min(a1, p) = offset_min(a2, p)) and
  (offset_max(a1, p) = offset_max(a2, p)))))

predicate alloc_block(a1: 't2 alloc_table, a2: 't2 alloc_table,
  p: 't2 pointer, n: int) =
  (forall q:'t2 pointer [offset_min(a2, q)| offset_min(a1, q)| offset_max(a1,
  q)| offset_max(a1, q)]. (((not same_block(q, p)) -> ((offset_min(a2,
  q) = offset_min(a1, q)) and (offset_max(a2, q) = offset_max(a1, q)))) and
  (same_block(q, p) -> ((offset_min(a2, q) = (0 - sub_pointer(q, p))) and
  (offset_max(a2, q) = ((n - 1) - sub_pointer(q, p)))))))

predicate free_block(a1: 't2 alloc_table, a2: 't2 alloc_table,
  p: 't2 pointer) =
  (forall q:'t2 pointer [offset_min(a2, q)| offset_min(a1, q)| offset_max(a2,
  q)| offset_max(a1, q)]. (((not same_block(q, p)) -> ((offset_min(a2,
  q) = offset_min(a1, q)) and (offset_max(a2, q) = offset_max(a1, q)))) and
  (same_block(q, p) -> ((offset_min(a2, q) = (0 - sub_pointer(q, p))) and
  (offset_max(a2, q) = ((-3) - sub_pointer(q, p)))))))

predicate switch_blocks(a1: 't2 alloc_table, a2: 't2 alloc_table,
  p: 't2 pointer, q: 't2 pointer, n: int) =
  (forall r:'t2 pointer [offset_min(a2, r)| offset_min(a1, r)| offset_max(a2,
  r)| offset_max(a1, r)]. ((((not same_block(r, p)) and (not same_block(r,
  q))) -> ((offset_min(a2, r) = offset_min(a1, r)) and (offset_max(a2,
  r) = offset_max(a1, r)))) and ((same_block(r, p) -> ((offset_min(a2,
  r) = (0 - sub_pointer(r, p))) and (offset_max(a2,
  r) = ((-3) - sub_pointer(r, p))))) and (same_block(r, q) ->
  ((offset_min(a2, r) = (0 - sub_pointer(r, q))) and (offset_max(a2,
  r) = ((n - 1) - sub_pointer(r, q))))))))

predicate alloc_blockset(a1: 't2 alloc_table, a2: 't2 alloc_table,
  q: 't2 pset) =
  (forall p:'t2 pointer [valid(a1, p)| valid(a2, p)| offset_min(a1, p)|
  offset_min(a2, p)| offset_max(a1, p)| offset_max(a2, p)].
  ((forall r:'t2 pointer. (in_pset(r, q) -> (not same_block(p, r)))) ->
  ((offset_min(a1, p) = offset_min(a2, p)) and (offset_max(a1,
  p) = offset_max(a2, p)))))

predicate tag_extends(t11: ('t2 pointer,'t2 tag_id) farray,
  t21: ('t2 pointer,'t2 tag_id) farray) =
  (forall p:'t2 pointer. ((not ((t11[p]) = (bottom_tag : 't2 tag_id))) ->
  ((t21[p]) = (t11[p]))))

predicate alloc_tag_blockset(t11: ('t2 pointer,'t2 tag_id) farray,
  t21: ('t2 pointer,'t2 tag_id) farray, q: 't2 pset) =
  (forall p:'t2 pointer [(t11[p])| (t21[p])].
  ((not ((t11[p]) = (bottom_tag : 't2 tag_id))) -> ((t21[p]) = (t11[p]))))

predicate frame_tag_struct_voidP(p: voidP pointer,
  old_voidP_tag_table: (voidP pointer,voidP tag_id) farray,
  voidP_tag_table: (voidP pointer,voidP tag_id) farray) =
  tag_extends(old_voidP_tag_table, voidP_tag_table)

predicate frame_free_struct_voidP(p: voidP pointer,
  old_voidP_alloc_table: voidP alloc_table,
  voidP_alloc_table: voidP alloc_table) =
  (free_extends(old_voidP_alloc_table, voidP_alloc_table) and
  free_block(old_voidP_alloc_table, voidP_alloc_table, p))

predicate frame_alloc_struct_voidP(p: voidP pointer, n: int,
  old_voidP_alloc_table: voidP alloc_table,
  voidP_alloc_table: voidP alloc_table) =
  (alloc_extends(old_voidP_alloc_table, voidP_alloc_table) and
  alloc_block(old_voidP_alloc_table, voidP_alloc_table, p, n))

predicate typeof_singleton_struct_voidP(p: voidP pointer,
  voidP_tag_table: (voidP pointer,voidP tag_id) farray) =
  ((voidP_tag_table[p]) = voidP_tag)

predicate typeof_struct_voidP(p: voidP pointer, l: int, r: int,
  voidP_tag_table: (voidP pointer,voidP tag_id) farray) =
  (((voidP_tag_table[p]) = voidP_tag) and
  (forall i:int. (((l <= i) and (i <  r)) -> ((voidP_tag_table[shift(p,
  i)]) = voidP_tag))))

predicate instanceof_struct_voidP(p: voidP pointer, l: int, r: int,
  voidP_tag_table: (voidP pointer,voidP tag_id) farray) =
  (instanceof(voidP_tag_table, p, voidP_tag) and
  (forall i:int. (((l <= i) and (i <  r)) -> instanceof(voidP_tag_table,
  shift(p, i), voidP_tag))))

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

predicate strict_left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) = a)

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) = ((offset_min(voidP_alloc_table,
  p) <= a) and (offset_max(voidP_alloc_table, p) >= b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) = ((offset_min(voidP_alloc_table,
  p) = a) and (offset_max(voidP_alloc_table, p) = b))

logic intP_tag : voidP tag_id

axiom IntP_parenttag_voidP : parenttag(intP_tag, voidP_tag)

axiom IntP_is_final :
  (forall voidP_tag_table:(voidP pointer,voidP tag_id) farray.
  (forall p:voidP pointer. (instanceof(voidP_tag_table, p, intP_tag) ->
  ((voidP_tag_table[p]) = intP_tag))))

predicate frame_tag_struct_intP(p: voidP pointer,
  old_voidP_tag_table: (voidP pointer,voidP tag_id) farray,
  voidP_tag_table: (voidP pointer,voidP tag_id) farray) =
  tag_extends(old_voidP_tag_table, voidP_tag_table)

predicate frame_free_struct_intP(p: voidP pointer,
  old_voidP_alloc_table: voidP alloc_table,
  voidP_alloc_table: voidP alloc_table) =
  (free_extends(old_voidP_alloc_table, voidP_alloc_table) and
  free_block(old_voidP_alloc_table, voidP_alloc_table, p))

predicate frame_alloc_struct_intP(p: voidP pointer, n: int,
  old_voidP_alloc_table: voidP alloc_table,
  voidP_alloc_table: voidP alloc_table) =
  (alloc_extends(old_voidP_alloc_table, voidP_alloc_table) and
  alloc_block(old_voidP_alloc_table, voidP_alloc_table, p, n))

predicate typeof_singleton_struct_intP(p: voidP pointer,
  voidP_tag_table: (voidP pointer,voidP tag_id) farray) =
  ((voidP_tag_table[p]) = intP_tag)

predicate typeof_struct_intP(p: voidP pointer, l: int, r: int,
  voidP_tag_table: (voidP pointer,voidP tag_id) farray) =
  (((voidP_tag_table[p]) = intP_tag) and
  (forall i:int. (((l <= i) and (i <  r)) -> ((voidP_tag_table[shift(p,
  i)]) = intP_tag))))

predicate instanceof_struct_intP(p: voidP pointer, l: int, r: int,
  voidP_tag_table: (voidP pointer,voidP tag_id) farray) =
  (instanceof(voidP_tag_table, p, intP_tag) and
  (forall i:int. (((l <= i) and (i <  r)) -> instanceof(voidP_tag_table,
  shift(p, i), intP_tag))))

axiom IntP_int : (int_of_tag(intP_tag) = 4)

predicate minimum(a_9: voidP pointer, m_9: int, n_9: int, k_6: int,
  intP_intM_a_9_10_at_L: (voidP pointer,t1) farray) =
  (forall i:int. (((m_9 <= i) and (i <  n_9)) ->
  infix_lseq1((intP_intM_a_9_10_at_L[shift(a_9, k_6)]),
  (intP_intM_a_9_10_at_L[shift(a_9, i)]))))

logic count : voidP pointer, int, int, int, (voidP pointer,t1) farray -> int

axiom Count_base :
  (forall intP_intM_a_2_at_L:(voidP pointer,t1) farray.
  (forall a_0_0:voidP pointer.
  (forall m_0_0:int.
  (forall n_2_0:int.
  (forall p_0:int. ((m_0_0 >= n_2_0) -> (count(a_0_0, m_0_0, n_2_0, p_0,
  intP_intM_a_2_at_L) = 0)))))))

axiom Count_split :
  (forall intP_intM_a_2_at_L:(voidP pointer,t1) farray.
  (forall a_1:voidP pointer.
  (forall m_1:int.
  (forall n_3:int.
  (forall k_1:int.
  (forall p_1:int. (((m_1 <= n_3) and (n_3 <= k_1)) -> (count(a_1, m_1, k_1,
  p_1, intP_intM_a_2_at_L) = (count(a_1, m_1, n_3, p_1,
  intP_intM_a_2_at_L) + count(a_1, n_3, k_1, p_1, intP_intM_a_2_at_L))))))))))

axiom Count_one :
  (forall intP_intM_a_2_at_L:(voidP pointer,t1) farray.
  (forall a_2:voidP pointer.
  (forall m_2:int.
  (forall p_2:int. ((to_int1((intP_intM_a_2_at_L[shift(a_2, m_2)])) = p_2) ->
  (count(a_2, m_2, (m_2 + 1), p_2, intP_intM_a_2_at_L) = 1))))))

axiom Count_one1 :
  (forall intP_intM_a_2_at_L:(voidP pointer,t1) farray.
  (forall a_2:voidP pointer.
  (forall m_2:int.
  (forall p_2:int. ((not (to_int1((intP_intM_a_2_at_L[shift(a_2,
  m_2)])) = p_2)) -> (count(a_2, m_2, (m_2 + 1), p_2,
  intP_intM_a_2_at_L) = 0))))))

function count_sum(a_10: voidP pointer, i_0: int, j: int, n_10: int,
  p_7: int, intP_intM_a_10_11_at_L: (voidP pointer,t1) farray) : int =
  ((((count(a_10, 0, i_0, p_7, intP_intM_a_10_11_at_L) + count(a_10, i_0,
  (i_0 + 1), p_7, intP_intM_a_10_11_at_L)) + count(a_10, (i_0 + 1), j, p_7,
  intP_intM_a_10_11_at_L)) + count(a_10, j, (j + 1), p_7,
  intP_intM_a_10_11_at_L)) + count(a_10, (j + 1), n_10, p_7,
  intP_intM_a_10_11_at_L))

predicate count_splitted(a_11: voidP pointer, i_1: int, j_0: int, n_11: int,
  intP_intM_a_11_12_at_L: (voidP pointer,t1) farray) =
  (forall p_8:int. ((count(a_11, 0, n_11, p_8,
  intP_intM_a_11_12_at_L) = (count(a_11, 0, i_1, p_8,
  intP_intM_a_11_12_at_L) + count(a_11, i_1, n_11, p_8,
  intP_intM_a_11_12_at_L))) and ((count(a_11, i_1, n_11, p_8,
  intP_intM_a_11_12_at_L) = (count(a_11, i_1, (i_1 + 1), p_8,
  intP_intM_a_11_12_at_L) + count(a_11, (i_1 + 1), n_11, p_8,
  intP_intM_a_11_12_at_L))) and ((count(a_11, (i_1 + 1), n_11, p_8,
  intP_intM_a_11_12_at_L) = (count(a_11, (i_1 + 1), j_0, p_8,
  intP_intM_a_11_12_at_L) + count(a_11, j_0, n_11, p_8,
  intP_intM_a_11_12_at_L))) and ((count(a_11, j_0, n_11, p_8,
  intP_intM_a_11_12_at_L) = (count(a_11, j_0, (j_0 + 1), p_8,
  intP_intM_a_11_12_at_L) + count(a_11, (j_0 + 1), n_11, p_8,
  intP_intM_a_11_12_at_L))) and ((count(a_11, (i_1 + 1), n_11, p_8,
  intP_intM_a_11_12_at_L) = ((count(a_11, (i_1 + 1), j_0, p_8,
  intP_intM_a_11_12_at_L) + count(a_11, j_0, (j_0 + 1), p_8,
  intP_intM_a_11_12_at_L)) + count(a_11, (j_0 + 1), n_11, p_8,
  intP_intM_a_11_12_at_L))) and ((count(a_11, i_1, n_11, p_8,
  intP_intM_a_11_12_at_L) = (((count(a_11, i_1, (i_1 + 1), p_8,
  intP_intM_a_11_12_at_L) + count(a_11, (i_1 + 1), j_0, p_8,
  intP_intM_a_11_12_at_L)) + count(a_11, j_0, (j_0 + 1), p_8,
  intP_intM_a_11_12_at_L)) + count(a_11, (j_0 + 1), n_11, p_8,
  intP_intM_a_11_12_at_L))) and ((count(a_11, 0, n_11, p_8,
  intP_intM_a_11_12_at_L) = ((((count(a_11, 0, i_1, p_8,
  intP_intM_a_11_12_at_L) + count(a_11, i_1, (i_1 + 1), p_8,
  intP_intM_a_11_12_at_L)) + count(a_11, (i_1 + 1), j_0, p_8,
  intP_intM_a_11_12_at_L)) + count(a_11, j_0, (j_0 + 1), p_8,
  intP_intM_a_11_12_at_L)) + count(a_11, (j_0 + 1), n_11, p_8,
  intP_intM_a_11_12_at_L))) and (count(a_11, 0, n_11, p_8,
  intP_intM_a_11_12_at_L) = count_sum(a_11, i_1, j_0, n_11, p_8,
  intP_intM_a_11_12_at_L))))))))))

predicate count_saved(a_8: voidP pointer, m_8: int, n_8: int,
  intP_intM_a_8_5_at_L2: (voidP pointer,t1) farray,
  intP_intM_a_8_5_at_L1: (voidP pointer,t1) farray) =
  (forall p_3:int. (count(a_8, m_8, n_8, p_3,
  intP_intM_a_8_5_at_L1) = count(a_8, m_8, n_8, p_3, intP_intM_a_8_5_at_L2)))

logic pset_range : 't2 pset, int, int -> 't2 pset

axiom In_pset_range :
  (forall p:'t2 pointer.
  (forall q:'t2 pset.
  (forall a:int. forall b:int [in_pset(p, pset_range(q, a, b))]. (in_pset(p,
  pset_range(q, a, b)) ->
  (exists i:int.
  (exists r:'t2 pointer. ((a <= i) and ((i <= b) and (in_pset(r, q) and
  (p = shift(r, i)))))))))))

axiom In_pset_range1 :
  (forall p:'t2 pointer.
  (forall q:'t2 pset.
  (forall a:int. forall b:int [in_pset(p, pset_range(q, a, b))].
  ((exists i:int.
   (exists r:'t2 pointer. ((a <= i) and ((i <= b) and (in_pset(r, q) and
   (p = shift(r, i))))))) ->
  in_pset(p, pset_range(q, a, b))))))

axiom In_pset_range_singleton :
  (forall p:'t2 pointer.
  (forall q:'t2 pointer.
  (forall a:int. forall b:int [in_pset(p, pset_range(pset_singleton(q), a,
  b))]. (in_pset(p, pset_range(pset_singleton(q), a, b)) -> same_block(p,
  q)))))

axiom In_pset_range_singleton1 :
  (forall p:'t2 pointer.
  (forall q:'t2 pointer.
  (forall a:int. forall b:int [in_pset(p, pset_range(pset_singleton(q), a,
  b))]. (in_pset(p, pset_range(pset_singleton(q), a, b)) ->
  (a <= sub_pointer(p, q))))))

axiom In_pset_range_singleton2 :
  (forall p:'t2 pointer.
  (forall q:'t2 pointer.
  (forall a:int. forall b:int [in_pset(p, pset_range(pset_singleton(q), a,
  b))]. (in_pset(p, pset_range(pset_singleton(q), a, b)) -> (sub_pointer(p,
  q) <= b)))))

axiom In_pset_range_singleton3 :
  (forall p:'t2 pointer.
  (forall q:'t2 pointer.
  (forall a:int. forall b:int [in_pset(p, pset_range(pset_singleton(q), a,
  b))]. ((same_block(p, q) and ((a <= sub_pointer(p, q)) and (sub_pointer(p,
  q) <= b))) -> in_pset(p, pset_range(pset_singleton(q), a, b))))))

predicate not_assigns(a1: 't2 alloc_table, a2: 't2 alloc_table,
  m1: ('t2 pointer,'v) farray, m2: ('t2 pointer,'v) farray, l: 't2 pset) =
  (forall p:'t2 pointer [in_pset(p, l)| (m2[p])| (m1[p])]. ((valid(a1, p) and
  valid(a2, p)) -> ((not in_pset(p, l)) -> ((m2[p]) = (m1[p])))))

axiom Not_assigns_refl :
  (forall a1:'t2 alloc_table.
  (forall a2:'t2 alloc_table.
  (forall m:('t2 pointer,'v) farray.
  (forall l:'t2 pset [not_assigns(a1, a2, m, m, l)]. not_assigns(a1, a2, m,
  m, l)))))

axiom Not_assigns_trans :
  (forall a1:'t2 alloc_table.
  (forall a2:'t2 alloc_table.
  (forall m1:('t2 pointer,'v) farray.
  (forall m2:('t2 pointer,'v) farray.
  (forall m3:('t2 pointer,'v) farray.
  (forall l:'t2 pset [not_assigns(a1, a2, m1, m2, l), not_assigns(a1, a2, m2,
  m3, l)| not_assigns(a1, a2, m1, m3, l)]. (not_assigns(a1, a2, m1, m2, l) ->
  (not_assigns(a1, a2, m2, m3, l) -> not_assigns(a1, a2, m1, m3, l)))))))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

logic ordered : voidP pointer, int, int, (voidP pointer,t1) farray -> prop

axiom Ordered_base :
  (forall intP_intM_a_3_3_at_L:(voidP pointer,t1) farray.
  (forall a_4:voidP pointer.
  (forall m_4:int.
  (forall n_5:int. ((m_4 >= n_5) -> ordered(a_4, m_4, n_5,
  intP_intM_a_3_3_at_L))))))

axiom Ordered_split :
  (forall intP_intM_a_3_3_at_L:(voidP pointer,t1) farray.
  (forall a_5:voidP pointer.
  (forall m_5:int.
  (forall k_2:int.
  (forall n_6:int. ((((m_5 <= n_6) and (n_6 <= k_2)) -> ordered(a_5, m_5,
  k_2, intP_intM_a_3_3_at_L)) -> ordered(a_5, m_5, n_6,
  intP_intM_a_3_3_at_L)))))))

axiom Ordered_split1 :
  (forall intP_intM_a_3_3_at_L:(voidP pointer,t1) farray.
  (forall a_5:voidP pointer.
  (forall m_5:int.
  (forall k_2:int.
  (forall n_6:int. ((((m_5 <= n_6) and (n_6 <= k_2)) -> ordered(a_5, m_5,
  k_2, intP_intM_a_3_3_at_L)) -> ordered(a_5, n_6, k_2,
  intP_intM_a_3_3_at_L)))))))

axiom Ordered_split2 :
  (forall intP_intM_a_3_3_at_L:(voidP pointer,t1) farray.
  (forall a_5:voidP pointer.
  (forall m_5:int.
  (forall k_2:int.
  (forall n_6:int. ((ordered(a_5, m_5, n_6, intP_intM_a_3_3_at_L) and
  ordered(a_5, n_6, k_2, intP_intM_a_3_3_at_L)) -> (((m_5 <= n_6) and
  (n_6 <= k_2)) -> ordered(a_5, m_5, k_2, intP_intM_a_3_3_at_L))))))))

axiom Ordered_two :
  (forall intP_intM_a_3_3_at_L:(voidP pointer,t1) farray.
  (forall a_6:voidP pointer.
  (forall m_6:int. (ordered(a_6, m_6, (m_6 + 1), intP_intM_a_3_3_at_L) ->
  infix_lseq1((intP_intM_a_3_3_at_L[shift(a_6, m_6)]),
  (intP_intM_a_3_3_at_L[shift(a_6, (m_6 + 1))]))))))

axiom Ordered_two1 :
  (forall intP_intM_a_3_3_at_L:(voidP pointer,t1) farray.
  (forall a_6:voidP pointer.
  (forall m_6:int. (infix_lseq1((intP_intM_a_3_3_at_L[shift(a_6, m_6)]),
  (intP_intM_a_3_3_at_L[shift(a_6, (m_6 + 1))])) -> ordered(a_6, m_6,
  (m_6 + 1), intP_intM_a_3_3_at_L)))))

goal WP_parameter_sort_ensures_default :
  (forall a_0:voidP pointer. forall n_11_0:t1.
  forall intP_intM_a_13:(voidP pointer,t1) farray.
  forall voidP_a_13_alloc_table:voidP alloc_table.
  forall voidP_a_13_tag_table:(voidP pointer,voidP tag_id) farray.
  ((((offset_min(voidP_a_13_alloc_table,
  a_0) <= offset_max(voidP_a_13_alloc_table, a_0)) ->
  (((voidP_a_13_tag_table[a_0]) = intP_tag) and
  (forall i:int. (((offset_min(voidP_a_13_alloc_table, a_0) <= i) and
  (i <  offset_max(voidP_a_13_alloc_table, a_0))) ->
  ((voidP_a_13_tag_table[shift(a_0, i)]) = intP_tag))))) and
  (infix_gteq1(n_11_0, of_int1(0)) and ((0 <= (to_int1(n_11_0) + (-1))) ->
  ((offset_min(voidP_a_13_alloc_table, a_0) <= 0) and
  (offset_max(voidP_a_13_alloc_table,
  a_0) >= (to_int1(n_11_0) + (-1))))))) ->
  (forall o:t1. ((to_int1(o) = 0) ->
  (forall i_2:t1. ((i_2 = o) ->
  (forall i_21:t1. forall voidP_aLiter_20_alloc_table:voidP alloc_table.
  forall voidP_aLiter_20_tag_table:(voidP pointer,voidP tag_id) farray.
  forall intP_intM_aLiter_20:(voidP pointer,t1) farray.
  forall intP_intM_a_131:(voidP pointer,t1) farray. ((ordered(a_0, 0,
  (to_int1(i_21) + (-1)), intP_intM_a_131) and ((infix_gt1(i_21,
  of_int1(0)) ->
  (forall i:int. (((to_int1(i_21) <= i) and (i <  to_int1(n_11_0))) ->
  infix_lseq1((intP_intM_a_131[shift(a_0, (to_int1(i_21) - 1))]),
  (intP_intM_a_131[shift(a_0, i)]))))) and
  ((forall p_3:int. (count(a_0, 0, to_int1(n_11_0), p_3,
   intP_intM_a_131) = count(a_0, 0, to_int1(n_11_0), p_3, intP_intM_a_13))) and
  (infix_lseq1(of_int1(0), i_21) and infix_lseq1(i_21, n_11_0))))) ->
  (forall result:bool. (((result = true) <->
  (to_int1(i_21) <  to_int1(n_11_0))) -> ((result = true) ->
  (forall min_pos:t1. ((min_pos = i_21) ->
  (forall o1:t1. ((to_int1(o1) = 1) ->
  (forall o2:t1. ((to_int1(o2) = (to_int1(i_21) + to_int1(o1))) ->
  (forall j_1:t1. ((j_1 = o2) ->
  (forall j_11:t1. forall min_pos1:t1.
  (((forall i:int. (((to_int1(i_21) <= i) and (i <  to_int1(j_11))) ->
    infix_lseq1((intP_intM_a_131[shift(a_0, to_int1(min_pos1))]),
    (intP_intM_a_131[shift(a_0, i)])))) and
  ((infix_lseq1(i_21, min_pos1) and infix_ls1(min_pos1, n_11_0)) and
  (((to_int1(i_21) + 1) <= to_int1(j_11)) and infix_lseq1(j_11, n_11_0)))) ->
  (forall result1:bool. (((result1 = true) <->
  (to_int1(j_11) <  to_int1(n_11_0))) -> ((not (result1 = true)) ->
  ((not (min_pos1 = i_21)) ->
  ((forall p_8:int. ((count(a_0, 0, to_int1(n_11_0), p_8,
   intP_intM_a_131) = (count(a_0, 0, to_int1(i_21), p_8,
   intP_intM_a_131) + count(a_0, to_int1(i_21), to_int1(n_11_0), p_8,
   intP_intM_a_131))) and ((count(a_0, to_int1(i_21), to_int1(n_11_0), p_8,
   intP_intM_a_131) = (count(a_0, to_int1(i_21), (to_int1(i_21) + 1), p_8,
   intP_intM_a_131) + count(a_0, (to_int1(i_21) + 1), to_int1(n_11_0), p_8,
   intP_intM_a_131))) and ((count(a_0, (to_int1(i_21) + 1), to_int1(n_11_0),
   p_8, intP_intM_a_131) = (count(a_0, (to_int1(i_21) + 1),
   to_int1(min_pos1), p_8, intP_intM_a_131) + count(a_0, to_int1(min_pos1),
   to_int1(n_11_0), p_8, intP_intM_a_131))) and ((count(a_0,
   to_int1(min_pos1), to_int1(n_11_0), p_8, intP_intM_a_131) = (count(a_0,
   to_int1(min_pos1), (to_int1(min_pos1) + 1), p_8,
   intP_intM_a_131) + count(a_0, (to_int1(min_pos1) + 1), to_int1(n_11_0),
   p_8, intP_intM_a_131))) and ((count(a_0, (to_int1(i_21) + 1),
   to_int1(n_11_0), p_8, intP_intM_a_131) = ((count(a_0, (to_int1(i_21) + 1),
   to_int1(min_pos1), p_8, intP_intM_a_131) + count(a_0, to_int1(min_pos1),
   (to_int1(min_pos1) + 1), p_8, intP_intM_a_131)) + count(a_0,
   (to_int1(min_pos1) + 1), to_int1(n_11_0), p_8, intP_intM_a_131))) and
   ((count(a_0, to_int1(i_21), to_int1(n_11_0), p_8,
   intP_intM_a_131) = (((count(a_0, to_int1(i_21), (to_int1(i_21) + 1), p_8,
   intP_intM_a_131) + count(a_0, (to_int1(i_21) + 1), to_int1(min_pos1), p_8,
   intP_intM_a_131)) + count(a_0, to_int1(min_pos1), (to_int1(min_pos1) + 1),
   p_8, intP_intM_a_131)) + count(a_0, (to_int1(min_pos1) + 1),
   to_int1(n_11_0), p_8, intP_intM_a_131))) and ((count(a_0, 0,
   to_int1(n_11_0), p_8, intP_intM_a_131) = ((((count(a_0, 0, to_int1(i_21),
   p_8, intP_intM_a_131) + count(a_0, to_int1(i_21), (to_int1(i_21) + 1),
   p_8, intP_intM_a_131)) + count(a_0, (to_int1(i_21) + 1),
   to_int1(min_pos1), p_8, intP_intM_a_131)) + count(a_0, to_int1(min_pos1),
   (to_int1(min_pos1) + 1), p_8, intP_intM_a_131)) + count(a_0,
   (to_int1(min_pos1) + 1), to_int1(n_11_0), p_8, intP_intM_a_131))) and
   (count(a_0, 0, to_int1(n_11_0), p_8, intP_intM_a_131) = count_sum(a_0,
   to_int1(i_21), to_int1(min_pos1), to_int1(n_11_0), p_8,
   intP_intM_a_131)))))))))) ->
  (forall o3:t. ((to_int(o3) = to_int1(n_11_0)) ->
  (forall voidP_aLiter_20_alloc_table1:voidP alloc_table.
  forall voidP_aLiter_20_tag_table1:(voidP pointer,voidP tag_id) farray.
  (forall o4:voidP pointer. ((strict_valid_struct_voidP(o4, 0,
  (to_int(o3) - 1), voidP_aLiter_20_alloc_table1) and
  ((alloc_extends(voidP_aLiter_20_alloc_table,
  voidP_aLiter_20_alloc_table1) and alloc_block(voidP_aLiter_20_alloc_table,
  voidP_aLiter_20_alloc_table1, o4, to_int(o3))) and
  (tag_extends(voidP_aLiter_20_tag_table, voidP_aLiter_20_tag_table1) and
  (allocable(voidP_aLiter_20_alloc_table, o4) and
  (tag_fresh(voidP_aLiter_20_tag_table, o4) and
  (((voidP_aLiter_20_tag_table1[o4]) = intP_tag) and
  (forall i:int. (((0 <= i) and (i <  to_int(o3))) ->
  ((voidP_aLiter_20_tag_table1[shift(o4, i)]) = intP_tag))))))))) ->
  (forall aLiter:voidP pointer. ((aLiter = o4) ->
  (forall intP_intM_aLiter_201:(voidP pointer,t1) farray.
  (((forall p:voidP pointer [in_pset(p, pset_range(pset_singleton(aLiter), 0,
    (to_int1(n_11_0) - 1)))| (intP_intM_aLiter_201[p])|
    (intP_intM_aLiter_20[p])]. (valid(voidP_aLiter_20_alloc_table1, p) ->
    ((not in_pset(p, pset_range(pset_singleton(aLiter), 0,
    (to_int1(n_11_0) - 1)))) ->
    ((intP_intM_aLiter_201[p]) = (intP_intM_aLiter_20[p]))))) and
  (forall k_5:int. (((0 <= k_5) and (k_5 <  to_int1(n_11_0))) ->
  ((intP_intM_aLiter_201[shift(aLiter, k_5)]) = (intP_intM_a_131[shift(a_0,
  k_5)]))))) ->
  ((forall p_8:int. ((count(aLiter, 0, to_int1(n_11_0), p_8,
   intP_intM_aLiter_201) = (count(aLiter, 0, to_int1(i_21), p_8,
   intP_intM_aLiter_201) + count(aLiter, to_int1(i_21), to_int1(n_11_0), p_8,
   intP_intM_aLiter_201))) and ((count(aLiter, to_int1(i_21),
   to_int1(n_11_0), p_8, intP_intM_aLiter_201) = (count(aLiter,
   to_int1(i_21), (to_int1(i_21) + 1), p_8,
   intP_intM_aLiter_201) + count(aLiter, (to_int1(i_21) + 1),
   to_int1(n_11_0), p_8, intP_intM_aLiter_201))) and ((count(aLiter,
   (to_int1(i_21) + 1), to_int1(n_11_0), p_8,
   intP_intM_aLiter_201) = (count(aLiter, (to_int1(i_21) + 1),
   to_int1(min_pos1), p_8, intP_intM_aLiter_201) + count(aLiter,
   to_int1(min_pos1), to_int1(n_11_0), p_8, intP_intM_aLiter_201))) and
   ((count(aLiter, to_int1(min_pos1), to_int1(n_11_0), p_8,
   intP_intM_aLiter_201) = (count(aLiter, to_int1(min_pos1),
   (to_int1(min_pos1) + 1), p_8, intP_intM_aLiter_201) + count(aLiter,
   (to_int1(min_pos1) + 1), to_int1(n_11_0), p_8, intP_intM_aLiter_201))) and
   ((count(aLiter, (to_int1(i_21) + 1), to_int1(n_11_0), p_8,
   intP_intM_aLiter_201) = ((count(aLiter, (to_int1(i_21) + 1),
   to_int1(min_pos1), p_8, intP_intM_aLiter_201) + count(aLiter,
   to_int1(min_pos1), (to_int1(min_pos1) + 1), p_8,
   intP_intM_aLiter_201)) + count(aLiter, (to_int1(min_pos1) + 1),
   to_int1(n_11_0), p_8, intP_intM_aLiter_201))) and ((count(aLiter,
   to_int1(i_21), to_int1(n_11_0), p_8,
   intP_intM_aLiter_201) = (((count(aLiter, to_int1(i_21),
   (to_int1(i_21) + 1), p_8, intP_intM_aLiter_201) + count(aLiter,
   (to_int1(i_21) + 1), to_int1(min_pos1), p_8,
   intP_intM_aLiter_201)) + count(aLiter, to_int1(min_pos1),
   (to_int1(min_pos1) + 1), p_8, intP_intM_aLiter_201)) + count(aLiter,
   (to_int1(min_pos1) + 1), to_int1(n_11_0), p_8, intP_intM_aLiter_201))) and
   ((count(aLiter, 0, to_int1(n_11_0), p_8,
   intP_intM_aLiter_201) = ((((count(aLiter, 0, to_int1(i_21), p_8,
   intP_intM_aLiter_201) + count(aLiter, to_int1(i_21), (to_int1(i_21) + 1),
   p_8, intP_intM_aLiter_201)) + count(aLiter, (to_int1(i_21) + 1),
   to_int1(min_pos1), p_8, intP_intM_aLiter_201)) + count(aLiter,
   to_int1(min_pos1), (to_int1(min_pos1) + 1), p_8,
   intP_intM_aLiter_201)) + count(aLiter, (to_int1(min_pos1) + 1),
   to_int1(n_11_0), p_8, intP_intM_aLiter_201))) and (count(aLiter, 0,
   to_int1(n_11_0), p_8, intP_intM_aLiter_201) = count_sum(aLiter,
   to_int1(i_21), to_int1(min_pos1), to_int1(n_11_0), p_8,
   intP_intM_aLiter_201)))))))))) ->
  ((forall i_2_0:int.
   (forall j_1_0:int.
   (forall p_9:int. (count(a_0, i_2_0, j_1_0, p_9,
   intP_intM_a_131) = count(aLiter, i_2_0, j_1_0, p_9,
   intP_intM_aLiter_201))))) ->
  ((forall p_10:int. (count(a_0, 0, to_int1(i_21), p_10,
   intP_intM_a_131) = count(aLiter, 0, to_int1(i_21), p_10,
   intP_intM_aLiter_201))) ->
  ((forall p_11:int. (count(a_0, to_int1(i_21), (to_int1(i_21) + 1), p_11,
   intP_intM_a_131) = count(aLiter, to_int1(i_21), (to_int1(i_21) + 1), p_11,
   intP_intM_aLiter_201))) ->
  ((forall p_12:int. (count(a_0, (to_int1(i_21) + 1), to_int1(min_pos1),
   p_12, intP_intM_a_131) = count(aLiter, (to_int1(i_21) + 1),
   to_int1(min_pos1), p_12, intP_intM_aLiter_201))) ->
  ((forall p_13:int. (count(a_0, to_int1(min_pos1), (to_int1(min_pos1) + 1),
   p_13, intP_intM_a_131) = count(aLiter, to_int1(min_pos1),
   (to_int1(min_pos1) + 1), p_13, intP_intM_aLiter_201))) ->
  ((forall p_14:int. (count(a_0, (to_int1(min_pos1) + 1), to_int1(n_11_0),
   p_14, intP_intM_a_131) = count(aLiter, (to_int1(min_pos1) + 1),
   to_int1(n_11_0), p_14, intP_intM_aLiter_201))) ->
  (forall tmp_1:t1. ((tmp_1 = (intP_intM_a_131[shift(a_0,
  to_int1(min_pos1))])) ->
  (forall intP_intM_a_132:(voidP pointer,t1) farray.
  ((intP_intM_a_132 = (intP_intM_a_131[shift(a_0,
  to_int1(min_pos1)) <- (intP_intM_a_131[shift(a_0, to_int1(i_21))])])) ->
  (forall intP_intM_a_133:(voidP pointer,t1) farray.
  ((intP_intM_a_133 = (intP_intM_a_132[shift(a_0,
  to_int1(i_21)) <- tmp_1])) ->
  (forall o5:t1. ((to_int1(o5) = 0) ->
  (forall result2:bool. (((result2 = true) <->
  (to_int1(o5) <  to_int1(i_21))) -> ((result2 = true) ->
  (forall usjessie_51:t1. ((to_int1(usjessie_51) = 0) ->
  ((forall p_6:int. (count(a_0, to_int1(usjessie_51), to_int1(i_21), p_6,
   intP_intM_a_133) = count(aLiter, to_int1(usjessie_51), to_int1(i_21), p_6,
   intP_intM_aLiter_201))) ->
  (forall o6:t1. ((to_int1(o6) = 1) ->
  (forall o7:t1. ((to_int1(o7) = (to_int1(i_21) + to_int1(o6))) ->
  (forall result3:bool. (((result3 = true) <->
  (to_int1(o7) <  to_int1(min_pos1))) -> ((result3 = true) ->
  (forall o8:t1. ((to_int1(o8) = 1) ->
  (forall usjessie_55:t1.
  ((to_int1(usjessie_55) = (to_int1(i_21) + to_int1(o8))) ->
  ((forall p_6:int. (count(a_0, to_int1(usjessie_55), to_int1(min_pos1), p_6,
   intP_intM_a_133) = count(aLiter, to_int1(usjessie_55), to_int1(min_pos1),
   p_6, intP_intM_aLiter_201))) ->
  (forall o9:t1. ((to_int1(o9) = 1) ->
  (forall o10:t1. ((to_int1(o10) = (to_int1(min_pos1) + to_int1(o9))) ->
  (forall result4:bool. (((result4 = true) <->
  (to_int1(o10) <  to_int1(n_11_0))) -> ((result4 = true) ->
  (forall o11:t1. ((to_int1(o11) = 1) ->
  (forall usjessie_59:t1.
  ((to_int1(usjessie_59) = (to_int1(min_pos1) + to_int1(o11))) ->
  ((forall p_6:int. (count(a_0, to_int1(usjessie_59), to_int1(n_11_0), p_6,
   intP_intM_a_133) = count(aLiter, to_int1(usjessie_59), to_int1(n_11_0),
   p_6, intP_intM_aLiter_201))) ->
  ((forall p_15:int. ((count(a_0, to_int1(min_pos1), (to_int1(min_pos1) + 1),
   p_15, intP_intM_a_133) = count(aLiter, to_int1(i_21), (to_int1(i_21) + 1),
   p_15, intP_intM_aLiter_201)) and (count(aLiter, to_int1(min_pos1),
   (to_int1(min_pos1) + 1), p_15, intP_intM_aLiter_201) = count(a_0,
   to_int1(i_21), (to_int1(i_21) + 1), p_15, intP_intM_a_133)))) ->
  (forall p_8:int. (count(a_0, 0, to_int1(n_11_0), p_8,
  intP_intM_a_133) = ((((count(a_0, 0, to_int1(i_21), p_8,
  intP_intM_a_133) + count(a_0, to_int1(i_21), (to_int1(i_21) + 1), p_8,
  intP_intM_a_133)) + count(a_0, (to_int1(i_21) + 1), to_int1(min_pos1), p_8,
  intP_intM_a_133)) + count(a_0, to_int1(min_pos1), (to_int1(min_pos1) + 1),
  p_8, intP_intM_a_133)) + count(a_0, (to_int1(min_pos1) + 1),
  to_int1(n_11_0), p_8, intP_intM_a_133)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
