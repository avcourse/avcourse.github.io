;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a ty)) (sort a (witness a))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-fun bool () ty)

(declare-fun match_bool (ty Bool uni uni) uni)

;; match_bool_sort
  (assert
  (forall ((a ty))
  (forall ((x Bool) (x1 uni) (x2 uni)) (sort a (match_bool a x x1 x2)))))

;; match_bool_True
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni)) (=> (sort a z) (= (match_bool a true z z1) z)))))

;; match_bool_False
  (assert
  (forall ((a ty))
  (forall ((z uni) (z1 uni))
  (=> (sort a z1) (= (match_bool a false z z1) z1)))))

(declare-fun index_bool (Bool) Int)

;; index_bool_True
  (assert (= (index_bool true) 0))

;; index_bool_False
  (assert (= (index_bool false) 1))

;; bool_inversion
  (assert (forall ((u Bool)) (or (= u true) (= u false))))

(declare-sort tuple0 0)

(declare-fun tuple01 () ty)

(declare-fun Tuple0 () tuple0)

;; tuple0_inversion
  (assert (forall ((u tuple0)) (= u Tuple0)))

;; CompatOrderMult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (=> (<= x y) (=> (<= 0 z) (<= (* x z) (* y z))))))

(declare-sort pointer 1)

(declare-fun pointer1 (ty) ty)

(declare-fun null (ty) uni)

;; null_sort
  (assert (forall ((t ty)) (sort (pointer1 t) (null t))))

(declare-fun sub_pointer (ty uni uni) Int)

(declare-sort voidP 0)

(declare-fun voidP1 () ty)

(declare-fun shift (ty uni Int) uni)

;; shift_sort
  (assert
  (forall ((t ty))
  (forall ((x uni) (x1 Int)) (sort (pointer1 t) (shift t x x1)))))

(declare-fun shift1 ((pointer voidP) Int) (pointer voidP))

(declare-fun same_block (ty uni uni) Bool)

(declare-fun same_block1 ((pointer voidP) (pointer voidP)) Bool)

(declare-fun t2tb ((pointer voidP)) uni)

;; t2tb_sort
  (assert (forall ((x (pointer voidP))) (sort (pointer1 voidP1) (t2tb x))))

(declare-fun tb2t (uni) (pointer voidP))

;; BridgeL
  (assert
  (forall ((i (pointer voidP)))
  (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (pointer1 voidP1) j) (= (t2tb (tb2t j)) j)) :pattern (
  (t2tb (tb2t j))) )))

;; Sub_pointer_def
  (assert
  (forall ((a (pointer voidP)))
  (forall ((i Int) (j Int))
  (! (= (sub_pointer voidP1 (t2tb (shift1 a i)) (t2tb (shift1 a j))) (- i j)) :pattern (
  (shift1 a i) (shift1 a j)) ))))

;; Sub_pointer_def
  (assert
  (forall ((t ty))
  (forall ((a uni))
  (forall ((i Int) (j Int))
  (! (= (sub_pointer t (shift t a i) (shift t a j)) (- i j)) :pattern (
  (shift t a i) (shift t a j)) )))))

;; Shift_def1
  (assert
  (forall ((a (pointer voidP)))
  (forall ((i Int))
  (! (forall ((j Int))
     (! (= (shift1 (shift1 a i) j) (shift1 a (+ i j))) :pattern ((shift1
                                                                 (shift1 a i)
                                                                 j)) )) :pattern (
  (shift1 a i)) ))))

;; Shift_def1
  (assert
  (forall ((t ty))
  (forall ((a uni))
  (forall ((i Int))
  (! (forall ((j Int))
     (! (= (shift t (shift t a i) j) (shift t a (+ i j))) :pattern ((shift t
                                                                    (shift t
                                                                    a i) j)) )) :pattern (
  (shift t a i)) )))))

;; Shift_def2
  (assert
  (forall ((a (pointer voidP)))
  (! (= (shift1 a 0) a) :pattern ((shift1 a 0)) )))

;; Shift_def2
  (assert
  (forall ((t ty))
  (forall ((a uni))
  (! (=> (sort (pointer1 t) a) (= (shift t a 0) a)) :pattern ((shift t a 0)) ))))

;; Same_block_def
  (assert
  (forall ((a (pointer voidP)) (b (pointer voidP)))
  (! (= (same_block1 a b)
     (exists ((i Int)) (! (= a (shift1 b i)) :pattern ((shift1 b i)) ))) :pattern ((same_block1
  a b)) )))

;; Same_block_def
  (assert
  (forall ((t ty))
  (forall ((a uni) (b uni))
  (! (=> (sort (pointer1 t) a)
     (= (same_block t a b)
     (exists ((i Int)) (! (= a (shift t b i)) :pattern ((shift t b i)) )))) :pattern ((same_block
  t a b)) ))))

;; Sub_pointer_shift
  (assert
  (forall ((p (pointer voidP)) (q (pointer voidP)))
  (! (=> (same_block1 p q)
     (= p (shift1 q (sub_pointer voidP1 (t2tb p) (t2tb q))))) :pattern ((same_block1
  p q)) :pattern ((sub_pointer voidP1 (t2tb p) (t2tb q))) )))

;; Sub_pointer_shift
  (assert
  (forall ((t ty))
  (forall ((p uni) (q uni))
  (! (=> (sort (pointer1 t) p)
     (=> (same_block t p q) (= p (shift t q (sub_pointer t p q))))) :pattern ((same_block
  t p q)) :pattern ((sub_pointer t p q)) ))))

;; Sub_pointer_self
  (assert
  (forall ((t ty))
  (forall ((p uni))
  (! (= (sub_pointer t p p) 0) :pattern ((sub_pointer t p p)) ))))

;; Sub_pointer_zero
  (assert
  (forall ((p (pointer voidP)) (q (pointer voidP)))
  (! (=> (same_block1 p q)
     (=> (= (sub_pointer voidP1 (t2tb p) (t2tb q)) 0) (= p q))) :pattern (
  (sub_pointer voidP1 (t2tb p) (t2tb q))) )))

;; Sub_pointer_zero
  (assert
  (forall ((t ty))
  (forall ((p uni) (q uni))
  (! (=> (sort (pointer1 t) p)
     (=> (sort (pointer1 t) q)
     (=> (same_block t p q) (=> (= (sub_pointer t p q) 0) (= p q))))) :pattern (
  (sub_pointer t p q)) ))))

;; Sub_pointer_shift_left
  (assert
  (forall ((p (pointer voidP)) (q (pointer voidP)) (i Int))
  (! (=> (same_block1 p q)
     (= (sub_pointer voidP1 (t2tb (shift1 p i)) (t2tb q)) (+ (sub_pointer
                                                             voidP1 (t2tb p)
                                                             (t2tb q)) i))) :pattern (
  (sub_pointer voidP1 (t2tb (shift1 p i)) (t2tb q))) )))

;; Sub_pointer_shift_left
  (assert
  (forall ((t ty))
  (forall ((p uni) (q uni) (i Int))
  (! (=> (same_block t p q)
     (= (sub_pointer t (shift t p i) q) (+ (sub_pointer t p q) i))) :pattern (
  (sub_pointer t (shift t p i) q)) ))))

;; Sub_pointer_shift_right
  (assert
  (forall ((p (pointer voidP)) (q (pointer voidP)) (i Int))
  (! (=> (same_block1 p q)
     (= (sub_pointer voidP1 (t2tb p) (t2tb (shift1 q i))) (- (sub_pointer
                                                             voidP1 (t2tb p)
                                                             (t2tb q)) i))) :pattern (
  (sub_pointer voidP1 (t2tb p) (t2tb (shift1 q i)))) )))

;; Sub_pointer_shift_right
  (assert
  (forall ((t ty))
  (forall ((p uni) (q uni) (i Int))
  (! (=> (same_block t p q)
     (= (sub_pointer t p (shift t q i)) (- (sub_pointer t p q) i))) :pattern (
  (sub_pointer t p (shift t q i))) ))))

;; Sub_pointer_neg
  (assert
  (forall ((p (pointer voidP)) (q (pointer voidP)))
  (! (=> (same_block1 p q)
     (= (sub_pointer voidP1 (t2tb p) (t2tb q)) (- (sub_pointer voidP1
                                                  (t2tb q) (t2tb p))))) :pattern (
  (sub_pointer voidP1 (t2tb p) (t2tb q))) :pattern ((sub_pointer voidP1
                                                    (t2tb q) (t2tb p))) )))

;; Sub_pointer_neg
  (assert
  (forall ((t ty))
  (forall ((p uni) (q uni))
  (! (=> (same_block t p q) (= (sub_pointer t p q) (- (sub_pointer t q p)))) :pattern (
  (sub_pointer t p q)) :pattern ((sub_pointer t q p)) ))))

;; Shift_shift
  (assert
  (forall ((p (pointer voidP)))
  (forall ((i Int) (j Int))
  (! (= (shift1 (shift1 p i) j) (shift1 p (+ i j))) :pattern ((shift1
                                                              (shift1 p i) j)) ))))

;; Shift_shift
  (assert
  (forall ((t ty))
  (forall ((p uni))
  (forall ((i Int) (j Int))
  (! (= (shift t (shift t p i) j) (shift t p (+ i j))) :pattern ((shift t
                                                                 (shift t p
                                                                 i) j)) )))))

;; Neq_shift
  (assert
  (forall ((p (pointer voidP)))
  (forall ((i Int))
  (forall ((j Int))
  (! (=> (not (= i j)) (not (= (shift1 p i) (shift1 p j)))) :pattern (
  (shift1 p i) (shift1 p j)) )))))

;; Neq_shift
  (assert
  (forall ((t ty))
  (forall ((p uni))
  (forall ((i Int))
  (forall ((j Int))
  (! (=> (not (= i j)) (not (= (shift t p i) (shift t p j)))) :pattern (
  (shift t p i) (shift t p j)) ))))))

;; Same_block_refl
  (assert (forall ((p (pointer voidP))) (same_block1 p p)))

;; Same_block_refl
  (assert (forall ((t ty)) (forall ((p uni)) (same_block t p p))))

;; Same_block_shift
  (assert
  (forall ((p (pointer voidP)))
  (forall ((i Int)) (! (same_block1 p
  (shift1 p i)) :pattern ((shift1 p i)) ))))

;; Same_block_shift
  (assert
  (forall ((t ty))
  (forall ((p uni))
  (forall ((i Int)) (! (same_block t p
  (shift t p i)) :pattern ((shift t p i)) )))))

;; Same_block_symm
  (assert
  (forall ((p (pointer voidP)))
  (forall ((q (pointer voidP)))
  (! (= (same_block1 p q) (same_block1 q p)) :pattern ((same_block1 p
  q)) :pattern ((same_block1 q p)) ))))

;; Same_block_symm
  (assert
  (forall ((t ty))
  (forall ((p uni))
  (forall ((q uni))
  (! (= (same_block t p q) (same_block t q p)) :pattern ((same_block t p
  q)) :pattern ((same_block t q p)) )))))

;; Same_block_trans
  (assert
  (forall ((p (pointer voidP)))
  (forall ((q (pointer voidP)))
  (! (forall ((r (pointer voidP)))
     (! (=> (and (same_block1 p q) (same_block1 q r)) (same_block1 p r)) :pattern ((same_block1
     p r)) )) :pattern ((same_block1
  p q)) :pattern ((same_block1 q p)) ))))

;; Same_block_trans
  (assert
  (forall ((t ty))
  (forall ((p uni))
  (forall ((q uni))
  (! (forall ((r uni))
     (! (=> (and (same_block t p q) (same_block t q r)) (same_block t p r)) :pattern ((same_block
     t p r)) )) :pattern ((same_block
  t p q)) :pattern ((same_block t q p)) )))))

;; Same_block_shift_right
  (assert
  (forall ((p (pointer voidP)))
  (forall ((q (pointer voidP)))
  (! (forall ((i Int))
     (! (=> (same_block1 p q) (same_block1 p (shift1 q i))) :pattern ((same_block1
     p (shift1 q i))) )) :pattern ((same_block1
  p q)) :pattern ((same_block1 q p)) ))))

;; Same_block_shift_right
  (assert
  (forall ((t ty))
  (forall ((p uni))
  (forall ((q uni))
  (! (forall ((i Int))
     (! (=> (same_block t p q) (same_block t p (shift t q i))) :pattern ((same_block
     t p (shift t q i))) )) :pattern ((same_block
  t p q)) :pattern ((same_block t q p)) )))))

;; Same_block_shift_left
  (assert
  (forall ((p (pointer voidP)))
  (forall ((q (pointer voidP)))
  (! (forall ((i Int))
     (! (=> (same_block1 q p) (same_block1 (shift1 q i) p)) :pattern ((same_block1
     (shift1 q i) p)) )) :pattern ((same_block1
  p q)) :pattern ((same_block1 q p)) ))))

;; Same_block_shift_left
  (assert
  (forall ((t ty))
  (forall ((p uni))
  (forall ((q uni))
  (! (forall ((i Int))
     (! (=> (same_block t q p) (same_block t (shift t q i) p)) :pattern ((same_block
     t (shift t q i) p)) )) :pattern ((same_block
  t p q)) :pattern ((same_block t q p)) )))))

(declare-fun map1 (ty ty) ty)

(declare-sort tag_id 1)

(declare-fun tag_id1 (ty) ty)

(declare-sort t 0)

(declare-fun t1 () ty)

(declare-fun get (ty ty uni uni) uni)

;; get_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni)) (sort b (get b a x x1)))))

(declare-fun set (ty ty uni uni uni) uni)

;; set_sort
  (assert
  (forall ((a ty) (b ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (map1 a b) (set b a x x1 x2)))))

(declare-fun t2tb1 ((Array (pointer voidP) (tag_id voidP))) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array (pointer voidP) (tag_id voidP)))) (sort
  (map1 (pointer1 voidP1) (tag_id1 voidP1)) (t2tb1 x))))

(declare-fun tb2t1 (uni) (Array (pointer voidP) (tag_id voidP)))

;; BridgeL
  (assert
  (forall ((i (Array (pointer voidP) (tag_id voidP))))
  (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (map1 (pointer1 voidP1) (tag_id1 voidP1)) j)
     (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1 (tb2t1 j))) )))

(declare-fun t2tb2 ((tag_id voidP)) uni)

;; t2tb_sort
  (assert (forall ((x (tag_id voidP))) (sort (tag_id1 voidP1) (t2tb2 x))))

(declare-fun tb2t2 (uni) (tag_id voidP))

;; BridgeL
  (assert
  (forall ((i (tag_id voidP)))
  (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tag_id1 voidP1) j) (= (t2tb2 (tb2t2 j)) j)) :pattern (
  (t2tb2 (tb2t2 j))) )))

;; Select_eq
  (assert
  (forall ((m (Array (pointer voidP) (tag_id voidP))))
  (forall ((a1 (pointer voidP)) (a2 (pointer voidP)))
  (forall ((b (tag_id voidP)))
  (! (=> (= a1 a2)
     (= (select (tb2t1
                (set (tag_id1 voidP1) (pointer1 voidP1) (t2tb1 m) (t2tb a1)
                (t2tb2 b))) a2) b)) :pattern ((select (tb2t1
                                                      (set (tag_id1 voidP1)
                                                      (pointer1 voidP1)
                                                      (t2tb1 m) (t2tb a1)
                                                      (t2tb2 b))) a2)) )))))

;; Select_eq
  (assert
  (forall ((m (Array (pointer voidP) t)))
  (forall ((a1 (pointer voidP)) (a2 (pointer voidP)))
  (forall ((b t))
  (! (=> (= a1 a2) (= (select (store m a1 b) a2) b)) :pattern ((select (store m a1 b) a2)) )))))

;; Select_eq
  (assert
  (forall ((a ty) (b ty))
  (forall ((m uni))
  (forall ((a1 uni) (a2 uni))
  (forall ((b1 uni))
  (! (=> (sort b b1) (=> (= a1 a2) (= (get b a (set b a m a1 b1) a2) b1))) :pattern (
  (get b a (set b a m a1 b1) a2)) ))))))

;; Select_neq
  (assert
  (forall ((m (Array (pointer voidP) (tag_id voidP))))
  (forall ((a1 (pointer voidP)) (a2 (pointer voidP)))
  (forall ((b (tag_id voidP)))
  (! (=> (not (= a1 a2))
     (= (select (tb2t1
                (set (tag_id1 voidP1) (pointer1 voidP1) (t2tb1 m) (t2tb a1)
                (t2tb2 b))) a2) (select m a2))) :pattern ((select (tb2t1
                                                                  (set
                                                                  (tag_id1
                                                                  voidP1)
                                                                  (pointer1
                                                                  voidP1)
                                                                  (t2tb1 m)
                                                                  (t2tb a1)
                                                                  (t2tb2 b))) a2)) )))))

;; Select_neq
  (assert
  (forall ((m (Array (pointer voidP) t)))
  (forall ((a1 (pointer voidP)) (a2 (pointer voidP)))
  (forall ((b t))
  (! (=> (not (= a1 a2)) (= (select (store m a1 b) a2) (select m a2))) :pattern ((select (store m a1 b) a2)) )))))

;; Select_neq
  (assert
  (forall ((a ty) (b ty))
  (forall ((m uni))
  (forall ((a1 uni) (a2 uni))
  (=> (sort a a1)
  (=> (sort a a2)
  (forall ((b1 uni))
  (! (=> (not (= a1 a2)) (= (get b a (set b a m a1 b1) a2) (get b a m a2))) :pattern (
  (get b a (set b a m a1 b1) a2)) ))))))))

(declare-fun int_of_tag (ty uni) Int)

(declare-fun int_of_tag1 ((tag_id voidP)) Int)

;; Voidp_whole_block_tag
  (assert
  (forall ((t2 (Array (pointer voidP) (tag_id voidP))))
  (forall ((p (pointer voidP)))
  (forall ((q (pointer voidP)))
  (=> (same_block1 p q) (= (select t2 p) (select t2 q)))))))

(declare-fun ref (ty) ty)

(declare-fun mk_ref (ty uni) uni)

;; mk ref_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort (ref a) (mk_ref a x)))))

(declare-fun contents (ty uni) uni)

;; contents_sort
  (assert (forall ((a ty)) (forall ((x uni)) (sort a (contents a x)))))

;; contents_def
  (assert
  (forall ((a ty))
  (forall ((u uni)) (=> (sort a u) (= (contents a (mk_ref a u)) u)))))

;; ref_inversion
  (assert
  (forall ((a ty))
  (forall ((u uni)) (=> (sort (ref a) u) (= u (mk_ref a (contents a u)))))))

(declare-fun abs1 (Int) Int)

;; abs_def
  (assert
  (forall ((x Int)) (ite (>= x 0) (= (abs1 x) x) (= (abs1 x) (- x)))))

;; Abs_le
  (assert
  (forall ((x Int) (y Int))
  (! (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y))) :pattern ((abs1 x) y) )))

;; Abs_pos
  (assert (forall ((x Int)) (>= (abs1 x) 0)))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (>= x 0) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (>= x 0) (< 0 y)) (>= (div1 x y) 0))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (>= x 0) (not (= y 0))) (>= (mod1 x y) 0))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (>= y 0) (>= z 0)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (>= y 0) (>= z 0)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

;; Div_mult_simplest
  (assert
  (forall ((x Int) (y Int))
  (! (=> (and (>= x 0) (< 0 y)) (= (div1 (* x y) y) x)) :pattern ((div1
                                                                  (* x y) y)) )))

(declare-fun in_bounds (Int) Bool)

;; in_bounds_def
  (assert
  (forall ((n Int))
  (= (in_bounds n) (and (<= 0 n) (<= n 18446744073709551615)))))

(declare-sort t2 0)

(declare-fun t3 () ty)

(declare-fun to_int1 (t2) Int)

;; To_int_in_bounds
  (assert
  (forall ((a t2)) (! (in_bounds (to_int1 a)) :pattern ((to_int1 a)) )))

(declare-fun of_int (Int) t2)

;; Of_int
  (assert
  (forall ((a Int))
  (! (=> (in_bounds a) (= (to_int1 (of_int a)) a)) :pattern ((of_int a)) )))

;; Of_int_to_int
  (assert
  (forall ((a t2)) (! (= (of_int (to_int1 a)) a) :pattern ((to_int1 a)) )))

(declare-fun infix_lseq (t2 t2) Bool)

;; infix <=_def
  (assert
  (forall ((a t2) (b t2)) (= (infix_lseq a b) (<= (to_int1 a) (to_int1 b)))))

(declare-fun infix_ls (t2 t2) Bool)

;; infix <_def
  (assert
  (forall ((a t2) (b t2)) (= (infix_ls a b) (< (to_int1 a) (to_int1 b)))))

(declare-fun infix_gteq (t2 t2) Bool)

;; infix >=_def
  (assert
  (forall ((a t2) (b t2)) (= (infix_gteq a b) (>= (to_int1 a) (to_int1 b)))))

(declare-fun infix_gt (t2 t2) Bool)

;; infix >_def
  (assert
  (forall ((a t2) (b t2)) (= (infix_gt a b) (< (to_int1 b) (to_int1 a)))))

(declare-fun in_bounds1 (Int) Bool)

;; in_bounds_def
  (assert
  (forall ((n Int))
  (= (in_bounds1 n) (and (<= (- 2147483648) n) (<= n 2147483647)))))

(declare-fun to_int2 (t) Int)

;; To_int_in_bounds
  (assert
  (forall ((a t)) (! (in_bounds1 (to_int2 a)) :pattern ((to_int2 a)) )))

(declare-fun of_int1 (Int) t)

;; Of_int
  (assert
  (forall ((a Int))
  (! (=> (in_bounds1 a) (= (to_int2 (of_int1 a)) a)) :pattern ((of_int1 a)) )))

;; Of_int_to_int
  (assert
  (forall ((a t)) (! (= (of_int1 (to_int2 a)) a) :pattern ((to_int2 a)) )))

(declare-fun infix_lseq1 (t t) Bool)

;; infix <=_def
  (assert
  (forall ((a t) (b t)) (= (infix_lseq1 a b) (<= (to_int2 a) (to_int2 b)))))

(declare-fun infix_ls1 (t t) Bool)

;; infix <_def
  (assert
  (forall ((a t) (b t)) (= (infix_ls1 a b) (< (to_int2 a) (to_int2 b)))))

(declare-fun infix_gteq1 (t t) Bool)

;; infix >=_def
  (assert
  (forall ((a t) (b t)) (= (infix_gteq1 a b) (>= (to_int2 a) (to_int2 b)))))

(declare-fun infix_gt1 (t t) Bool)

;; infix >_def
  (assert
  (forall ((a t) (b t)) (= (infix_gt1 a b) (< (to_int2 b) (to_int2 a)))))

(declare-fun parenttag (ty uni uni) Bool)

(declare-fun parenttag1 ((tag_id voidP) (tag_id voidP)) Bool)

(declare-fun subtag (ty uni uni) Bool)

;; Subtag_refl
  (assert
  (forall ((t4 ty))
  (forall ((t5 uni)) (! (subtag t4 t5 t5) :pattern ((subtag t4 t5 t5)) ))))

;; Subtag_parent
  (assert
  (forall ((t11 (tag_id voidP)))
  (forall ((t21 (tag_id voidP)))
  (forall ((t31 (tag_id voidP)))
  (! (=> (subtag voidP1 (t2tb2 t11) (t2tb2 t21))
     (=> (parenttag1 t21 t31) (subtag voidP1 (t2tb2 t11) (t2tb2 t31)))) :pattern ((subtag
  voidP1 (t2tb2 t11) (t2tb2 t21))) :pattern ((parenttag1 t21
  t31)) :pattern ((subtag voidP1 (t2tb2 t11) (t2tb2 t31))) )))))

;; Subtag_parent
  (assert
  (forall ((t4 ty))
  (forall ((t11 uni))
  (forall ((t21 uni))
  (forall ((t31 uni))
  (! (=> (subtag t4 t11 t21) (=> (parenttag t4 t21 t31) (subtag t4 t11 t31))) :pattern ((subtag
  t4 t11 t21)) :pattern ((parenttag t4 t21 t31)) :pattern ((subtag t4 t11
  t31)) ))))))

;; Subtag_antisymmetric
  (assert
  (forall ((t4 ty))
  (forall ((t11 uni) (t21 uni))
  (=> (sort (tag_id1 t4) t11)
  (=> (sort (tag_id1 t4) t21)
  (=> (subtag t4 t11 t21) (=> (subtag t4 t21 t11) (= t11 t21))))))))

(declare-fun bottom_tag (ty) uni)

;; bottom_tag_sort
  (assert (forall ((a ty)) (sort (tag_id1 a) (bottom_tag a))))

(declare-fun bottom_tag1 () (tag_id voidP))

;; Bottom_tag
  (assert
  (forall ((t4 (tag_id voidP))) (! (subtag voidP1 (t2tb2 t4)
  (t2tb2 bottom_tag1)) :pattern ((subtag voidP1 (t2tb2 t4)
  (t2tb2 bottom_tag1))) )))

;; Bottom_tag
  (assert
  (forall ((t4 ty))
  (forall ((t5 uni)) (! (subtag t4 t5 (bottom_tag t4)) :pattern ((subtag t4
  t5 (bottom_tag t4))) ))))

;; Bottom_int
  (assert (= (int_of_tag1 bottom_tag1) 0))

;; Bottom_int
  (assert (forall ((a ty)) (= (int_of_tag a (bottom_tag a)) 0)))

;; Root_subtag
  (assert
  (forall ((a (tag_id voidP)))
  (forall ((b (tag_id voidP)))
  (forall ((c (tag_id voidP)))
  (! (=> (parenttag1 a bottom_tag1)
     (=> (parenttag1 b bottom_tag1)
     (=> (not (= a b))
     (=> (subtag voidP1 (t2tb2 c) (t2tb2 a))
     (not (subtag voidP1 (t2tb2 c) (t2tb2 b))))))) :pattern ((subtag
  voidP1 (t2tb2 c) (t2tb2 a)) (parenttag1 a bottom_tag1) (subtag voidP1
  (t2tb2 c) (t2tb2 b)) (parenttag1 b bottom_tag1)) )))))

;; Root_subtag
  (assert
  (forall ((t4 ty))
  (forall ((a uni))
  (=> (sort (tag_id1 t4) a)
  (forall ((b uni))
  (=> (sort (tag_id1 t4) b)
  (forall ((c uni))
  (! (=> (parenttag t4 a (bottom_tag t4))
     (=> (parenttag t4 b (bottom_tag t4))
     (=> (not (= a b)) (=> (subtag t4 c a) (not (subtag t4 c b)))))) :pattern ((subtag
  t4 c a) (parenttag t4 a (bottom_tag t4)) (subtag t4 c b) (parenttag t4 b
  (bottom_tag t4))) ))))))))

(declare-fun voidP_tag () (tag_id voidP))

;; Voidp_int
  (assert (= (int_of_tag1 voidP_tag) 1))

;; Voidp_parenttag_bottom
  (assert (parenttag1 voidP_tag bottom_tag1))

(declare-fun instanceof (ty uni uni uni) Bool)

(declare-fun instanceof1 ((Array (pointer voidP) (tag_id voidP))
  (pointer voidP) (tag_id voidP)) Bool)

;; instanceof_def
  (assert
  (forall ((t4 (Array (pointer voidP) (tag_id voidP))) (p (pointer voidP))
  (s (tag_id voidP)))
  (= (instanceof1 t4 p s) (subtag voidP1 (t2tb2 (select t4 p)) (t2tb2 s)))))

;; instanceof_def
  (assert
  (forall ((t4 ty))
  (forall ((t5 uni) (p uni) (s uni))
  (= (instanceof t4 t5 p s) (subtag t4 (get (tag_id1 t4) (pointer1 t4) t5 p)
  s)))))

(declare-fun downcast (ty uni uni uni) uni)

;; downcast_sort
  (assert
  (forall ((t4 ty))
  (forall ((x uni) (x1 uni) (x2 uni)) (sort (pointer1 t4)
  (downcast t4 x x1 x2)))))

;; Downcast_instanceof
  (assert
  (forall ((t4 (Array (pointer voidP) (tag_id voidP))))
  (forall ((p (pointer voidP)))
  (forall ((s (tag_id voidP)))
  (! (=> (instanceof1 t4 p s)
     (= (tb2t (downcast voidP1 (t2tb1 t4) (t2tb p) (t2tb2 s))) p)) :pattern ((instanceof1
  t4 p
  s)) :pattern ((tb2t (downcast voidP1 (t2tb1 t4) (t2tb p) (t2tb2 s)))) )))))

;; Downcast_instanceof
  (assert
  (forall ((t4 ty))
  (forall ((t5 uni))
  (forall ((p uni))
  (=> (sort (pointer1 t4) p)
  (forall ((s uni))
  (! (=> (instanceof t4 t5 p s) (= (downcast t4 t5 p s) p)) :pattern ((instanceof
  t4 t5 p s)) :pattern ((downcast t4 t5 p s)) )))))))

;; Downcast_null
  (assert
  (forall ((t4 ty))
  (forall ((t5 uni))
  (forall ((s uni))
  (! (= (downcast t4 t5 (null t4) s) (null t4)) :pattern ((downcast t4 t5
                                                          (null t4) s)) )))))

(declare-sort alloc_table 1)

(declare-fun alloc_table1 (ty) ty)

(declare-fun offset_min (ty uni uni) Int)

(declare-fun offset_min1 ((alloc_table voidP) (pointer voidP)) Int)

(declare-fun offset_max (ty uni uni) Int)

(declare-fun offset_max1 ((alloc_table voidP) (pointer voidP)) Int)

;; Null_pointer
  (assert
  (forall ((a (alloc_table voidP)))
  (! (and (= (offset_max1 a (tb2t (null voidP1))) (- 2))
     (and (< (- 2) (offset_min1 a (tb2t (null voidP1))))
     (= (offset_min1 a (tb2t (null voidP1))) 0))) :pattern ((offset_max1 a
                                                            (tb2t
                                                            (null voidP1)))) :pattern (
  (offset_min1 a (tb2t (null voidP1)))) )))

;; Null_pointer
  (assert
  (forall ((t4 ty))
  (forall ((a uni))
  (! (and (= (offset_max t4 a (null t4)) (- 2))
     (and (< (- 2) (offset_min t4 a (null t4)))
     (= (offset_min t4 a (null t4)) 0))) :pattern ((offset_max t4 a
                                                   (null t4))) :pattern (
  (offset_min t4 a (null t4))) ))))

;; Offset_max_shift
  (assert
  (forall ((a (alloc_table voidP)))
  (forall ((p (pointer voidP)))
  (forall ((i Int))
  (! (= (offset_max1 a (shift1 p i)) (- (offset_max1 a p) i)) :pattern (
  (offset_max1 a (shift1 p i))) :pattern ((offset_max1 a p)) )))))

;; Offset_max_shift
  (assert
  (forall ((t4 ty))
  (forall ((a uni))
  (forall ((p uni))
  (forall ((i Int))
  (! (= (offset_max t4 a (shift t4 p i)) (- (offset_max t4 a p) i)) :pattern (
  (offset_max t4 a (shift t4 p i))) :pattern ((offset_max t4 a p)) ))))))

;; Offset_min_shift
  (assert
  (forall ((a (alloc_table voidP)))
  (forall ((p (pointer voidP)))
  (forall ((i Int))
  (! (= (offset_min1 a (shift1 p i)) (- (offset_min1 a p) i)) :pattern (
  (offset_min1 a (shift1 p i))) :pattern ((offset_min1 a p)) )))))

;; Offset_min_shift
  (assert
  (forall ((t4 ty))
  (forall ((a uni))
  (forall ((p uni))
  (forall ((i Int))
  (! (= (offset_min t4 a (shift t4 p i)) (- (offset_min t4 a p) i)) :pattern (
  (offset_min t4 a (shift t4 p i))) :pattern ((offset_min t4 a p)) ))))))

(declare-fun valid (ty uni uni) Bool)

(declare-fun valid1 ((alloc_table voidP) (pointer voidP)) Bool)

;; valid_def
  (assert
  (forall ((a (alloc_table voidP)) (p (pointer voidP)))
  (= (valid1 a p) (and (<= (offset_min1 a p) 0) (<= 0 (offset_max1 a p))))))

;; valid_def
  (assert
  (forall ((t4 ty))
  (forall ((a uni) (p uni))
  (= (valid t4 a p)
  (and (<= (offset_min t4 a p) 0) (<= 0 (offset_max t4 a p)))))))

(declare-fun allocable (ty uni uni) Bool)

(declare-fun allocable1 ((alloc_table voidP) (pointer voidP)) Bool)

;; allocable_def
  (assert
  (forall ((a (alloc_table voidP)) (p (pointer voidP)))
  (= (allocable1 a p)
  (and (= (offset_max1 a p) (- 3))
  (and (< (- 3) (offset_min1 a p)) (= (offset_min1 a p) 0))))))

;; allocable_def
  (assert
  (forall ((t4 ty))
  (forall ((a uni) (p uni))
  (= (allocable t4 a p)
  (and (= (offset_max t4 a p) (- 3))
  (and (< (- 3) (offset_min t4 a p)) (= (offset_min t4 a p) 0)))))))

(declare-fun freeable (ty uni uni) Bool)

(declare-fun t2tb3 ((alloc_table voidP)) uni)

;; t2tb_sort
  (assert
  (forall ((x (alloc_table voidP))) (sort (alloc_table1 voidP1) (t2tb3 x))))

(declare-fun tb2t3 (uni) (alloc_table voidP))

;; BridgeL
  (assert
  (forall ((i (alloc_table voidP)))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (alloc_table1 voidP1) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; freeable_def
  (assert
  (forall ((a (alloc_table voidP)) (p (pointer voidP)))
  (= (freeable voidP1 (t2tb3 a) (t2tb p))
  (and (= (offset_min1 a p) 0) (<= 0 (+ (offset_max1 a p) 1))))))

;; freeable_def
  (assert
  (forall ((t4 ty))
  (forall ((a uni) (p uni))
  (= (freeable t4 a p)
  (and (= (offset_min t4 a p) 0) (<= 0 (+ (offset_max t4 a p) 1)))))))

(declare-fun allocated (ty uni uni) Bool)

;; allocated_def
  (assert
  (forall ((a (alloc_table voidP)) (p (pointer voidP)))
  (= (allocated voidP1 (t2tb3 a) (t2tb p))
  (<= (offset_min1 a p) (offset_max1 a p)))))

;; allocated_def
  (assert
  (forall ((t4 ty))
  (forall ((a uni) (p uni))
  (= (allocated t4 a p) (<= (offset_min t4 a p) (offset_max t4 a p))))))

(declare-fun tag_fresh (ty uni uni) Bool)

(declare-fun tag_fresh1 ((Array (pointer voidP) (tag_id voidP))
  (pointer voidP)) Bool)

;; tag_fresh_def
  (assert
  (forall ((t4 (Array (pointer voidP) (tag_id voidP))) (p (pointer voidP)))
  (= (tag_fresh1 t4 p) (= (select t4 p) bottom_tag1))))

;; tag_fresh_def
  (assert
  (forall ((t4 ty))
  (forall ((t5 uni) (p uni))
  (= (tag_fresh t4 t5 p)
  (= (get (tag_id1 t4) (pointer1 t4) t5 p) (bottom_tag t4))))))

;; Alloc_fresh_not_same_block
  (assert
  (forall ((p1 (pointer voidP)))
  (forall ((p2 (pointer voidP)))
  (! (forall ((a (alloc_table voidP)))
     (! (=> (and (allocable1 a p1) (freeable voidP1 (t2tb3 a) (t2tb p2)))
        (not (same_block1 p1 p2))) :pattern ((allocable1
     a p1) (freeable voidP1 (t2tb3 a) (t2tb p2))) )) :pattern ((same_block1
  p1 p2)) ))))

;; Alloc_fresh_not_same_block
  (assert
  (forall ((t4 ty))
  (forall ((p1 uni))
  (forall ((p2 uni))
  (! (forall ((a uni))
     (! (=> (and (allocable t4 a p1) (freeable t4 a p2))
        (not (same_block t4 p1 p2))) :pattern ((allocable
     t4 a p1) (freeable t4 a p2)) )) :pattern ((same_block
  t4 p1 p2)) )))))

(declare-sort pset 1)

(declare-fun pset1 (ty) ty)

(declare-fun pset_empty (ty) uni)

;; pset_empty_sort
  (assert (forall ((t4 ty)) (sort (pset1 t4) (pset_empty t4))))

(declare-fun pset_singleton (ty uni) uni)

;; pset_singleton_sort
  (assert
  (forall ((t4 ty))
  (forall ((x uni)) (sort (pset1 t4) (pset_singleton t4 x)))))

(declare-fun pset_singleton1 ((pointer voidP)) (pset voidP))

(declare-fun in_pset (ty uni uni) Bool)

(declare-fun in_pset1 ((pointer voidP) (pset voidP)) Bool)

(declare-fun t2tb4 ((pset voidP)) uni)

;; t2tb_sort
  (assert (forall ((x (pset voidP))) (sort (pset1 voidP1) (t2tb4 x))))

(declare-fun tb2t4 (uni) (pset voidP))

;; BridgeL
  (assert
  (forall ((i (pset voidP)))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (pset1 voidP1) j) (= (t2tb4 (tb2t4 j)) j)) :pattern ((t2tb4
                                                                    (tb2t4 j))) )))

;; In_pset_empty
  (assert
  (forall ((p (pointer voidP)))
  (! (not (in_pset1 p (tb2t4 (pset_empty voidP1)))) :pattern ((in_pset1 p
  (tb2t4 (pset_empty voidP1)))) )))

;; In_pset_empty
  (assert
  (forall ((t4 ty))
  (forall ((p uni))
  (! (not (in_pset t4 p (pset_empty t4))) :pattern ((in_pset t4 p
  (pset_empty t4))) ))))

;; In_pset_singleton
  (assert
  (forall ((p (pointer voidP)))
  (forall ((q (pointer voidP)))
  (! (= (in_pset1 p (pset_singleton1 q)) (= p q)) :pattern ((in_pset1 p
  (pset_singleton1 q))) ))))

;; In_pset_singleton
  (assert
  (forall ((t4 ty))
  (forall ((p uni))
  (=> (sort (pointer1 t4) p)
  (forall ((q uni))
  (! (=> (sort (pointer1 t4) q)
     (= (in_pset t4 p (pset_singleton t4 q)) (= p q))) :pattern ((in_pset
  t4 p (pset_singleton t4 q))) ))))))

(declare-fun alloc_extends (ty uni uni) Bool)

(declare-fun alloc_extends1 ((alloc_table voidP) (alloc_table voidP)) Bool)

;; alloc_extends_def
  (assert
  (forall ((a1 (alloc_table voidP)) (a2 (alloc_table voidP)))
  (= (alloc_extends1 a1 a2)
  (forall ((p (pointer voidP)))
  (! (=> (valid1 a1 p)
     (and (= (offset_min1 a1 p) (offset_min1 a2 p))
     (= (offset_max1 a1 p) (offset_max1 a2 p)))) :pattern ((valid1
  a1 p)) :pattern ((valid1 a2
  p)) :pattern ((offset_min1 a1 p)) :pattern ((offset_min1 a2 p)) :pattern (
  (offset_max1 a1 p)) :pattern ((offset_max1 a2 p)) )))))

;; alloc_extends_def
  (assert
  (forall ((t4 ty))
  (forall ((a1 uni) (a2 uni))
  (and
  (=> (alloc_extends t4 a1 a2)
  (forall ((p uni))
  (! (=> (valid t4 a1 p)
     (and (= (offset_min t4 a1 p) (offset_min t4 a2 p))
     (= (offset_max t4 a1 p) (offset_max t4 a2 p)))) :pattern ((valid
  t4 a1 p)) :pattern ((valid t4 a2
  p)) :pattern ((offset_min t4 a1 p)) :pattern ((offset_min t4 a2 p)) :pattern (
  (offset_max t4 a1 p)) :pattern ((offset_max t4 a2 p)) )))
  (=>
  (forall ((p uni))
  (! (=> (sort (pointer1 t4) p)
     (=> (valid t4 a1 p)
     (and (= (offset_min t4 a1 p) (offset_min t4 a2 p))
     (= (offset_max t4 a1 p) (offset_max t4 a2 p))))) :pattern ((valid
  t4 a1 p)) :pattern ((valid t4 a2
  p)) :pattern ((offset_min t4 a1 p)) :pattern ((offset_min t4 a2 p)) :pattern (
  (offset_max t4 a1 p)) :pattern ((offset_max t4 a2 p)) )) (alloc_extends t4
  a1 a2))))))

(declare-fun free_extends (ty uni uni) Bool)

(declare-fun free_extends1 ((alloc_table voidP) (alloc_table voidP)) Bool)

;; free_extends_def
  (assert
  (forall ((a1 (alloc_table voidP)) (a2 (alloc_table voidP)))
  (= (free_extends1 a1 a2)
  (forall ((p (pointer voidP)))
  (! (=> (not (allocated voidP1 (t2tb3 a1) (t2tb p)))
     (and (= (offset_min1 a1 p) (offset_min1 a2 p))
     (= (offset_max1 a1 p) (offset_max1 a2 p)))) :pattern ((valid1
  a1 p)) :pattern ((valid1 a2
  p)) :pattern ((offset_min1 a1 p)) :pattern ((offset_min1 a2 p)) :pattern (
  (offset_max1 a1 p)) :pattern ((offset_max1 a2 p)) )))))

;; free_extends_def
  (assert
  (forall ((t4 ty))
  (forall ((a1 uni) (a2 uni))
  (and
  (=> (free_extends t4 a1 a2)
  (forall ((p uni))
  (! (=> (not (allocated t4 a1 p))
     (and (= (offset_min t4 a1 p) (offset_min t4 a2 p))
     (= (offset_max t4 a1 p) (offset_max t4 a2 p)))) :pattern ((valid
  t4 a1 p)) :pattern ((valid t4 a2
  p)) :pattern ((offset_min t4 a1 p)) :pattern ((offset_min t4 a2 p)) :pattern (
  (offset_max t4 a1 p)) :pattern ((offset_max t4 a2 p)) )))
  (=>
  (forall ((p uni))
  (! (=> (sort (pointer1 t4) p)
     (=> (not (allocated t4 a1 p))
     (and (= (offset_min t4 a1 p) (offset_min t4 a2 p))
     (= (offset_max t4 a1 p) (offset_max t4 a2 p))))) :pattern ((valid
  t4 a1 p)) :pattern ((valid t4 a2
  p)) :pattern ((offset_min t4 a1 p)) :pattern ((offset_min t4 a2 p)) :pattern (
  (offset_max t4 a1 p)) :pattern ((offset_max t4 a2 p)) )) (free_extends t4
  a1 a2))))))

(declare-fun alloc_block (ty uni uni uni Int) Bool)

(declare-fun alloc_block1 ((alloc_table voidP) (alloc_table voidP)
  (pointer voidP) Int) Bool)

;; alloc_block_def
  (assert
  (forall ((a1 (alloc_table voidP)) (a2 (alloc_table voidP))
  (p (pointer voidP)) (n Int))
  (= (alloc_block1 a1 a2 p n)
  (forall ((q (pointer voidP)))
  (! (and
     (=> (not (same_block1 q p))
     (and (= (offset_min1 a2 q) (offset_min1 a1 q))
     (= (offset_max1 a2 q) (offset_max1 a1 q))))
     (=> (same_block1 q p)
     (and (= (offset_min1 a2 q) (- 0 (sub_pointer voidP1 (t2tb q) (t2tb p))))
     (= (offset_max1 a2 q) (- (- n 1) (sub_pointer voidP1 (t2tb q) (t2tb p))))))) :pattern (
  (offset_min1 a2 q)) :pattern ((offset_min1 a1 q)) :pattern ((offset_max1 a1
                                                              q)) :pattern (
  (offset_max1 a1 q)) )))))

;; alloc_block_def
  (assert
  (forall ((t4 ty))
  (forall ((a1 uni) (a2 uni) (p uni) (n Int))
  (and
  (=> (alloc_block t4 a1 a2 p n)
  (forall ((q uni))
  (! (and
     (=> (not (same_block t4 q p))
     (and (= (offset_min t4 a2 q) (offset_min t4 a1 q))
     (= (offset_max t4 a2 q) (offset_max t4 a1 q))))
     (=> (same_block t4 q p)
     (and (= (offset_min t4 a2 q) (- 0 (sub_pointer t4 q p)))
     (= (offset_max t4 a2 q) (- (- n 1) (sub_pointer t4 q p)))))) :pattern (
  (offset_min t4 a2 q)) :pattern ((offset_min t4 a1 q)) :pattern ((offset_max
                                                                  t4 a1 q)) :pattern (
  (offset_max t4 a1 q)) )))
  (=>
  (forall ((q uni))
  (! (=> (sort (pointer1 t4) q)
     (and
     (=> (not (same_block t4 q p))
     (and (= (offset_min t4 a2 q) (offset_min t4 a1 q))
     (= (offset_max t4 a2 q) (offset_max t4 a1 q))))
     (=> (same_block t4 q p)
     (and (= (offset_min t4 a2 q) (- 0 (sub_pointer t4 q p)))
     (= (offset_max t4 a2 q) (- (- n 1) (sub_pointer t4 q p))))))) :pattern (
  (offset_min t4 a2 q)) :pattern ((offset_min t4 a1 q)) :pattern ((offset_max
                                                                  t4 a1 q)) :pattern (
  (offset_max t4 a1 q)) )) (alloc_block t4 a1 a2 p n))))))

(declare-fun free_block (ty uni uni uni) Bool)

(declare-fun free_block1 ((alloc_table voidP) (alloc_table voidP)
  (pointer voidP)) Bool)

;; free_block_def
  (assert
  (forall ((a1 (alloc_table voidP)) (a2 (alloc_table voidP))
  (p (pointer voidP)))
  (= (free_block1 a1 a2 p)
  (forall ((q (pointer voidP)))
  (! (and
     (=> (not (same_block1 q p))
     (and (= (offset_min1 a2 q) (offset_min1 a1 q))
     (= (offset_max1 a2 q) (offset_max1 a1 q))))
     (=> (same_block1 q p)
     (and (= (offset_min1 a2 q) (- 0 (sub_pointer voidP1 (t2tb q) (t2tb p))))
     (= (offset_max1 a2 q) (- (- 3) (sub_pointer voidP1 (t2tb q) (t2tb p))))))) :pattern (
  (offset_min1 a2 q)) :pattern ((offset_min1 a1 q)) :pattern ((offset_max1 a2
                                                              q)) :pattern (
  (offset_max1 a1 q)) )))))

;; free_block_def
  (assert
  (forall ((t4 ty))
  (forall ((a1 uni) (a2 uni) (p uni))
  (and
  (=> (free_block t4 a1 a2 p)
  (forall ((q uni))
  (! (and
     (=> (not (same_block t4 q p))
     (and (= (offset_min t4 a2 q) (offset_min t4 a1 q))
     (= (offset_max t4 a2 q) (offset_max t4 a1 q))))
     (=> (same_block t4 q p)
     (and (= (offset_min t4 a2 q) (- 0 (sub_pointer t4 q p)))
     (= (offset_max t4 a2 q) (- (- 3) (sub_pointer t4 q p)))))) :pattern (
  (offset_min t4 a2 q)) :pattern ((offset_min t4 a1 q)) :pattern ((offset_max
                                                                  t4 a2 q)) :pattern (
  (offset_max t4 a1 q)) )))
  (=>
  (forall ((q uni))
  (! (=> (sort (pointer1 t4) q)
     (and
     (=> (not (same_block t4 q p))
     (and (= (offset_min t4 a2 q) (offset_min t4 a1 q))
     (= (offset_max t4 a2 q) (offset_max t4 a1 q))))
     (=> (same_block t4 q p)
     (and (= (offset_min t4 a2 q) (- 0 (sub_pointer t4 q p)))
     (= (offset_max t4 a2 q) (- (- 3) (sub_pointer t4 q p))))))) :pattern (
  (offset_min t4 a2 q)) :pattern ((offset_min t4 a1 q)) :pattern ((offset_max
                                                                  t4 a2 q)) :pattern (
  (offset_max t4 a1 q)) )) (free_block t4 a1 a2 p))))))

(declare-fun switch_blocks (ty uni uni uni uni Int) Bool)

;; switch_blocks_def
  (assert
  (forall ((a1 (alloc_table voidP)) (a2 (alloc_table voidP))
  (p (pointer voidP)) (q (pointer voidP)) (n Int))
  (= (switch_blocks voidP1 (t2tb3 a1) (t2tb3 a2) (t2tb p) (t2tb q) n)
  (forall ((r (pointer voidP)))
  (! (and
     (=> (and (not (same_block1 r p)) (not (same_block1 r q)))
     (and (= (offset_min1 a2 r) (offset_min1 a1 r))
     (= (offset_max1 a2 r) (offset_max1 a1 r))))
     (and
     (=> (same_block1 r p)
     (and (= (offset_min1 a2 r) (- 0 (sub_pointer voidP1 (t2tb r) (t2tb p))))
     (= (offset_max1 a2 r) (- (- 3) (sub_pointer voidP1 (t2tb r) (t2tb p))))))
     (=> (same_block1 r q)
     (and (= (offset_min1 a2 r) (- 0 (sub_pointer voidP1 (t2tb r) (t2tb q))))
     (= (offset_max1 a2 r) (- (- n 1) (sub_pointer voidP1 (t2tb r) (t2tb q)))))))) :pattern (
  (offset_min1 a2 r)) :pattern ((offset_min1 a1 r)) :pattern ((offset_max1 a2
                                                              r)) :pattern (
  (offset_max1 a1 r)) )))))

;; switch_blocks_def
  (assert
  (forall ((t4 ty))
  (forall ((a1 uni) (a2 uni) (p uni) (q uni) (n Int))
  (and
  (=> (switch_blocks t4 a1 a2 p q n)
  (forall ((r uni))
  (! (and
     (=> (and (not (same_block t4 r p)) (not (same_block t4 r q)))
     (and (= (offset_min t4 a2 r) (offset_min t4 a1 r))
     (= (offset_max t4 a2 r) (offset_max t4 a1 r))))
     (and
     (=> (same_block t4 r p)
     (and (= (offset_min t4 a2 r) (- 0 (sub_pointer t4 r p)))
     (= (offset_max t4 a2 r) (- (- 3) (sub_pointer t4 r p)))))
     (=> (same_block t4 r q)
     (and (= (offset_min t4 a2 r) (- 0 (sub_pointer t4 r q)))
     (= (offset_max t4 a2 r) (- (- n 1) (sub_pointer t4 r q))))))) :pattern (
  (offset_min t4 a2 r)) :pattern ((offset_min t4 a1 r)) :pattern ((offset_max
                                                                  t4 a2 r)) :pattern (
  (offset_max t4 a1 r)) )))
  (=>
  (forall ((r uni))
  (! (=> (sort (pointer1 t4) r)
     (and
     (=> (and (not (same_block t4 r p)) (not (same_block t4 r q)))
     (and (= (offset_min t4 a2 r) (offset_min t4 a1 r))
     (= (offset_max t4 a2 r) (offset_max t4 a1 r))))
     (and
     (=> (same_block t4 r p)
     (and (= (offset_min t4 a2 r) (- 0 (sub_pointer t4 r p)))
     (= (offset_max t4 a2 r) (- (- 3) (sub_pointer t4 r p)))))
     (=> (same_block t4 r q)
     (and (= (offset_min t4 a2 r) (- 0 (sub_pointer t4 r q)))
     (= (offset_max t4 a2 r) (- (- n 1) (sub_pointer t4 r q)))))))) :pattern (
  (offset_min t4 a2 r)) :pattern ((offset_min t4 a1 r)) :pattern ((offset_max
                                                                  t4 a2 r)) :pattern (
  (offset_max t4 a1 r)) )) (switch_blocks t4 a1 a2 p q n))))))

(declare-fun alloc_blockset (ty uni uni uni) Bool)

;; alloc_blockset_def
  (assert
  (forall ((a1 (alloc_table voidP)) (a2 (alloc_table voidP))
  (q (pset voidP)))
  (= (alloc_blockset voidP1 (t2tb3 a1) (t2tb3 a2) (t2tb4 q))
  (forall ((p (pointer voidP)))
  (! (=>
     (forall ((r (pointer voidP)))
     (=> (in_pset1 r q) (not (same_block1 p r))))
     (and (= (offset_min1 a1 p) (offset_min1 a2 p))
     (= (offset_max1 a1 p) (offset_max1 a2 p)))) :pattern ((valid1
  a1 p)) :pattern ((valid1 a2
  p)) :pattern ((offset_min1 a1 p)) :pattern ((offset_min1 a2 p)) :pattern (
  (offset_max1 a1 p)) :pattern ((offset_max1 a2 p)) )))))

;; alloc_blockset_def
  (assert
  (forall ((t4 ty))
  (forall ((a1 uni) (a2 uni) (q uni))
  (and
  (=> (alloc_blockset t4 a1 a2 q)
  (forall ((p uni))
  (! (=>
     (forall ((r uni))
     (=> (sort (pointer1 t4) r)
     (=> (in_pset t4 r q) (not (same_block t4 p r)))))
     (and (= (offset_min t4 a1 p) (offset_min t4 a2 p))
     (= (offset_max t4 a1 p) (offset_max t4 a2 p)))) :pattern ((valid
  t4 a1 p)) :pattern ((valid t4 a2
  p)) :pattern ((offset_min t4 a1 p)) :pattern ((offset_min t4 a2 p)) :pattern (
  (offset_max t4 a1 p)) :pattern ((offset_max t4 a2 p)) )))
  (=>
  (forall ((p uni))
  (! (=> (sort (pointer1 t4) p)
     (=> (forall ((r uni)) (=> (in_pset t4 r q) (not (same_block t4 p r))))
     (and (= (offset_min t4 a1 p) (offset_min t4 a2 p))
     (= (offset_max t4 a1 p) (offset_max t4 a2 p))))) :pattern ((valid
  t4 a1 p)) :pattern ((valid t4 a2
  p)) :pattern ((offset_min t4 a1 p)) :pattern ((offset_min t4 a2 p)) :pattern (
  (offset_max t4 a1 p)) :pattern ((offset_max t4 a2 p)) )) (alloc_blockset t4
  a1 a2 q))))))

(declare-fun tag_extends (ty uni uni) Bool)

(declare-fun tag_extends1 ((Array (pointer voidP) (tag_id voidP))
  (Array (pointer voidP) (tag_id voidP))) Bool)

;; tag_extends_def
  (assert
  (forall ((t11 (Array (pointer voidP) (tag_id voidP)))
  (t21 (Array (pointer voidP) (tag_id voidP))))
  (= (tag_extends1 t11 t21)
  (forall ((p (pointer voidP)))
  (=> (not (= (select t11 p) bottom_tag1)) (= (select t21 p) (select t11 p)))))))

;; tag_extends_def
  (assert
  (forall ((t4 ty))
  (forall ((t11 uni) (t21 uni))
  (and
  (=> (tag_extends t4 t11 t21)
  (forall ((p uni))
  (=> (not (= (get (tag_id1 t4) (pointer1 t4) t11 p) (bottom_tag t4)))
  (= (get (tag_id1 t4) (pointer1 t4) t21 p) (get (tag_id1 t4) (pointer1 t4)
                                            t11 p)))))
  (=>
  (forall ((p uni))
  (=> (sort (pointer1 t4) p)
  (=> (not (= (get (tag_id1 t4) (pointer1 t4) t11 p) (bottom_tag t4)))
  (= (get (tag_id1 t4) (pointer1 t4) t21 p) (get (tag_id1 t4) (pointer1 t4)
                                            t11 p)))))
  (tag_extends t4 t11 t21))))))

(declare-fun alloc_tag_blockset (ty uni uni uni) Bool)

;; alloc_tag_blockset_def
  (assert
  (forall ((t11 (Array (pointer voidP) (tag_id voidP)))
  (t21 (Array (pointer voidP) (tag_id voidP))) (q (pset voidP)))
  (= (alloc_tag_blockset voidP1 (t2tb1 t11) (t2tb1 t21) (t2tb4 q))
  (forall ((p (pointer voidP)))
  (! (=> (not (= (select t11 p) bottom_tag1))
     (= (select t21 p) (select t11 p))) :pattern ((select t11 p)) :pattern ((select t21 p)) )))))

;; alloc_tag_blockset_def
  (assert
  (forall ((t4 ty))
  (forall ((t11 uni) (t21 uni) (q uni))
  (and
  (=> (alloc_tag_blockset t4 t11 t21 q)
  (forall ((p uni))
  (! (=> (not (= (get (tag_id1 t4) (pointer1 t4) t11 p) (bottom_tag t4)))
     (= (get (tag_id1 t4) (pointer1 t4) t21 p) (get (tag_id1 t4)
                                               (pointer1 t4) t11 p))) :pattern (
  (get (tag_id1 t4) (pointer1 t4) t11 p)) :pattern ((get (tag_id1 t4)
                                                    (pointer1 t4) t21 p)) )))
  (=>
  (forall ((p uni))
  (! (=> (sort (pointer1 t4) p)
     (=> (not (= (get (tag_id1 t4) (pointer1 t4) t11 p) (bottom_tag t4)))
     (= (get (tag_id1 t4) (pointer1 t4) t21 p) (get (tag_id1 t4)
                                               (pointer1 t4) t11 p)))) :pattern (
  (get (tag_id1 t4) (pointer1 t4) t11 p)) :pattern ((get (tag_id1 t4)
                                                    (pointer1 t4) t21 p)) ))
  (alloc_tag_blockset t4 t11 t21 q))))))

(declare-fun frame_tag_struct_voidP ((pointer voidP)
  (Array (pointer voidP) (tag_id voidP))
  (Array (pointer voidP) (tag_id voidP))) Bool)

;; frame_tag_struct_voidP_def
  (assert
  (forall ((p (pointer voidP))
  (old_voidP_tag_table (Array (pointer voidP) (tag_id voidP)))
  (voidP_tag_table (Array (pointer voidP) (tag_id voidP))))
  (= (frame_tag_struct_voidP p old_voidP_tag_table voidP_tag_table)
  (tag_extends1 old_voidP_tag_table voidP_tag_table))))

(declare-fun frame_free_struct_voidP ((pointer voidP) (alloc_table voidP)
  (alloc_table voidP)) Bool)

;; frame_free_struct_voidP_def
  (assert
  (forall ((p (pointer voidP)) (old_voidP_alloc_table (alloc_table voidP))
  (voidP_alloc_table (alloc_table voidP)))
  (= (frame_free_struct_voidP p old_voidP_alloc_table voidP_alloc_table)
  (and (free_extends1 old_voidP_alloc_table voidP_alloc_table) (free_block1
  old_voidP_alloc_table voidP_alloc_table p)))))

(declare-fun frame_alloc_struct_voidP ((pointer voidP) Int
  (alloc_table voidP) (alloc_table voidP)) Bool)

;; frame_alloc_struct_voidP_def
  (assert
  (forall ((p (pointer voidP)) (n Int)
  (old_voidP_alloc_table (alloc_table voidP))
  (voidP_alloc_table (alloc_table voidP)))
  (= (frame_alloc_struct_voidP p n old_voidP_alloc_table voidP_alloc_table)
  (and (alloc_extends1 old_voidP_alloc_table voidP_alloc_table) (alloc_block1
  old_voidP_alloc_table voidP_alloc_table p n)))))

(declare-fun typeof_singleton_struct_voidP ((pointer voidP)
  (Array (pointer voidP) (tag_id voidP))) Bool)

;; typeof_singleton_struct_voidP_def
  (assert
  (forall ((p (pointer voidP))
  (voidP_tag_table (Array (pointer voidP) (tag_id voidP))))
  (= (typeof_singleton_struct_voidP p voidP_tag_table)
  (= (select voidP_tag_table p) voidP_tag))))

(declare-fun typeof_struct_voidP ((pointer voidP) Int Int
  (Array (pointer voidP) (tag_id voidP))) Bool)

;; typeof_struct_voidP_def
  (assert
  (forall ((p (pointer voidP)) (l Int) (r Int)
  (voidP_tag_table (Array (pointer voidP) (tag_id voidP))))
  (= (typeof_struct_voidP p l r voidP_tag_table)
  (and (= (select voidP_tag_table p) voidP_tag)
  (forall ((i Int))
  (=> (and (<= l i) (< i r))
  (= (select voidP_tag_table (shift1 p i)) voidP_tag)))))))

(declare-fun instanceof_struct_voidP ((pointer voidP) Int Int
  (Array (pointer voidP) (tag_id voidP))) Bool)

;; instanceof_struct_voidP_def
  (assert
  (forall ((p (pointer voidP)) (l Int) (r Int)
  (voidP_tag_table (Array (pointer voidP) (tag_id voidP))))
  (= (instanceof_struct_voidP p l r voidP_tag_table)
  (and (instanceof1 voidP_tag_table p voidP_tag)
  (forall ((i Int))
  (=> (and (<= l i) (< i r)) (instanceof1 voidP_tag_table (shift1 p i)
  voidP_tag)))))))

(declare-fun right_valid_struct_voidP ((pointer voidP) Int
  (alloc_table voidP)) Bool)

;; right_valid_struct_voidP_def
  (assert
  (forall ((p (pointer voidP)) (b Int)
  (voidP_alloc_table (alloc_table voidP)))
  (= (right_valid_struct_voidP p b voidP_alloc_table)
  (>= (offset_max1 voidP_alloc_table p) b))))

(declare-fun left_valid_struct_voidP ((pointer voidP) Int
  (alloc_table voidP)) Bool)

;; left_valid_struct_voidP_def
  (assert
  (forall ((p (pointer voidP)) (a Int)
  (voidP_alloc_table (alloc_table voidP)))
  (= (left_valid_struct_voidP p a voidP_alloc_table)
  (<= (offset_min1 voidP_alloc_table p) a))))

(declare-fun strict_left_valid_struct_voidP ((pointer voidP) Int
  (alloc_table voidP)) Bool)

;; strict_left_valid_struct_voidP_def
  (assert
  (forall ((p (pointer voidP)) (a Int)
  (voidP_alloc_table (alloc_table voidP)))
  (= (strict_left_valid_struct_voidP p a voidP_alloc_table)
  (= (offset_min1 voidP_alloc_table p) a))))

(declare-fun valid_struct_voidP ((pointer voidP) Int Int
  (alloc_table voidP)) Bool)

;; valid_struct_voidP_def
  (assert
  (forall ((p (pointer voidP)) (a Int) (b Int)
  (voidP_alloc_table (alloc_table voidP)))
  (= (valid_struct_voidP p a b voidP_alloc_table)
  (and (<= (offset_min1 voidP_alloc_table p) a)
  (>= (offset_max1 voidP_alloc_table p) b)))))

(declare-fun strict_valid_struct_voidP ((pointer voidP) Int Int
  (alloc_table voidP)) Bool)

;; strict_valid_struct_voidP_def
  (assert
  (forall ((p (pointer voidP)) (a Int) (b Int)
  (voidP_alloc_table (alloc_table voidP)))
  (= (strict_valid_struct_voidP p a b voidP_alloc_table)
  (and (= (offset_min1 voidP_alloc_table p) a)
  (= (offset_max1 voidP_alloc_table p) b)))))

(declare-fun intP_tag () (tag_id voidP))

;; IntP_parenttag_voidP
  (assert (parenttag1 intP_tag voidP_tag))

;; IntP_is_final
  (assert
  (forall ((voidP_tag_table (Array (pointer voidP) (tag_id voidP))))
  (forall ((p (pointer voidP)))
  (=> (instanceof1 voidP_tag_table p intP_tag)
  (= (select voidP_tag_table p) intP_tag)))))

(declare-fun frame_tag_struct_intP ((pointer voidP)
  (Array (pointer voidP) (tag_id voidP))
  (Array (pointer voidP) (tag_id voidP))) Bool)

;; frame_tag_struct_intP_def
  (assert
  (forall ((p (pointer voidP))
  (old_voidP_tag_table (Array (pointer voidP) (tag_id voidP)))
  (voidP_tag_table (Array (pointer voidP) (tag_id voidP))))
  (= (frame_tag_struct_intP p old_voidP_tag_table voidP_tag_table)
  (tag_extends1 old_voidP_tag_table voidP_tag_table))))

(declare-fun frame_free_struct_intP ((pointer voidP) (alloc_table voidP)
  (alloc_table voidP)) Bool)

;; frame_free_struct_intP_def
  (assert
  (forall ((p (pointer voidP)) (old_voidP_alloc_table (alloc_table voidP))
  (voidP_alloc_table (alloc_table voidP)))
  (= (frame_free_struct_intP p old_voidP_alloc_table voidP_alloc_table)
  (and (free_extends1 old_voidP_alloc_table voidP_alloc_table) (free_block1
  old_voidP_alloc_table voidP_alloc_table p)))))

(declare-fun frame_alloc_struct_intP ((pointer voidP) Int (alloc_table voidP)
  (alloc_table voidP)) Bool)

;; frame_alloc_struct_intP_def
  (assert
  (forall ((p (pointer voidP)) (n Int)
  (old_voidP_alloc_table (alloc_table voidP))
  (voidP_alloc_table (alloc_table voidP)))
  (= (frame_alloc_struct_intP p n old_voidP_alloc_table voidP_alloc_table)
  (and (alloc_extends1 old_voidP_alloc_table voidP_alloc_table) (alloc_block1
  old_voidP_alloc_table voidP_alloc_table p n)))))

(declare-fun typeof_singleton_struct_intP ((pointer voidP)
  (Array (pointer voidP) (tag_id voidP))) Bool)

;; typeof_singleton_struct_intP_def
  (assert
  (forall ((p (pointer voidP))
  (voidP_tag_table (Array (pointer voidP) (tag_id voidP))))
  (= (typeof_singleton_struct_intP p voidP_tag_table)
  (= (select voidP_tag_table p) intP_tag))))

(declare-fun typeof_struct_intP ((pointer voidP) Int Int
  (Array (pointer voidP) (tag_id voidP))) Bool)

;; typeof_struct_intP_def
  (assert
  (forall ((p (pointer voidP)) (l Int) (r Int)
  (voidP_tag_table (Array (pointer voidP) (tag_id voidP))))
  (= (typeof_struct_intP p l r voidP_tag_table)
  (and (= (select voidP_tag_table p) intP_tag)
  (forall ((i Int))
  (=> (and (<= l i) (< i r))
  (= (select voidP_tag_table (shift1 p i)) intP_tag)))))))

(declare-fun instanceof_struct_intP ((pointer voidP) Int Int
  (Array (pointer voidP) (tag_id voidP))) Bool)

;; instanceof_struct_intP_def
  (assert
  (forall ((p (pointer voidP)) (l Int) (r Int)
  (voidP_tag_table (Array (pointer voidP) (tag_id voidP))))
  (= (instanceof_struct_intP p l r voidP_tag_table)
  (and (instanceof1 voidP_tag_table p intP_tag)
  (forall ((i Int))
  (=> (and (<= l i) (< i r)) (instanceof1 voidP_tag_table (shift1 p i)
  intP_tag)))))))

;; IntP_int
  (assert (= (int_of_tag1 intP_tag) 4))

(declare-fun minimum ((pointer voidP) Int Int Int
  (Array (pointer voidP) t)) Bool)

;; minimum_def
  (assert
  (forall ((a_9 (pointer voidP)) (m_9 Int) (n_9 Int) (k_6 Int)
  (intP_intM_a_9_10_at_L (Array (pointer voidP) t)))
  (= (minimum a_9 m_9 n_9 k_6 intP_intM_a_9_10_at_L)
  (forall ((i Int))
  (=> (and (<= m_9 i) (< i n_9)) (infix_lseq1
  (select intP_intM_a_9_10_at_L (shift1 a_9 k_6))
  (select intP_intM_a_9_10_at_L (shift1 a_9 i))))))))

(declare-fun count ((pointer voidP) Int Int Int
  (Array (pointer voidP) t)) Int)

;; Count_base
  (assert
  (forall ((intP_intM_a_2_at_L (Array (pointer voidP) t)))
  (forall ((a_0_0 (pointer voidP)))
  (forall ((m_0_0 Int))
  (forall ((n_2_0 Int))
  (forall ((p_0 Int))
  (=> (>= m_0_0 n_2_0)
  (= (count a_0_0 m_0_0 n_2_0 p_0 intP_intM_a_2_at_L) 0))))))))

;; Count_split
  (assert
  (forall ((intP_intM_a_2_at_L (Array (pointer voidP) t)))
  (forall ((a_1 (pointer voidP)))
  (forall ((m_1 Int))
  (forall ((n_3 Int))
  (forall ((k_1 Int))
  (forall ((p_1 Int))
  (=> (and (<= m_1 n_3) (<= n_3 k_1))
  (= (count a_1 m_1 k_1 p_1 intP_intM_a_2_at_L) (+ (count a_1 m_1 n_3 p_1
                                                   intP_intM_a_2_at_L) 
  (count a_1 n_3 k_1 p_1 intP_intM_a_2_at_L)))))))))))

;; Count_one
  (assert
  (forall ((intP_intM_a_2_at_L (Array (pointer voidP) t)))
  (forall ((a_2 (pointer voidP)))
  (forall ((m_2 Int))
  (forall ((p_2 Int))
  (= (count a_2 m_2 (+ m_2 1) p_2 intP_intM_a_2_at_L) (ite (= (to_int2
                                                              (select intP_intM_a_2_at_L 
                                                              (shift1 a_2
                                                              m_2))) p_2)
                                                      1 0)))))))

(declare-fun count_sum ((pointer voidP) Int Int Int Int
  (Array (pointer voidP) t)) Int)

;; count_sum_def
  (assert
  (forall ((a_10 (pointer voidP)) (i_0 Int) (j Int) (n_10 Int) (p_7 Int)
  (intP_intM_a_10_11_at_L (Array (pointer voidP) t)))
  (= (count_sum a_10 i_0 j n_10 p_7 intP_intM_a_10_11_at_L) (+ (+ (+ (+ 
  (count a_10 0 i_0 p_7 intP_intM_a_10_11_at_L) (count a_10 i_0 (+ i_0 1) p_7
                                                intP_intM_a_10_11_at_L)) 
  (count a_10 (+ i_0 1) j p_7 intP_intM_a_10_11_at_L)) (count a_10 j (+ j 1)
                                                       p_7
                                                       intP_intM_a_10_11_at_L)) 
  (count a_10 (+ j 1) n_10 p_7 intP_intM_a_10_11_at_L)))))

(declare-fun count_splitted ((pointer voidP) Int Int Int
  (Array (pointer voidP) t)) Bool)

;; count_splitted_def
  (assert
  (forall ((a_11 (pointer voidP)) (i_1 Int) (j_0 Int) (n_11 Int)
  (intP_intM_a_11_12_at_L (Array (pointer voidP) t)))
  (= (count_splitted a_11 i_1 j_0 n_11 intP_intM_a_11_12_at_L)
  (forall ((p_8 Int))
  (and
  (= (count a_11 0 n_11 p_8 intP_intM_a_11_12_at_L) (+ (count a_11 0 i_1 p_8
                                                       intP_intM_a_11_12_at_L) 
  (count a_11 i_1 n_11 p_8 intP_intM_a_11_12_at_L)))
  (and
  (= (count a_11 i_1 n_11 p_8 intP_intM_a_11_12_at_L) (+ (count a_11 i_1
                                                         (+ i_1 1) p_8
                                                         intP_intM_a_11_12_at_L) 
  (count a_11 (+ i_1 1) n_11 p_8 intP_intM_a_11_12_at_L)))
  (and
  (= (count a_11 (+ i_1 1) n_11 p_8 intP_intM_a_11_12_at_L) (+ (count a_11
                                                               (+ i_1 1) j_0
                                                               p_8
                                                               intP_intM_a_11_12_at_L) 
  (count a_11 j_0 n_11 p_8 intP_intM_a_11_12_at_L)))
  (and
  (= (count a_11 j_0 n_11 p_8 intP_intM_a_11_12_at_L) (+ (count a_11 j_0
                                                         (+ j_0 1) p_8
                                                         intP_intM_a_11_12_at_L) 
  (count a_11 (+ j_0 1) n_11 p_8 intP_intM_a_11_12_at_L)))
  (and
  (= (count a_11 (+ i_1 1) n_11 p_8 intP_intM_a_11_12_at_L) (+ (+ (count a_11
                                                                  (+ i_1 1)
                                                                  j_0 p_8
                                                                  intP_intM_a_11_12_at_L) 
  (count a_11 j_0 (+ j_0 1) p_8 intP_intM_a_11_12_at_L)) (count a_11
                                                         (+ j_0 1) n_11 p_8
                                                         intP_intM_a_11_12_at_L)))
  (and
  (= (count a_11 i_1 n_11 p_8 intP_intM_a_11_12_at_L) (+ (+ (+ (count a_11
                                                               i_1 (+ i_1 1)
                                                               p_8
                                                               intP_intM_a_11_12_at_L) 
  (count a_11 (+ i_1 1) j_0 p_8 intP_intM_a_11_12_at_L)) (count a_11 j_0
                                                         (+ j_0 1) p_8
                                                         intP_intM_a_11_12_at_L)) 
  (count a_11 (+ j_0 1) n_11 p_8 intP_intM_a_11_12_at_L)))
  (and
  (= (count a_11 0 n_11 p_8 intP_intM_a_11_12_at_L) (+ (+ (+ (+ (count a_11 0
                                                                i_1 p_8
                                                                intP_intM_a_11_12_at_L) 
  (count a_11 i_1 (+ i_1 1) p_8 intP_intM_a_11_12_at_L)) (count a_11
                                                         (+ i_1 1) j_0 p_8
                                                         intP_intM_a_11_12_at_L)) 
  (count a_11 j_0 (+ j_0 1) p_8 intP_intM_a_11_12_at_L)) (count a_11
                                                         (+ j_0 1) n_11 p_8
                                                         intP_intM_a_11_12_at_L)))
  (= (count a_11 0 n_11 p_8 intP_intM_a_11_12_at_L) (count_sum a_11 i_1 j_0
                                                    n_11 p_8
                                                    intP_intM_a_11_12_at_L)))))))))))))

(declare-fun count_saved ((pointer voidP) Int Int (Array (pointer voidP) t)
  (Array (pointer voidP) t)) Bool)

;; count_saved_def
  (assert
  (forall ((a_8 (pointer voidP)) (m_8 Int) (n_8 Int)
  (intP_intM_a_8_5_at_L2 (Array (pointer voidP) t))
  (intP_intM_a_8_5_at_L1 (Array (pointer voidP) t)))
  (= (count_saved a_8 m_8 n_8 intP_intM_a_8_5_at_L2 intP_intM_a_8_5_at_L1)
  (forall ((p_3 Int))
  (= (count a_8 m_8 n_8 p_3 intP_intM_a_8_5_at_L1) (count a_8 m_8 n_8 p_3
                                                   intP_intM_a_8_5_at_L2))))))

(declare-fun pset_range (ty uni Int Int) uni)

;; pset_range_sort
  (assert
  (forall ((t4 ty))
  (forall ((x uni) (x1 Int) (x2 Int)) (sort (pset1 t4)
  (pset_range t4 x x1 x2)))))

(declare-fun pset_range1 ((pset voidP) Int Int) (pset voidP))

;; In_pset_range
  (assert
  (forall ((p (pointer voidP)))
  (forall ((q (pset voidP)))
  (forall ((a Int) (b Int))
  (! (= (in_pset1 p (pset_range1 q a b))
     (exists ((i Int))
     (exists ((r (pointer voidP)))
     (and (<= a i) (and (<= i b) (and (in_pset1 r q) (= p (shift1 r i)))))))) :pattern ((in_pset1
  p (pset_range1 q a b))) )))))

;; In_pset_range
  (assert
  (forall ((t4 ty))
  (forall ((p uni))
  (=> (sort (pointer1 t4) p)
  (forall ((q uni))
  (forall ((a Int) (b Int))
  (! (and
     (=> (in_pset t4 p (pset_range t4 q a b))
     (exists ((i Int))
     (exists ((r uni))
     (and (sort (pointer1 t4) r)
     (and (<= a i)
     (and (<= i b) (and (in_pset t4 r q) (= p (shift t4 r i)))))))))
     (=>
     (exists ((i Int))
     (exists ((r uni))
     (and (<= a i)
     (and (<= i b) (and (in_pset t4 r q) (= p (shift t4 r i))))))) (in_pset
     t4 p (pset_range t4 q a b)))) :pattern ((in_pset
  t4 p (pset_range t4 q a b))) )))))))

;; In_pset_range_singleton
  (assert
  (forall ((p (pointer voidP)))
  (forall ((q (pointer voidP)))
  (forall ((a Int) (b Int))
  (! (= (in_pset1 p (pset_range1 (pset_singleton1 q) a b))
     (and (same_block1 p q)
     (and (<= a (sub_pointer voidP1 (t2tb p) (t2tb q)))
     (<= (sub_pointer voidP1 (t2tb p) (t2tb q)) b)))) :pattern ((in_pset1
  p (pset_range1 (pset_singleton1 q) a b))) )))))

;; In_pset_range_singleton
  (assert
  (forall ((t4 ty))
  (forall ((p uni))
  (forall ((q uni))
  (forall ((a Int) (b Int))
  (! (= (in_pset t4 p (pset_range t4 (pset_singleton t4 q) a b))
     (and (same_block t4 p q)
     (and (<= a (sub_pointer t4 p q)) (<= (sub_pointer t4 p q) b)))) :pattern ((in_pset
  t4 p (pset_range t4 (pset_singleton t4 q) a b))) ))))))

(declare-fun not_assigns (ty ty uni uni uni uni uni) Bool)

;; not_assigns_def
  (assert
  (forall ((a1 (alloc_table voidP)) (a2 (alloc_table voidP))
  (m1 (Array (pointer voidP) (tag_id voidP)))
  (m2 (Array (pointer voidP) (tag_id voidP))) (l (pset voidP)))
  (= (not_assigns (tag_id1 voidP1) voidP1 (t2tb3 a1) (t2tb3 a2) (t2tb1 m1)
  (t2tb1 m2) (t2tb4 l))
  (forall ((p (pointer voidP)))
  (! (=> (and (valid1 a1 p) (valid1 a2 p))
     (=> (not (in_pset1 p l)) (= (select m2 p) (select m1 p)))) :pattern ((in_pset1
  p l)) :pattern ((select m2 p)) :pattern ((select m1 p)) )))))

(declare-fun t2tb5 ((Array (pointer voidP) t)) uni)

;; t2tb_sort
  (assert
  (forall ((x (Array (pointer voidP) t))) (sort (map1 (pointer1 voidP1) t1)
  (t2tb5 x))))

(declare-fun tb2t5 (uni) (Array (pointer voidP) t))

;; BridgeL
  (assert
  (forall ((i (Array (pointer voidP) t)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (map1 (pointer1 voidP1) t1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern (
  (t2tb5 (tb2t5 j))) )))

;; not_assigns_def
  (assert
  (forall ((a1 (alloc_table voidP)) (a2 (alloc_table voidP))
  (m1 (Array (pointer voidP) t)) (m2 (Array (pointer voidP) t))
  (l (pset voidP)))
  (= (not_assigns t1 voidP1 (t2tb3 a1) (t2tb3 a2) (t2tb5 m1) (t2tb5 m2)
  (t2tb4 l))
  (forall ((p (pointer voidP)))
  (! (=> (and (valid1 a1 p) (valid1 a2 p))
     (=> (not (in_pset1 p l)) (= (select m2 p) (select m1 p)))) :pattern ((in_pset1
  p l)) :pattern ((select m2 p)) :pattern ((select m1 p)) )))))

;; not_assigns_def
  (assert
  (forall ((v ty))
  (forall ((a1 (alloc_table voidP)) (a2 (alloc_table voidP)) (m1 uni)
  (m2 uni) (l (pset voidP)))
  (= (not_assigns v voidP1 (t2tb3 a1) (t2tb3 a2) m1 m2 (t2tb4 l))
  (forall ((p (pointer voidP)))
  (! (=> (and (valid1 a1 p) (valid1 a2 p))
     (=> (not (in_pset1 p l))
     (= (get v (pointer1 voidP1) m2 (t2tb p)) (get v (pointer1 voidP1) m1
                                              (t2tb p))))) :pattern ((in_pset1
  p
  l)) :pattern ((get v (pointer1 voidP1) m2 (t2tb p))) :pattern ((get v
                                                                 (pointer1
                                                                 voidP1) m1
                                                                 (t2tb p))) ))))))

;; not_assigns_def
  (assert
  (forall ((t4 ty) (v ty))
  (forall ((a1 uni) (a2 uni) (m1 uni) (m2 uni) (l uni))
  (and
  (=> (not_assigns v t4 a1 a2 m1 m2 l)
  (forall ((p uni))
  (! (=> (and (valid t4 a1 p) (valid t4 a2 p))
     (=> (not (in_pset t4 p l))
     (= (get v (pointer1 t4) m2 p) (get v (pointer1 t4) m1 p)))) :pattern ((in_pset
  t4 p
  l)) :pattern ((get v (pointer1 t4) m2 p)) :pattern ((get v (pointer1 t4) m1
                                                      p)) )))
  (=>
  (forall ((p uni))
  (! (=> (sort (pointer1 t4) p)
     (=> (and (valid t4 a1 p) (valid t4 a2 p))
     (=> (not (in_pset t4 p l))
     (= (get v (pointer1 t4) m2 p) (get v (pointer1 t4) m1 p))))) :pattern ((in_pset
  t4 p
  l)) :pattern ((get v (pointer1 t4) m2 p)) :pattern ((get v (pointer1 t4) m1
                                                      p)) ))
  (not_assigns v t4 a1 a2 m1 m2 l))))))

;; Not_assigns_refl
  (assert
  (forall ((t4 ty) (v ty))
  (forall ((a1 uni))
  (forall ((a2 uni))
  (forall ((m uni))
  (forall ((l uni)) (! (not_assigns v t4 a1 a2 m m l) :pattern ((not_assigns
  v t4 a1 a2 m m l)) )))))))

;; Not_assigns_trans
  (assert
  (forall ((t4 ty) (v ty))
  (forall ((a1 uni))
  (forall ((a2 uni))
  (forall ((m1 uni))
  (forall ((m2 uni))
  (forall ((m3 uni))
  (forall ((l uni))
  (! (=> (not_assigns v t4 a1 a2 m1 m2 l)
     (=> (not_assigns v t4 a1 a2 m2 m3 l) (not_assigns v t4 a1 a2 m1 m3 l))) :pattern ((not_assigns
  v t4 a1 a2 m1 m2 l) (not_assigns v t4 a1 a2 m2 m3
  l)) :pattern ((not_assigns v t4 a1 a2 m1 m3 l)) )))))))))

(declare-fun ordered ((pointer voidP) Int Int
  (Array (pointer voidP) t)) Bool)

;; Ordered_base
  (assert
  (forall ((intP_intM_a_3_3_at_L (Array (pointer voidP) t)))
  (forall ((a_4 (pointer voidP)))
  (forall ((m_4 Int))
  (forall ((n_5 Int))
  (=> (>= m_4 n_5) (ordered a_4 m_4 n_5 intP_intM_a_3_3_at_L)))))))

;; Ordered_split
  (assert
  (forall ((intP_intM_a_3_3_at_L (Array (pointer voidP) t)))
  (forall ((a_5 (pointer voidP)))
  (forall ((m_5 Int))
  (forall ((k_2 Int))
  (forall ((n_6 Int))
  (=
  (=> (and (<= m_5 n_6) (<= n_6 k_2)) (ordered a_5 m_5 k_2
  intP_intM_a_3_3_at_L))
  (and (ordered a_5 m_5 n_6 intP_intM_a_3_3_at_L) (ordered a_5 n_6 k_2
  intP_intM_a_3_3_at_L)))))))))

;; Ordered_two
  (assert
  (forall ((intP_intM_a_3_3_at_L (Array (pointer voidP) t)))
  (forall ((a_6 (pointer voidP)))
  (forall ((m_6 Int))
  (= (ordered a_6 m_6 (+ m_6 1) intP_intM_a_3_3_at_L) (infix_lseq1
  (select intP_intM_a_3_3_at_L (shift1 a_6 m_6))
  (select intP_intM_a_3_3_at_L (shift1 a_6 (+ m_6 1)))))))))

(assert
;; WP_parameter_sort_ensures_default
 ;; File "/home/debian/mfsp/examples/auto-av/selsort.c", line 113, characters 5-24
  (not
  (forall ((a_0 (pointer voidP)) (n_11_0 t)
  (intP_intM_a_13 (Array (pointer voidP) t))
  (voidP_a_13_alloc_table (alloc_table voidP))
  (voidP_a_13_tag_table (Array (pointer voidP) (tag_id voidP))))
  (=>
  (and
  (=>
  (<= (offset_min1 voidP_a_13_alloc_table a_0) (offset_max1
                                               voidP_a_13_alloc_table a_0))
  (and (= (select voidP_a_13_tag_table a_0) intP_tag)
  (forall ((i Int))
  (=>
  (and (<= (offset_min1 voidP_a_13_alloc_table a_0) i)
  (< i (offset_max1 voidP_a_13_alloc_table a_0)))
  (= (select voidP_a_13_tag_table (shift1 a_0 i)) intP_tag)))))
  (and (infix_gteq1 n_11_0 (of_int1 0))
  (=> (<= 0 (+ (to_int2 n_11_0) (- 1)))
  (and (<= (offset_min1 voidP_a_13_alloc_table a_0) 0)
  (>= (offset_max1 voidP_a_13_alloc_table a_0) (+ (to_int2 n_11_0) (- 1)))))))
  (forall ((o t))
  (=> (= (to_int2 o) 0)
  (forall ((i_2 t))
  (=> (= i_2 o)
  (forall ((i_21 t) (voidP_aLiter_20_alloc_table (alloc_table voidP))
  (voidP_aLiter_20_tag_table (Array (pointer voidP) (tag_id voidP)))
  (intP_intM_aLiter_20 (Array (pointer voidP) t))
  (intP_intM_a_131 (Array (pointer voidP) t)))
  (=>
  (and (ordered a_0 0 (+ (to_int2 i_21) (- 1)) intP_intM_a_131)
  (and
  (=> (infix_gt1 i_21 (of_int1 0))
  (forall ((i Int))
  (=> (and (<= (to_int2 i_21) i) (< i (to_int2 n_11_0))) (infix_lseq1
  (select intP_intM_a_131 (shift1 a_0 (- (to_int2 i_21) 1)))
  (select intP_intM_a_131 (shift1 a_0 i))))))
  (and
  (forall ((p_3 Int))
  (= (count a_0 0 (to_int2 n_11_0) p_3 intP_intM_a_131) (count a_0 0
                                                        (to_int2 n_11_0) p_3
                                                        intP_intM_a_13)))
  (and (infix_lseq1 (of_int1 0) i_21) (infix_lseq1 i_21 n_11_0)))))
  (forall ((result Bool))
  (=> (= (= result true) (< (to_int2 i_21) (to_int2 n_11_0)))
  (=> (= result true)
  (forall ((min_pos t))
  (=> (= min_pos i_21)
  (forall ((o1 t))
  (=> (= (to_int2 o1) 1)
  (forall ((o2 t))
  (=> (= (to_int2 o2) (+ (to_int2 i_21) (to_int2 o1)))
  (forall ((j_1 t))
  (=> (= j_1 o2)
  (forall ((j_11 t) (min_pos1 t))
  (=>
  (and
  (forall ((i Int))
  (=> (and (<= (to_int2 i_21) i) (< i (to_int2 j_11))) (infix_lseq1
  (select intP_intM_a_131 (shift1 a_0 (to_int2 min_pos1)))
  (select intP_intM_a_131 (shift1 a_0 i)))))
  (and (and (infix_lseq1 i_21 min_pos1) (infix_ls1 min_pos1 n_11_0))
  (and (<= (+ (to_int2 i_21) 1) (to_int2 j_11)) (infix_lseq1 j_11 n_11_0))))
  (forall ((result1 Bool))
  (=> (= (= result1 true) (< (to_int2 j_11) (to_int2 n_11_0)))
  (=> (not (= result1 true))
  (=> (not (= min_pos1 i_21))
  (=>
  (forall ((p_8 Int))
  (and
  (= (count a_0 0 (to_int2 n_11_0) p_8 intP_intM_a_131) (+ (count a_0 0
                                                           (to_int2 i_21) p_8
                                                           intP_intM_a_131) 
  (count a_0 (to_int2 i_21) (to_int2 n_11_0) p_8 intP_intM_a_131)))
  (and
  (= (count a_0 (to_int2 i_21) (to_int2 n_11_0) p_8 intP_intM_a_131) (+ 
  (count a_0 (to_int2 i_21) (+ (to_int2 i_21) 1) p_8 intP_intM_a_131) 
  (count a_0 (+ (to_int2 i_21) 1) (to_int2 n_11_0) p_8 intP_intM_a_131)))
  (and
  (= (count a_0 (+ (to_int2 i_21) 1) (to_int2 n_11_0) p_8 intP_intM_a_131) (+ 
  (count a_0 (+ (to_int2 i_21) 1) (to_int2 min_pos1) p_8 intP_intM_a_131) 
  (count a_0 (to_int2 min_pos1) (to_int2 n_11_0) p_8 intP_intM_a_131)))
  (and
  (= (count a_0 (to_int2 min_pos1) (to_int2 n_11_0) p_8 intP_intM_a_131) (+ 
  (count a_0 (to_int2 min_pos1) (+ (to_int2 min_pos1) 1) p_8 intP_intM_a_131) 
  (count a_0 (+ (to_int2 min_pos1) 1) (to_int2 n_11_0) p_8 intP_intM_a_131)))
  (and
  (= (count a_0 (+ (to_int2 i_21) 1) (to_int2 n_11_0) p_8 intP_intM_a_131) (+ (+ 
  (count a_0 (+ (to_int2 i_21) 1) (to_int2 min_pos1) p_8 intP_intM_a_131) 
  (count a_0 (to_int2 min_pos1) (+ (to_int2 min_pos1) 1) p_8 intP_intM_a_131)) 
  (count a_0 (+ (to_int2 min_pos1) 1) (to_int2 n_11_0) p_8 intP_intM_a_131)))
  (and
  (= (count a_0 (to_int2 i_21) (to_int2 n_11_0) p_8 intP_intM_a_131) (+ (+ (+ 
  (count a_0 (to_int2 i_21) (+ (to_int2 i_21) 1) p_8 intP_intM_a_131) 
  (count a_0 (+ (to_int2 i_21) 1) (to_int2 min_pos1) p_8 intP_intM_a_131)) 
  (count a_0 (to_int2 min_pos1) (+ (to_int2 min_pos1) 1) p_8 intP_intM_a_131)) 
  (count a_0 (+ (to_int2 min_pos1) 1) (to_int2 n_11_0) p_8 intP_intM_a_131)))
  (and
  (= (count a_0 0 (to_int2 n_11_0) p_8 intP_intM_a_131) (+ (+ (+ (+ (count
                                                                    a_0 0
                                                                    (to_int2
                                                                    i_21) p_8
                                                                    intP_intM_a_131) 
  (count a_0 (to_int2 i_21) (+ (to_int2 i_21) 1) p_8 intP_intM_a_131)) 
  (count a_0 (+ (to_int2 i_21) 1) (to_int2 min_pos1) p_8 intP_intM_a_131)) 
  (count a_0 (to_int2 min_pos1) (+ (to_int2 min_pos1) 1) p_8 intP_intM_a_131)) 
  (count a_0 (+ (to_int2 min_pos1) 1) (to_int2 n_11_0) p_8 intP_intM_a_131)))
  (= (count a_0 0 (to_int2 n_11_0) p_8 intP_intM_a_131) (count_sum a_0
                                                        (to_int2 i_21)
                                                        (to_int2 min_pos1)
                                                        (to_int2 n_11_0) p_8
                                                        intP_intM_a_131))))))))))
  (forall ((o3 t2))
  (=> (= (to_int1 o3) (to_int2 n_11_0))
  (let ((o4 (to_int1 o3)))
  (forall ((voidP_aLiter_20_alloc_table1 (alloc_table voidP))
  (voidP_aLiter_20_tag_table1 (Array (pointer voidP) (tag_id voidP))))
  (forall ((o5 (pointer voidP)))
  (=>
  (and (strict_valid_struct_voidP o5 0 (- o4 1) voidP_aLiter_20_alloc_table1)
  (and
  (and (alloc_extends1 voidP_aLiter_20_alloc_table
  voidP_aLiter_20_alloc_table1) (alloc_block1 voidP_aLiter_20_alloc_table
  voidP_aLiter_20_alloc_table1 o5 o4))
  (and (tag_extends1 voidP_aLiter_20_tag_table voidP_aLiter_20_tag_table1)
  (and (allocable1 voidP_aLiter_20_alloc_table o5)
  (and (tag_fresh1 voidP_aLiter_20_tag_table o5)
  (and (= (select voidP_aLiter_20_tag_table1 o5) intP_tag)
  (forall ((i Int))
  (=> (and (<= 0 i) (< i o4))
  (= (select voidP_aLiter_20_tag_table1 (shift1 o5 i)) intP_tag)))))))))
  (forall ((aLiter (pointer voidP)))
  (=> (= aLiter o5)
  (forall ((intP_intM_aLiter_201 (Array (pointer voidP) t)))
  (=>
  (and
  (forall ((p (pointer voidP)))
  (! (=> (valid1 voidP_aLiter_20_alloc_table1 p)
     (=>
     (not (in_pset1 p
     (pset_range1 (pset_singleton1 aLiter) 0 (- (to_int2 n_11_0) 1))))
     (= (select intP_intM_aLiter_201 p) (select intP_intM_aLiter_20 p)))) :pattern ((in_pset1
  p
  (pset_range1 (pset_singleton1 aLiter) 0 (- (to_int2 n_11_0) 1)))) :pattern ((select intP_intM_aLiter_201 p)) :pattern ((select intP_intM_aLiter_20 p)) ))
  (forall ((k_5 Int))
  (=> (and (<= 0 k_5) (< k_5 (to_int2 n_11_0)))
  (= (select intP_intM_aLiter_201 (shift1 aLiter k_5)) (select intP_intM_a_131 
  (shift1 a_0 k_5))))))
  (=>
  (forall ((p_8 Int))
  (and
  (= (count aLiter 0 (to_int2 n_11_0) p_8 intP_intM_aLiter_201) (+ (count
                                                                   aLiter 0
                                                                   (to_int2
                                                                   i_21) p_8
                                                                   intP_intM_aLiter_201) 
  (count aLiter (to_int2 i_21) (to_int2 n_11_0) p_8 intP_intM_aLiter_201)))
  (and
  (= (count aLiter (to_int2 i_21) (to_int2 n_11_0) p_8 intP_intM_aLiter_201) (+ 
  (count aLiter (to_int2 i_21) (+ (to_int2 i_21) 1) p_8 intP_intM_aLiter_201) 
  (count aLiter (+ (to_int2 i_21) 1) (to_int2 n_11_0) p_8
  intP_intM_aLiter_201)))
  (and
  (= (count aLiter (+ (to_int2 i_21) 1) (to_int2 n_11_0) p_8
     intP_intM_aLiter_201) (+ (count aLiter (+ (to_int2 i_21) 1)
                              (to_int2 min_pos1) p_8 intP_intM_aLiter_201) 
  (count aLiter (to_int2 min_pos1) (to_int2 n_11_0) p_8 intP_intM_aLiter_201)))
  (and
  (= (count aLiter (to_int2 min_pos1) (to_int2 n_11_0) p_8
     intP_intM_aLiter_201) (+ (count aLiter (to_int2 min_pos1)
                              (+ (to_int2 min_pos1) 1) p_8
                              intP_intM_aLiter_201) (count aLiter
                                                    (+ (to_int2 min_pos1) 1)
                                                    (to_int2 n_11_0) p_8
                                                    intP_intM_aLiter_201)))
  (and
  (= (count aLiter (+ (to_int2 i_21) 1) (to_int2 n_11_0) p_8
     intP_intM_aLiter_201) (+ (+ (count aLiter (+ (to_int2 i_21) 1)
                                 (to_int2 min_pos1) p_8 intP_intM_aLiter_201) 
  (count aLiter (to_int2 min_pos1) (+ (to_int2 min_pos1) 1) p_8
  intP_intM_aLiter_201)) (count aLiter (+ (to_int2 min_pos1) 1)
                         (to_int2 n_11_0) p_8 intP_intM_aLiter_201)))
  (and
  (= (count aLiter (to_int2 i_21) (to_int2 n_11_0) p_8 intP_intM_aLiter_201) (+ (+ (+ 
  (count aLiter (to_int2 i_21) (+ (to_int2 i_21) 1) p_8 intP_intM_aLiter_201) 
  (count aLiter (+ (to_int2 i_21) 1) (to_int2 min_pos1) p_8
  intP_intM_aLiter_201)) (count aLiter (to_int2 min_pos1)
                         (+ (to_int2 min_pos1) 1) p_8 intP_intM_aLiter_201)) 
  (count aLiter (+ (to_int2 min_pos1) 1) (to_int2 n_11_0) p_8
  intP_intM_aLiter_201)))
  (and
  (= (count aLiter 0 (to_int2 n_11_0) p_8 intP_intM_aLiter_201) (+ (+ (+ (+ 
  (count aLiter 0 (to_int2 i_21) p_8 intP_intM_aLiter_201) (count aLiter
                                                           (to_int2 i_21)
                                                           (+ (to_int2 i_21) 1)
                                                           p_8
                                                           intP_intM_aLiter_201)) 
  (count aLiter (+ (to_int2 i_21) 1) (to_int2 min_pos1) p_8
  intP_intM_aLiter_201)) (count aLiter (to_int2 min_pos1)
                         (+ (to_int2 min_pos1) 1) p_8 intP_intM_aLiter_201)) 
  (count aLiter (+ (to_int2 min_pos1) 1) (to_int2 n_11_0) p_8
  intP_intM_aLiter_201)))
  (= (count aLiter 0 (to_int2 n_11_0) p_8 intP_intM_aLiter_201) (count_sum
                                                                aLiter
                                                                (to_int2
                                                                i_21)
                                                                (to_int2
                                                                min_pos1)
                                                                (to_int2
                                                                n_11_0) p_8
                                                                intP_intM_aLiter_201))))))))))
  (=>
  (forall ((i_2_0 Int))
  (forall ((j_1_0 Int))
  (forall ((p_9 Int))
  (= (count a_0 i_2_0 j_1_0 p_9 intP_intM_a_131) (count aLiter i_2_0 j_1_0
                                                 p_9 intP_intM_aLiter_201)))))
  (=>
  (forall ((p_10 Int))
  (= (count a_0 0 (to_int2 i_21) p_10 intP_intM_a_131) (count aLiter 0
                                                       (to_int2 i_21) p_10
                                                       intP_intM_aLiter_201)))
  (=>
  (forall ((p_11 Int))
  (= (count a_0 (to_int2 i_21) (+ (to_int2 i_21) 1) p_11 intP_intM_a_131) 
  (count aLiter (to_int2 i_21) (+ (to_int2 i_21) 1) p_11
  intP_intM_aLiter_201)))
  (=>
  (forall ((p_12 Int))
  (= (count a_0 (+ (to_int2 i_21) 1) (to_int2 min_pos1) p_12 intP_intM_a_131) 
  (count aLiter (+ (to_int2 i_21) 1) (to_int2 min_pos1) p_12
  intP_intM_aLiter_201)))
  (=>
  (forall ((p_13 Int))
  (= (count a_0 (to_int2 min_pos1) (+ (to_int2 min_pos1) 1) p_13
     intP_intM_a_131) (count aLiter (to_int2 min_pos1)
                      (+ (to_int2 min_pos1) 1) p_13 intP_intM_aLiter_201)))
  (=>
  (forall ((p_14 Int))
  (= (count a_0 (+ (to_int2 min_pos1) 1) (to_int2 n_11_0) p_14
     intP_intM_a_131) (count aLiter (+ (to_int2 min_pos1) 1) (to_int2 n_11_0)
                      p_14 intP_intM_aLiter_201)))
  (forall ((tmp_1 t))
  (=> (= tmp_1 (select intP_intM_a_131 (shift1 a_0 (to_int2 min_pos1))))
  (forall ((intP_intM_a_132 (Array (pointer voidP) t)))
  (=>
  (= intP_intM_a_132 (store intP_intM_a_131 (shift1 a_0 (to_int2 min_pos1)) (select intP_intM_a_131 
  (shift1 a_0 (to_int2 i_21)))))
  (forall ((intP_intM_a_133 (Array (pointer voidP) t)))
  (=>
  (= intP_intM_a_133 (store intP_intM_a_132 (shift1 a_0 (to_int2 i_21)) tmp_1))
  (forall ((o6 t))
  (=> (= (to_int2 o6) 0)
  (forall ((result2 Bool))
  (=> (= (= result2 true) (< (to_int2 o6) (to_int2 i_21)))
  (=> (= result2 true)
  (forall ((usjessie_51 t))
  (=> (= (to_int2 usjessie_51) 0)
  (=>
  (forall ((p_6 Int))
  (= (count a_0 (to_int2 usjessie_51) (to_int2 i_21) p_6 intP_intM_a_133) 
  (count aLiter (to_int2 usjessie_51) (to_int2 i_21) p_6
  intP_intM_aLiter_201)))
  (forall ((o7 t))
  (=> (= (to_int2 o7) 1)
  (forall ((o8 t))
  (=> (= (to_int2 o8) (+ (to_int2 i_21) (to_int2 o7)))
  (forall ((result3 Bool))
  (=> (= (= result3 true) (< (to_int2 o8) (to_int2 min_pos1)))
  (=> (= result3 true)
  (forall ((o9 t))
  (=> (= (to_int2 o9) 1)
  (forall ((usjessie_55 t))
  (=> (= (to_int2 usjessie_55) (+ (to_int2 i_21) (to_int2 o9)))
  (=>
  (forall ((p_6 Int))
  (= (count a_0 (to_int2 usjessie_55) (to_int2 min_pos1) p_6 intP_intM_a_133) 
  (count aLiter (to_int2 usjessie_55) (to_int2 min_pos1) p_6
  intP_intM_aLiter_201)))
  (forall ((o10 t))
  (=> (= (to_int2 o10) 1)
  (forall ((o11 t))
  (=> (= (to_int2 o11) (+ (to_int2 min_pos1) (to_int2 o10)))
  (forall ((result4 Bool))
  (=> (= (= result4 true) (< (to_int2 o11) (to_int2 n_11_0)))
  (=> (= result4 true)
  (forall ((o12 t))
  (=> (= (to_int2 o12) 1)
  (forall ((usjessie_59 t))
  (=> (= (to_int2 usjessie_59) (+ (to_int2 min_pos1) (to_int2 o12)))
  (=>
  (forall ((p_6 Int))
  (= (count a_0 (to_int2 usjessie_59) (to_int2 n_11_0) p_6 intP_intM_a_133) 
  (count aLiter (to_int2 usjessie_59) (to_int2 n_11_0) p_6
  intP_intM_aLiter_201)))
  (=>
  (forall ((p_15 Int))
  (and
  (= (count a_0 (to_int2 min_pos1) (+ (to_int2 min_pos1) 1) p_15
     intP_intM_a_133) (count aLiter (to_int2 i_21) (+ (to_int2 i_21) 1) p_15
                      intP_intM_aLiter_201))
  (= (count aLiter (to_int2 min_pos1) (+ (to_int2 min_pos1) 1) p_15
     intP_intM_aLiter_201) (count a_0 (to_int2 i_21) (+ (to_int2 i_21) 1)
                           p_15 intP_intM_a_133))))
  (forall ((p_8 Int))
  (= (count a_0 0 (to_int2 n_11_0) p_8 intP_intM_a_133) (+ (+ (+ (+ (count
                                                                    a_0 0
                                                                    (to_int2
                                                                    i_21) p_8
                                                                    intP_intM_a_133) 
  (count a_0 (to_int2 i_21) (+ (to_int2 i_21) 1) p_8 intP_intM_a_133)) 
  (count a_0 (+ (to_int2 i_21) 1) (to_int2 min_pos1) p_8 intP_intM_a_133)) 
  (count a_0 (to_int2 min_pos1) (+ (to_int2 min_pos1) 1) p_8 intP_intM_a_133)) 
  (count a_0 (+ (to_int2 min_pos1) 1) (to_int2 n_11_0) p_8 intP_intM_a_133))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
