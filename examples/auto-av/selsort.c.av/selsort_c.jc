
axiomatic Padding {

  logic type padding
  
}

axiomatic Memory_reinterpretation_predicates {

  predicate uint8_as_uint32(uint32 d0, uint8 a0, uint8 a1, uint8 a2, uint8 a3) =
  ((d0 == ((((((a3 * 256) + a2) * 256) + a1) * 256) + a0)) &&
    \uint8_as_uint32(d0, a0, a1, a2, a3))
   
  logic uint32 complement_to_uint32(int32 v) =
  (if (v >= 0) then (v :> uint32) else (((v :> integer) + 4294967296) :> uint32))
   
  predicate uint8_as_int32(int32 d0, uint8 a3, uint8 a2, uint8 a1, uint8 a0) =
  (uint8_as_uint32(complement_to_uint32(d0), a3, a2, a1, a0) &&
    \uint8_as_int32(d0, a3, a2, a1, a0))
   
  predicate uint32_as_uint8(uint32 d0, uint8 a0, uint8 a1, uint8 a2, uint8 a3) =
  (((a0 == (d0 % 256)) &&
     (let d1 = (d0 / 256)
     in ((a1 == (d1 % 256)) &&
          (let d2 = (d1 / 256)
          in ((a2 == (d2 % 256)) && (let d3 = (d2 / 256) in (a3 == d3))))))) &&
    \uint32_as_uint8(d0, a0, a1, a2, a3))
   
  predicate int32_as_uint8(int32 d0, uint8 a3, uint8 a2, uint8 a1, uint8 a0) =
  (uint32_as_uint8(complement_to_uint32(d0), a3, a2, a1, a0) &&
    \int32_as_uint8(d0, a3, a2, a1, a0))
   
  logic uint8 complement_to_uint8(int8 v) =
  (if (v >= 0) then (v :> uint8) else (((v :> integer) + 256) :> uint8))
   
  predicate int8_as_int32(int32 d0, int8 a3, int8 a2, int8 a1, int8 a0) =
  (uint8_as_int32(d0, complement_to_uint8(a3), complement_to_uint8(a2),
                  complement_to_uint8(a1), complement_to_uint8(a0)) &&
    \int8_as_int32(d0, a3, a2, a1, a0))
   
  predicate int32_as_int8(int32 d0, int8 a3, int8 a2, int8 a1, int8 a0) =
  (int32_as_uint8(d0, complement_to_uint8(a3), complement_to_uint8(a2),
                  complement_to_uint8(a1), complement_to_uint8(a0)) &&
    \int32_as_int8(d0, a3, a2, a1, a0))
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag intP = voidP with {
  int32 intM: 32;
}

axiomatic Count {

  logic integer count{L}(intP[..] a, integer m, integer n_1, integer p)
   
  axiom count_base{L} :
  (_C_1 : (\forall intP[..] a_0;
            (\forall integer m_0;
              (\forall integer n_2;
                (\forall integer p_0;
                  ((m_0 >= n_2) ==> (count{L}(a_0, m_0, n_2, p_0) == 0)))))))
   
  axiom count_split{L} :
  (_C_2 : (\forall intP[..] a_1;
            (\forall integer m_1;
              (\forall integer n_3;
                (\forall integer k_1;
                  (\forall integer p_1;
                    (((m_1 <= n_3) && (n_3 <= k_1)) ==>
                      (count{L}(a_1, m_1, k_1, p_1) ==
                        (count{L}(a_1, m_1, n_3, p_1) +
                          count{L}(a_1, n_3, k_1, p_1))))))))))
   
  axiom count_one{L} :
  (_C_3 : (\forall intP[..] a_2;
            (\forall integer m_2;
              (\forall integer p_2;
                (count{L}(a_2, m_2, (m_2 + 1), p_2) ==
                  (if (((a_2 + m_2).intM :> integer) == p_2) then 1 else 0))))))
  
}

axiomatic Ordered {

  predicate ordered{L}(intP[..] a_3, integer m_3, integer n_4)
   
  axiom ordered_base{L} :
  (_C_4 : (\forall intP[..] a_4;
            (\forall integer m_4;
              (\forall integer n_5;
                ((m_4 >= n_5) ==> ordered{L}(a_4, m_4, n_5))))))
   
  axiom ordered_split{L} :
  (_C_5 : (\forall intP[..] a_5;
            (\forall integer m_5;
              (\forall integer k_2;
                (\forall integer n_6;
                  ((((m_5 <= n_6) && (n_6 <= k_2)) ==>
                     ordered{L}(a_5, m_5, k_2)) <==>
                    (ordered{L}(a_5, m_5, n_6) && ordered{L}(a_5, n_6, k_2))))))))
   
  axiom ordered_two{L} :
  (_C_6 : (\forall intP[..] a_6;
            (\forall integer m_6;
              (ordered{L}(a_6, m_6, (m_6 + 1)) <==>
                ((a_6 + m_6).intM <= (a_6 + (m_6 + 1)).intM)))))
  
}

predicate array_saved{L1, L2}(intP[..] a1, intP[..] a2, integer m_7,
                              integer n_7) =
(\forall integer k_3;
  (((m_7 <= k_3) && (k_3 <= n_7)) ==>
    (\at((a1 + k_3).intM,L1) == \at((a2 + k_3).intM,L2))))

predicate count_saved{L1, L2}(intP[..] a1_0, intP[..] a2_0, integer m_8,
                              integer n_8) =
(\forall integer p_3;
  (count{L1}(a1_0, m_8, n_8, p_3) == count{L2}(a2_0, m_8, n_8, p_3)))

unit count_frame_proof(intP[..] a1_1, intP[..] a2_1, int32 m, int32 n_3)
  requires ((_C_14 : \at((if (\at(m,Here) <=
                               \at(((n_3 :> integer) - 1),Here)) then 
                         (((\offset_min(\at(a1_1,Here)) <= \at(m,Here)) &&
                            (\offset_max(\at(a1_1,Here)) >=
                              \at(((n_3 :> integer) - 1),Here))) &&
                           (\forall integer __framac_tmp1;
                             (((\at(m,Here) <= __framac_tmp1) &&
                                (__framac_tmp1 <=
                                  \at(((n_3 :> integer) - 1),Here))) ==>
                               true))) else true),Here)) &&
             ((_C_15 : \at((if (\at(m,Here) <=
                                 \at(((n_3 :> integer) - 1),Here)) then 
                           (((\offset_min(\at(a2_1,Here)) <= \at(m,Here)) &&
                              (\offset_max(\at(a2_1,Here)) >=
                                \at(((n_3 :> integer) - 1),Here))) &&
                             (\forall integer __framac_tmp2;
                               (((\at(m,Here) <= __framac_tmp2) &&
                                  (__framac_tmp2 <=
                                    \at(((n_3 :> integer) - 1),Here))) ==>
                                 true))) else true),Here)) &&
               (_C_16 : array_saved{Here,
               Here}(a1_1, a2_1, (m :> integer), ((n_3 :> integer) - 1)))));
  decreases (_C_17 : ((n_3 :> integer) - (m :> integer)));
behavior default:
  assigns \nothing;
  ensures (_C_13 : count_saved{Here,
          Here}(\at(a1_1,Old), \at(a2_1,Old), (\at(m,Old) :> integer),
                (\at(n_3,Old) :> integer)));
{  
   {  (if (_C_12 : (m < n_3)) then 
      {  (_C_9 : count_frame_proof(a1_1, a2_1,
                                   (_C_8 : ((_C_7 : (m + (1 :> int32))) :> int32)),
                                   n_3));
         
         {  
            (assert for default: (_C_10 : (astraver : (\forall integer p_4;
                                                        (count{Here}(
                                                          a1_1,
                                                          (m :> integer),
                                                          (n_3 :> integer),
                                                          p_4) ==
                                                          (count{Here}(
                                                            a1_1,
                                                            (m :> integer),
                                                            ((m :> integer) +
                                                              1),
                                                            p_4) +
                                                            count{Here}(
                                                            a1_1,
                                                            ((m :> integer) +
                                                              1),
                                                            (n_3 :> integer),
                                                            p_4)))))));
            ()
         };
         
         {  
            (assert for default: (_C_11 : (astraver : (\forall integer p_5;
                                                        (count{Here}(
                                                          a2_1,
                                                          (m :> integer),
                                                          (n_3 :> integer),
                                                          p_5) ==
                                                          (count{Here}(
                                                            a2_1,
                                                            (m :> integer),
                                                            ((m :> integer) +
                                                              1),
                                                            p_5) +
                                                            count{Here}(
                                                            a2_1,
                                                            ((m :> integer) +
                                                              1),
                                                            (n_3 :> integer),
                                                            p_5)))))));
            ()
         }
      } else ());
      
      (return ())
   }
}

unit count_frame2_proof(intP[..] a1_0, intP[..] a2_0, int32 n_2)
  requires ((_C_40 : (n_2 >= (0 :> int32))) &&
             ((_C_41 : \at((if (\at(0,Here) <=
                                 \at(((n_2 :> integer) - 1),Here)) then 
                           (((\offset_min(\at(a1_0,Here)) <= \at(0,Here)) &&
                              (\offset_max(\at(a1_0,Here)) >=
                                \at(((n_2 :> integer) - 1),Here))) &&
                             (\forall integer __framac_tmp3;
                               (((\at(0,Here) <= __framac_tmp3) &&
                                  (__framac_tmp3 <=
                                    \at(((n_2 :> integer) - 1),Here))) ==>
                                 true))) else true),Here)) &&
               ((_C_42 : \at((if (\at(0,Here) <=
                                   \at(((n_2 :> integer) - 1),Here)) then 
                             (((\offset_min(\at(a2_0,Here)) <= \at(0,Here)) &&
                                (\offset_max(\at(a2_0,Here)) >=
                                  \at(((n_2 :> integer) - 1),Here))) &&
                               (\forall integer __framac_tmp4;
                                 (((\at(0,Here) <= __framac_tmp4) &&
                                    (__framac_tmp4 <=
                                      \at(((n_2 :> integer) - 1),Here))) ==>
                                   true))) else true),Here)) &&
                 (_C_43 : array_saved{Here,
                 Here}(a1_0, a2_0, 0, ((n_2 :> integer) - 1))))));
behavior default:
  assigns \nothing;
  ensures (_C_39 : (\forall integer i;
                     (\forall integer j_0;
                       (((((0 <= i) && (i <= (\at(n_2,Old) :> integer))) &&
                           (0 <= j_0)) &&
                          (j_0 <= (\at(n_2,Old) :> integer))) ==>
                         count_saved{Here,
                         Here}(\at(a1_0,Old), \at(a2_0,Old), i, j_0)))));
{  
   (var int32 i);
   
   (var int32 j);
   
   {  (_C_18 : (i = (0 :> int32)));
      (LoopEntry : 
      loop 
      behavior default:
        invariant (_C_21 : ((_C_22 : ((0 :> int32) <= i)) &&
                             (_C_23 : (i <= n_2))));
      behavior default:
        invariant (_C_20 : (\forall integer k_5;
                             (\forall integer j;
                               (((((0 <= k_5) && (k_5 < (i :> integer))) &&
                                   (0 <= j)) &&
                                  (j <= (n_2 :> integer))) ==>
                                 count_saved{Here,
                                 Here}(a1_0, a2_0, k_5, j)))));
      variant (_C_19 : ((n_2 :> integer) - (i :> integer)));
      while (true)
      {  (LoopCurrent : 
         {  (_C_24 : (j = (0 :> int32)));
            (LoopEntry : 
            loop 
            behavior default:
              invariant (_C_27 : ((_C_28 : ((0 :> int32) <= j)) &&
                                   (_C_29 : (j <= n_2))));
            behavior default:
              invariant (_C_26 : (\forall integer k_4;
                                   (((0 <= k_4) && (k_4 < (j :> integer))) ==>
                                     count_saved{Here,
                                     Here}(a1_0, a2_0, (i :> integer), k_4))));
            variant (_C_25 : ((n_2 :> integer) - (j :> integer)));
            while (true)
            {  (LoopCurrent : 
               {  (_C_30 : count_frame_proof(a1_0, a2_0, i, j));
                  (if (_C_34 : (j == n_2)) then 
                  (goto while_1_break) else (_C_33 : (j = (_C_32 : ((_C_31 : 
                                                                    (j +
                                                                    (1 :> int32))) :> int32)))))
               })
            });
            (while_1_break : ());
            (if (_C_38 : (i == n_2)) then 
            (goto while_0_break) else (_C_37 : (i = (_C_36 : ((_C_35 : 
                                                              (i +
                                                                (1 :> int32))) :> int32)))))
         })
      });
      (while_0_break : ());
      
      (return ())
   }
}

unit copy_array(intP[..] a1, intP[..] a2, int32 n_1)
  requires ((_C_58 : (n_1 >= (0 :> int32))) &&
             ((_C_59 : \at((if (\at(0,Here) <=
                                 \at(((n_1 :> integer) - 1),Here)) then 
                           (((\offset_min(\at(a1,Here)) <= \at(0,Here)) &&
                              (\offset_max(\at(a1,Here)) >=
                                \at(((n_1 :> integer) - 1),Here))) &&
                             (\forall integer __framac_tmp5;
                               (((\at(0,Here) <= __framac_tmp5) &&
                                  (__framac_tmp5 <=
                                    \at(((n_1 :> integer) - 1),Here))) ==>
                                 true))) else true),Here)) &&
               (_C_60 : \at((if (\at(0,Here) <=
                                  \at(((n_1 :> integer) - 1),Here)) then 
                            (((\offset_min(\at(a2,Here)) <= \at(0,Here)) &&
                               (\offset_max(\at(a2,Here)) >=
                                 \at(((n_1 :> integer) - 1),Here))) &&
                              (\forall integer __framac_tmp6;
                                (((\at(0,Here) <= __framac_tmp6) &&
                                   (__framac_tmp6 <=
                                     \at(((n_1 :> integer) - 1),Here))) ==>
                                  true))) else true),Here))));
  decreases (_C_61 : n_1);
behavior default:
  assigns (a2 + [0..((n_1 :> integer) - 1)]).intM;
  ensures (_C_57 : array_saved{Old,
          Here}(\at(a1,Old), \at(a2,Old), 0, ((\at(n_1,Old) :> integer) - 1)));
{  
   {  (if (_C_56 : (n_1 == (0 :> int32))) then () else 
      {  (_C_52 : ((_C_51 : (_C_50 : (a2 +
                                       (_C_49 : ((_C_48 : (n_1 -
                                                            (1 :> int32))) :> int32)))).intM) = 
         (_C_47 : (_C_46 : (a1 +
                             (_C_45 : ((_C_44 : (n_1 - (1 :> int32))) :> int32)))).intM)));
         (_C_55 : copy_array(a1, a2,
                             (_C_54 : ((_C_53 : (n_1 - (1 :> int32))) :> int32))))
      });
      
      (return ())
   }
}

predicate minimum{L}(intP[..] a_7, integer m_9, integer n_9, integer k_6) =
\at((\forall integer i_0;
      (((m_9 <= i_0) && (i_0 < n_9)) ==>
        ((a_7 + k_6).intM <= (a_7 + i_0).intM))),L)

logic integer count_sum{L}(intP[..] a_8, integer i_1, integer j_1,
                           integer n_10, integer p_6) =
\at(((((count{L}(a_8, 0, i_1, p_6) + count{L}(a_8, i_1, (i_1 + 1), p_6)) +
        count{L}(a_8, (i_1 + 1), j_1, p_6)) +
       count{L}(a_8, j_1, (j_1 + 1), p_6)) +
      count{L}(a_8, (j_1 + 1), n_10, p_6)),L)

lemma count_splitted{L} :
(_C_62 : (\forall intP[..] a_9;
           (\forall integer i_2;
             (\forall integer j_2;
               (\forall integer n_11;
                 ((((((0 <= i_2) && (i_2 <= (i_2 + 1))) &&
                      ((i_2 + 1) <= j_2)) &&
                     (j_2 <= (j_2 + 1))) &&
                    ((j_2 + 1) <= n_11)) ==>
                   (\forall integer p_7;
                     ((((((((count{L}(a_9, 0, n_11, p_7) ==
                              (count{L}(a_9, 0, i_2, p_7) +
                                count{L}(a_9, i_2, n_11, p_7))) &&
                             (count{L}(a_9, i_2, n_11, p_7) ==
                               (count{L}(a_9, i_2, (i_2 + 1), p_7) +
                                 count{L}(a_9, (i_2 + 1), n_11, p_7)))) &&
                            (count{L}(a_9, (i_2 + 1), n_11, p_7) ==
                              (count{L}(a_9, (i_2 + 1), j_2, p_7) +
                                count{L}(a_9, j_2, n_11, p_7)))) &&
                           (count{L}(a_9, j_2, n_11, p_7) ==
                             (count{L}(a_9, j_2, (j_2 + 1), p_7) +
                               count{L}(a_9, (j_2 + 1), n_11, p_7)))) &&
                          (count{L}(a_9, (i_2 + 1), n_11, p_7) ==
                            ((count{L}(a_9, (i_2 + 1), j_2, p_7) +
                               count{L}(a_9, j_2, (j_2 + 1), p_7)) +
                              count{L}(a_9, (j_2 + 1), n_11, p_7)))) &&
                         (count{L}(a_9, i_2, n_11, p_7) ==
                           (((count{L}(a_9, i_2, (i_2 + 1), p_7) +
                               count{L}(a_9, (i_2 + 1), j_2, p_7)) +
                              count{L}(a_9, j_2, (j_2 + 1), p_7)) +
                             count{L}(a_9, (j_2 + 1), n_11, p_7)))) &&
                        (count{L}(a_9, 0, n_11, p_7) ==
                          ((((count{L}(a_9, 0, i_2, p_7) +
                               count{L}(a_9, i_2, (i_2 + 1), p_7)) +
                              count{L}(a_9, (i_2 + 1), j_2, p_7)) +
                             count{L}(a_9, j_2, (j_2 + 1), p_7)) +
                            count{L}(a_9, (j_2 + 1), n_11, p_7)))) &&
                       (count{L}(a_9, 0, n_11, p_7) ==
                         count_sum{L}(a_9, i_2, j_2, n_11, p_7))))))))))

lemma count_saved_refl{L} :
(_C_63 : (\forall intP[..] a_10;
           (\forall integer m_10;
             (\forall integer n_12;
               count_saved{L, L}(a_10, a_10, m_10, n_12)))))

lemma count_saved_comm{L1, L2} :
(_C_64 : (\forall intP[..] a_11;
           (\forall intP[..] b;
             (\forall integer m_11;
               (\forall integer n_13;
                 (count_saved{L1,
                   L2}(a_11, b, m_11, n_13) ==>
                   count_saved{L2,
                   L1}(b, a_11, m_11, n_13)))))))

lemma count_saved_trans{L1, L2, L3} :
(_C_65 : (\forall intP[..] a_12;
           (\forall intP[..] b_0;
             (\forall intP[..] c;
               (\forall integer m_12;
                 (\forall integer n_14;
                   ((count_saved{L1,
                      L2}(a_12, b_0, m_12, n_14) &&
                      count_saved{L2,
                      L3}(b_0, c, m_12, n_14)) ==>
                     count_saved{L1,
                     L3}(a_12, c, m_12, n_14))))))))

unit sort(intP[..] a, int32 n_12)
  requires ((_C_131 : (n_12 >= (0 :> int32))) &&
             (_C_132 : \at((if (\at(0,Here) <=
                                 \at(((n_12 :> integer) - 1),Here)) then 
                           (((\offset_min(\at(a,Here)) <= \at(0,Here)) &&
                              (\offset_max(\at(a,Here)) >=
                                \at(((n_12 :> integer) - 1),Here))) &&
                             (\forall integer __framac_tmp7;
                               (((\at(0,Here) <= __framac_tmp7) &&
                                  (__framac_tmp7 <=
                                    \at(((n_12 :> integer) - 1),Here))) ==>
                                 true))) else true),Here)));
behavior default:
  ensures (_C_128 : ((_C_129 : ordered{Here}(\at(a,Old), 0,
                                             ((\at(n_12,Old) :> integer) - 1))) &&
                      (_C_130 : count_saved{Old,
                      Here}(\at(a,Old), \at(a,Old), 0,
                            (\at(n_12,Old) :> integer)))));
{  
   (var int32 i_0);
   
   (var int32 min_pos);
   
   (var int32 j_0);
   
   (var intP[..] aLiter);
   
   (var intP[..] tmp_0);
   
   (var int32 tmp_1);
   
   {  (_C_66 : (i_0 = (0 :> int32)));
      (LoopEntry : 
      loop 
      behavior default:
        invariant (_C_73 : ordered{Here}(a, 0, ((i_0 :> integer) - 1)));
      behavior default:
        invariant (_C_72 : ((i_0 > (0 :> int32)) ==>
                             minimum{Here}(a, (i_0 :> integer),
                                           (n_12 :> integer),
                                           ((i_0 :> integer) - 1))));
      behavior default:
        invariant (_C_71 : count_saved{Pre,
                  Here}(a, a, 0, (n_12 :> integer)));
      behavior default:
        invariant (_C_68 : ((_C_69 : ((0 :> int32) <= i_0)) &&
                             (_C_70 : (i_0 <= n_12))));
      variant (_C_67 : ((n_12 :> integer) - (i_0 :> integer)));
      while (true)
      {  
         {  (LoopCurrent : (if (_C_74 : (i_0 < n_12)) then () else 
                           (goto while_0_break_0)));
            
            {  (_C_75 : (min_pos = i_0));
               
               {  (_C_78 : (j_0 = (_C_77 : ((_C_76 : (i_0 + (1 :> int32))) :> int32))));
                  (LoopEntry : 
                  loop 
                  behavior default:
                    invariant (_C_86 : minimum{Here}(a, (i_0 :> integer),
                                                     (j_0 :> integer),
                                                     (min_pos :> integer)));
                  behavior default:
                    invariant (_C_83 : ((_C_84 : (i_0 <= min_pos)) &&
                                         (_C_85 : (min_pos < n_12))));
                  behavior default:
                    invariant (_C_80 : ((_C_81 : (((i_0 :> integer) + 1) <=
                                                   (j_0 :> integer))) &&
                                         (_C_82 : (j_0 <= n_12))));
                  variant (_C_79 : ((n_12 :> integer) - (j_0 :> integer)));
                  while (true)
                  {  
                     {  (LoopCurrent : (if (_C_87 : (j_0 < n_12)) then () else 
                                       (goto while_1_break_0)));
                        
                        {  (if (_C_93 : ((_C_92 : (_C_91 : (a + j_0)).intM) <
                                          (_C_90 : (_C_89 : (a + min_pos)).intM))) then 
                           (_C_88 : (min_pos = j_0)) else ())
                        };
                        (_C_96 : (j_0 = (_C_95 : ((_C_94 : (j_0 +
                                                             (1 :> int32))) :> int32))))
                     }
                  });
                  (while_1_break_0 : ())
               };
               (if (_C_124 : (min_pos != i_0)) then 
               {  
                  {  
                     (assert for default: (_C_97 : (astraver : (\forall integer p_8;
                                                                 (count_sum{Here}(
                                                                   a,
                                                                   (i_0 :> integer),
                                                                   (min_pos :> integer),
                                                                   (n_12 :> integer),
                                                                   p_8) ==
                                                                   count_sum{Here}(
                                                                   a,
                                                                   (i_0 :> integer),
                                                                   (min_pos :> integer),
                                                                   (n_12 :> integer),
                                                                   p_8))))));
                     ()
                  };
                  (_C_100 : (aLiter = (_C_99 : (new intP[(_C_98 : (n_12 :> uint64))]))));
                  (_C_101 : copy_array(a, aLiter, n_12));
                  
                  {  
                     (assert for default: (_C_102 : (astraver : (\forall integer p_9;
                                                                  (count_sum{Here}(
                                                                    aLiter,
                                                                    (i_0 :> integer),
                                                                    (min_pos :> integer),
                                                                    (n_12 :> integer),
                                                                    p_9) ==
                                                                    count_sum{Here}(
                                                                    aLiter,
                                                                    (i_0 :> integer),
                                                                    (min_pos :> integer),
                                                                    (n_12 :> integer),
                                                                    p_9))))));
                     ()
                  };
                  (_C_103 : count_frame2_proof(a, aLiter, n_12));
                  (_C_106 : (tmp_1 = (_C_105 : (_C_104 : (a + min_pos)).intM)));
                  (_C_111 : ((_C_110 : (_C_109 : (a + min_pos)).intM) = 
                  (_C_108 : (_C_107 : (a + i_0)).intM)));
                  (_C_114 : ((_C_113 : (_C_112 : (a + i_0)).intM) = tmp_1));
                  (_C_115 : count_frame_proof(a, aLiter, (0 :> int32), i_0));
                  (_C_118 : count_frame_proof(a, aLiter,
                                              (_C_117 : ((_C_116 : (i_0 +
                                                                    (1 :> int32))) :> int32)),
                                              min_pos));
                  (_C_121 : count_frame_proof(a, aLiter,
                                              (_C_120 : ((_C_119 : (min_pos +
                                                                    (1 :> int32))) :> int32)),
                                              n_12));
                  
                  {  
                     (assert for default: (_C_122 : (astraver : (\forall integer p_10;
                                                                  ((count{Here}(
                                                                    a,
                                                                    (min_pos :> integer),
                                                                    ((min_pos :> integer) +
                                                                    1), p_10) ==
                                                                    count{Here}(
                                                                    aLiter,
                                                                    (i_0 :> integer),
                                                                    ((i_0 :> integer) +
                                                                    1), p_10)) &&
                                                                    (count{Here}(
                                                                    aLiter,
                                                                    (min_pos :> integer),
                                                                    ((min_pos :> integer) +
                                                                    1), p_10) ==
                                                                    count{Here}(
                                                                    a,
                                                                    (i_0 :> integer),
                                                                    ((i_0 :> integer) +
                                                                    1), p_10)))))));
                     ()
                  };
                  
                  {  
                     (assert for default: (_C_123 : (astraver : (\forall integer p_11;
                                                                  (((count{Here}(
                                                                    a, 0,
                                                                    (n_12 :> integer),
                                                                    p_11) ==
                                                                    count_sum{Here}(
                                                                    a,
                                                                    (i_0 :> integer),
                                                                    (min_pos :> integer),
                                                                    (n_12 :> integer),
                                                                    p_11)) &&
                                                                    (count_sum{Here}(
                                                                    a,
                                                                    (i_0 :> integer),
                                                                    (min_pos :> integer),
                                                                    (n_12 :> integer),
                                                                    p_11) ==
                                                                    count_sum{Here}(
                                                                    aLiter,
                                                                    (i_0 :> integer),
                                                                    (min_pos :> integer),
                                                                    (n_12 :> integer),
                                                                    p_11))) &&
                                                                    (count_sum{Here}(
                                                                    aLiter,
                                                                    (i_0 :> integer),
                                                                    (min_pos :> integer),
                                                                    (n_12 :> integer),
                                                                    p_11) ==
                                                                    count{Here}(
                                                                    aLiter,
                                                                    0,
                                                                    (n_12 :> integer),
                                                                    p_11)))))));
                     ()
                  }
               } else ())
            };
            (_C_127 : (i_0 = (_C_126 : ((_C_125 : (i_0 + (1 :> int32))) :> int32))))
         }
      });
      (while_0_break_0 : ());
      
      (return ())
   }
}
