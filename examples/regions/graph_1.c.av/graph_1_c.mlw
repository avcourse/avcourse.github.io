
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

module Root_struct___anonstruct_Graph_4_xP_safe

  use why3.Bool.Bool 
  
end

module Root_struct___anonstruct_Graph_4_xP_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_unsafe

  use why3.Bool.Bool 
  
end

theory Root___anonstruct_Graph_4

  use why3.Bool.Bool 
  
  type __anonstruct_Graph_4 
  
end

theory Root___anonstruct_Edge_3

  use why3.Bool.Bool 
  
  type __anonstruct_Edge_3 
  
end

theory Logic_edge_saved

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate edge_saved (g_3 : (pointer __anonstruct_Graph_4)) (k_4 : int)
  (__anonstruct_Graph_4_edges_g_3_6_at_L2 : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_edges_g_3_6_at_L1 :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_22_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_22_at_L1 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_22_at_L2 :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_to_edges_22_at_L1 : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_from_edges_22_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_22_at_L1 :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((Int32.(=)
      (select __anonstruct_Edge_3_from_edges_22_at_L1
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L1 g_3) k_4))
      (select __anonstruct_Edge_3_from_edges_22_at_L2
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L2 g_3) k_4)))
     /\
     ((Int32.(=)
      (select __anonstruct_Edge_3_to_edges_22_at_L1
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L1 g_3) k_4))
      (select __anonstruct_Edge_3_to_edges_22_at_L2
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L2 g_3) k_4)))
     /\
     (Int32.(=)
     (select __anonstruct_Edge_3_existent_0_edges_22_at_L1
     (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L1 g_3) k_4))
     (select __anonstruct_Edge_3_existent_0_edges_22_at_L2
     (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L2 g_3) k_4)))))
  
  
end

theory Logic_edges_saved

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edge_saved 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edges_saved (g_4 : (pointer __anonstruct_Graph_4)) (m : int) (n_2
  : int) (__anonstruct_Graph_4_edges_g_4_7_at_L2 : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Graph_4_edges_g_4_7_at_L1 : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_56_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_56_at_L1 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_56_at_L2 :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_to_edges_56_at_L1 : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_from_edges_56_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_56_at_L1 :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     (forall k_5 : int.
      ((((<=) m k_5) /\ ((<) k_5 n_2)) ->
       (edge_saved g_4 k_5 __anonstruct_Graph_4_edges_g_4_7_at_L2
       __anonstruct_Graph_4_edges_g_4_7_at_L1
       __anonstruct_Edge_3_existent_0_edges_56_at_L2
       __anonstruct_Edge_3_existent_0_edges_56_at_L1
       __anonstruct_Edge_3_to_edges_56_at_L2
       __anonstruct_Edge_3_to_edges_56_at_L1
       __anonstruct_Edge_3_from_edges_56_at_L2
       __anonstruct_Edge_3_from_edges_56_at_L1)))
  
  
end

theory Axiomatic_EdgesCount

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edges_saved 
  
  use enum.Int32 
  
  use import int.Int 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  function count (pointer __anonstruct_Graph_4) int int int int (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)) (memory
  __anonstruct_Edge_3 Int32.t) (memory __anonstruct_Edge_3 Int32.t) (memory
  __anonstruct_Edge_3 Int32.t) : int
  
  
  axiom Count_zero #"/home/debian/mfsp/examples/regions/graph_1.c" 55 65 180#
  "expl:Axiom count_zero"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_26_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_26_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_26_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/debian/mfsp/examples/regions/graph_1.c" 57 26 112#
      (forall g_10 : (pointer __anonstruct_Graph_4).
       (forall f_2_1 : int.
        (forall t_2_1 : int.
         (forall m_3 : int.
          (forall n_6 : int.
           (((>=) m_3 n_6) ->
            ((=)
            (count g_10 f_2_1 t_2_1 m_3 n_6
            __anonstruct_Graph_4_edges_g_7_10_at_L
            __anonstruct_Edge_3_existent_0_edges_26_at_L
            __anonstruct_Edge_3_to_edges_26_at_L
            __anonstruct_Edge_3_from_edges_26_at_L) (0)))))))))))))
  
  axiom Count_one #"/home/debian/mfsp/examples/regions/graph_1.c" 58 38 219#
  "expl:Axiom count_one"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_26_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_26_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_26_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/debian/mfsp/examples/regions/graph_1.c" 60 25 178#
      (forall g_11 : (pointer __anonstruct_Graph_4).
       (forall f_3_0 : int.
        (forall t_3_0 : int.
         (forall m_4 : int.
          ((=)
          (count g_11 f_3_0 t_3_0 m_4 (Int.(+) m_4 (1))
          __anonstruct_Graph_4_edges_g_7_10_at_L
          __anonstruct_Edge_3_existent_0_edges_26_at_L
          __anonstruct_Edge_3_to_edges_26_at_L
          __anonstruct_Edge_3_from_edges_26_at_L)
          (if
           (Bool.andb
           (Bool.andb
           ((<>)
           (Int32.to_int
           (select __anonstruct_Edge_3_existent_0_edges_26_at_L
           (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4)))
           (0))
           ((=)
           (Int32.to_int
           (select __anonstruct_Edge_3_from_edges_26_at_L
           (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4)))
           f_3_0))
           ((=)
           (Int32.to_int
           (select __anonstruct_Edge_3_to_edges_26_at_L
           (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4)))
           t_3_0)) then (1) else (0))))))))))))
  
  axiom Count_split
  #"/home/debian/mfsp/examples/regions/graph_1.c" 61 119 285#
  "expl:Axiom count_split"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_26_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_26_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_26_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/debian/mfsp/examples/regions/graph_1.c" 63 27 163#
      (forall g_12 : (pointer __anonstruct_Graph_4).
       (forall f_4 : int.
        (forall t_4 : int.
         (forall m_5 : int.
          (forall n_7 : int.
           (forall k_7 : int.
            ((((<=) m_5 n_7) /\ ((<=) n_7 k_7)) ->
             ((=)
             (count g_12 f_4 t_4 m_5 k_7
             __anonstruct_Graph_4_edges_g_7_10_at_L
             __anonstruct_Edge_3_existent_0_edges_26_at_L
             __anonstruct_Edge_3_to_edges_26_at_L
             __anonstruct_Edge_3_from_edges_26_at_L)
             (Int.(+)
             (count g_12 f_4 t_4 m_5 n_7
             __anonstruct_Graph_4_edges_g_7_10_at_L
             __anonstruct_Edge_3_existent_0_edges_26_at_L
             __anonstruct_Edge_3_to_edges_26_at_L
             __anonstruct_Edge_3_from_edges_26_at_L)
             (count g_12 f_4 t_4 n_7 k_7
             __anonstruct_Graph_4_edges_g_7_10_at_L
             __anonstruct_Edge_3_existent_0_edges_26_at_L
             __anonstruct_Edge_3_to_edges_26_at_L
             __anonstruct_Edge_3_from_edges_26_at_L)))))))))))))))
  
  predicate count_saved (g_9 : (pointer __anonstruct_Graph_4)) (f_1 : int)
  (t_1 : int) (m_2 : int) (n_5 : int)
  (__anonstruct_Graph_4_edges_g_7_10_at_L2 : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_edges_g_7_10_at_L1 :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_26_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_26_at_L1 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_26_at_L2 :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_to_edges_26_at_L1 : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_from_edges_26_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_26_at_L1 :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((=)
     (count g_9 f_1 t_1 m_2 n_5 __anonstruct_Graph_4_edges_g_7_10_at_L1
     __anonstruct_Edge_3_existent_0_edges_26_at_L1
     __anonstruct_Edge_3_to_edges_26_at_L1
     __anonstruct_Edge_3_from_edges_26_at_L1)
     (count g_9 f_1 t_1 m_2 n_5 __anonstruct_Graph_4_edges_g_7_10_at_L2
     __anonstruct_Edge_3_existent_0_edges_26_at_L2
     __anonstruct_Edge_3_to_edges_26_at_L2
     __anonstruct_Edge_3_from_edges_26_at_L2))
  
  
  axiom Count_saved_ax
  #"/home/debian/mfsp/examples/regions/graph_1.c" 64 80 238#
  "expl:Axiom count_saved_ax"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L2 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Graph_4_edges_g_7_10_at_L1 : (memory
    __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
    (forall __anonstruct_Edge_3_existent_0_edges_26_at_L2 : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_existent_0_edges_26_at_L1 : (memory
      __anonstruct_Edge_3 Int32.t).
      (forall __anonstruct_Edge_3_to_edges_26_at_L2 : (memory
       __anonstruct_Edge_3 Int32.t).
       (forall __anonstruct_Edge_3_to_edges_26_at_L1 : (memory
        __anonstruct_Edge_3 Int32.t).
        (forall __anonstruct_Edge_3_from_edges_26_at_L2 : (memory
         __anonstruct_Edge_3 Int32.t).
         (forall __anonstruct_Edge_3_from_edges_26_at_L1 : (memory
          __anonstruct_Edge_3 Int32.t).
          (#"/home/debian/mfsp/examples/regions/graph_1.c" 66 38 155#
          (forall g_13 : (pointer __anonstruct_Graph_4).
           (forall f_5 : int.
            (forall t_5 : int.
             (forall m_6 : int.
              (forall n_8 : int.
               ((edges_saved g_13 m_6 n_8
                __anonstruct_Graph_4_edges_g_7_10_at_L2
                __anonstruct_Graph_4_edges_g_7_10_at_L1
                __anonstruct_Edge_3_existent_0_edges_26_at_L2
                __anonstruct_Edge_3_existent_0_edges_26_at_L1
                __anonstruct_Edge_3_to_edges_26_at_L2
                __anonstruct_Edge_3_to_edges_26_at_L1
                __anonstruct_Edge_3_from_edges_26_at_L2
                __anonstruct_Edge_3_from_edges_26_at_L1) ->
                (count_saved g_13 f_5 t_5 m_6 n_8
                __anonstruct_Graph_4_edges_g_7_10_at_L2
                __anonstruct_Graph_4_edges_g_7_10_at_L1
                __anonstruct_Edge_3_existent_0_edges_26_at_L2
                __anonstruct_Edge_3_existent_0_edges_26_at_L1
                __anonstruct_Edge_3_to_edges_26_at_L2
                __anonstruct_Edge_3_to_edges_26_at_L1
                __anonstruct_Edge_3_from_edges_26_at_L2
                __anonstruct_Edge_3_from_edges_26_at_L1))))))))))))))))
  
  function all_count (g_8 : (pointer __anonstruct_Graph_4)) (f_0 : int) (t_0
  : int) (__anonstruct_Graph_4_esize_g_8_11_at_L : (memory
  __anonstruct_Graph_4 Int32.t)) (__anonstruct_Graph_4_edges_g_8_11_at_L :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_84_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_84_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_84_at_L :
  (memory __anonstruct_Edge_3 Int32.t)) : int
  =
     (count g_8 f_0 t_0 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_8_11_at_L g_8))
     __anonstruct_Graph_4_edges_g_8_11_at_L
     __anonstruct_Edge_3_existent_0_edges_84_at_L
     __anonstruct_Edge_3_to_edges_84_at_L
     __anonstruct_Edge_3_from_edges_84_at_L)
  
  
end

theory Root___anonstruct_Vertex_2

  use why3.Bool.Bool 
  
  type __anonstruct_Vertex_2 
  
end

theory Logic_is_vertex

  use import Root___anonstruct_Graph_4 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate is_vertex (g : (pointer __anonstruct_Graph_4)) (v : int)
  (__anonstruct_Graph_4_vsize_g_2_at_L : (memory __anonstruct_Graph_4
  Int32.t))
  =
     (((<=) (0) v) /\
     ((<) v (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_at_L g))))
  
  
end

theory Logic_edge_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edge_valid (g_0 : (pointer __anonstruct_Graph_4)) (k_1 : int)
  (__anonstruct_Graph_4_edges_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_0_3_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_18_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_18_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_18_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_19_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((not
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_existent_0_edges_18_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))) (0)))
      ->
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_18_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_to_edges_18_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((not
       ((=)
       (Int32.to_int
       (select __anonstruct_Vertex_2_existent_vertices_19_at_L
       (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_18_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
       (0)))
      /\
      (not
      ((=)
      (Int32.to_int
      (select __anonstruct_Vertex_2_existent_vertices_19_at_L
      (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
      (Int32.to_int
      (select __anonstruct_Edge_3_to_edges_18_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
      (0)))))))
  
  
end

theory Logic_edges_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edge_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edges_valid (g_1 : (pointer __anonstruct_Graph_4)) (n_1 : int)
  (__anonstruct_Graph_4_edges_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_1_4_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_44_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_44_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_44_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_45_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     (forall k_2 : int.
      ((((<=) (0) k_2) /\ ((<) k_2 n_1)) ->
       (edge_valid g_1 k_2 __anonstruct_Graph_4_edges_g_1_4_at_L
       __anonstruct_Graph_4_vsize_g_1_4_at_L
       __anonstruct_Graph_4_vertices_g_1_4_at_L
       __anonstruct_Edge_3_existent_0_edges_44_at_L
       __anonstruct_Edge_3_to_edges_44_at_L
       __anonstruct_Edge_3_from_edges_44_at_L
       __anonstruct_Vertex_2_existent_vertices_45_at_L)))
  
  
end

theory Logic_valid_0

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edges_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  predicate valid_0 (g_2 : (pointer __anonstruct_Graph_4))
  (__anonstruct_Vertex_2_vertices_20_alloc_table_at_L : (alloc_table
  __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_21_alloc_table_at_L :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Graph_4_esize_g_2_5_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_ecnt_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_edges_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Graph_4_vsize_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_vertices_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_21_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_21_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_21_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_20_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((Int32.(>) (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)
      (#"graph_1_c.jc" 65 24 36# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (#"graph_1_c.jc" 65 54 66# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)
      (#"graph_1_c.jc" 67 23 35# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Vertex_2_vertices_20_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Vertex_2_vertices_20_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp2 : int.
        ((((<=) (0) __framac_tmp2) /\
         ((<=) __framac_tmp2
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Edge_3_edges_21_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Edge_3_edges_21_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp1 : int.
        ((((<=) (0) __framac_tmp1) /\
         ((<=) __framac_tmp1
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((edges_valid g_2
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
      __anonstruct_Graph_4_edges_g_2_5_at_L
      __anonstruct_Graph_4_vsize_g_2_5_at_L
      __anonstruct_Graph_4_vertices_g_2_5_at_L
      __anonstruct_Edge_3_existent_0_edges_21_at_L
      __anonstruct_Edge_3_to_edges_21_at_L
      __anonstruct_Edge_3_from_edges_21_at_L
      __anonstruct_Vertex_2_existent_vertices_20_at_L)
     /\
     (forall k_3 : int.
      ((((<=)
        (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)) k_3)
       /\
       ((<) k_3
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)))) ->
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_21_at_L
       (shift (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2) k_3))) (0)))))))))))
  
  
end

module Function_insert_edge_safety
#"/home/debian/mfsp/examples/regions/graph_1.c" 87 5 53#
"expl:insert_edge, safety"

  use import core.Upd_offset_safe 
  
  use import core.Tag_table_type 
  
  use import core.Shift_safe 
  
  use Safe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use why3.Bool.Bool 
  
  let insert_edge #"/home/debian/mfsp/examples/regions/graph_1.c" 87 5 53#
  "expl:Function insert_edge, safety" =
  fun
   (graph_1 : (pointer __anonstruct_Graph_4)) (pos_1 : Int32.t) (f_1_0 :
   Int32.t) (t_1_0 : Int32.t) (__anonstruct_Edge_3_from_edges_29 : ref
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_29 :
   ref (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_29 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_edges_29_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph_1_13_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_30_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_29_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_30 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph_1_13
   : (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_graph_1_13 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph_1_13 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_graph_1_13 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph_1_13 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 72 13 26#
    (#"graph_1_c.jc" 168 12 916#
    ((#"graph_1_c.jc" 168 12 916#
     ((<=) (offset_min __anonstruct_Graph_4_graph_1_13_alloc_table graph_1)
     (0)))
    /\
    (#"graph_1_c.jc" 168 12 916#
    ((#"graph_1_c.jc" 168 12 916#
     ((>=) (offset_max __anonstruct_Graph_4_graph_1_13_alloc_table graph_1)
     (0)))
    /\ (#"graph_1_c.jc" 168 12 916# ((=) true true)))))))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 73 13 25#
    (valid_0 graph_1 __anonstruct_Vertex_2_vertices_30_alloc_table
    __anonstruct_Edge_3_edges_29_alloc_table
    __anonstruct_Graph_4_esize_graph_1_13
    __anonstruct_Graph_4_ecnt_graph_1_13
    __anonstruct_Graph_4_edges_graph_1_13
    __anonstruct_Graph_4_vsize_graph_1_13
    __anonstruct_Graph_4_vertices_graph_1_13
    !__anonstruct_Edge_3_existent_0_edges_29 !__anonstruct_Edge_3_to_edges_29
    !__anonstruct_Edge_3_from_edges_29
    __anonstruct_Vertex_2_existent_vertices_30))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 74 13 21#
    (Int32.(<=) (#"graph_1_c.jc" 172 36 48# "expl:Integer cast" (Int32.of_int
    (0))) pos_1))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 74 18 35#
    (Int32.(<) pos_1 (select __anonstruct_Graph_4_ecnt_graph_1_13 graph_1)))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 75 13 40#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_29
    (shift (select __anonstruct_Graph_4_edges_graph_1_13 graph_1)
    (Int32.to_int pos_1)))) (0)))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 76 13 32#
    (is_vertex graph_1 (Int32.to_int f_1_0)
    __anonstruct_Graph_4_vsize_graph_1_13))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 77 13 32#
    (is_vertex graph_1 (Int32.to_int t_1_0)
    __anonstruct_Graph_4_vsize_graph_1_13))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 78 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_30
    (shift (select __anonstruct_Graph_4_vertices_graph_1_13 graph_1)
    (Int32.to_int f_1_0)))) (0))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_1.c" 79 13 40#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_30
   (shift (select __anonstruct_Graph_4_vertices_graph_1_13 graph_1)
   (Int32.to_int t_1_0)))) (0)))))))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (let _jessie_20 =
    (let _jessie_19 =
    (#"graph_1_c.jc" 194 79 91# "expl:Integer cast" (Safe_int32.of_int (1)))
    in
    begin
    (assert {
    (#"/home/debian/mfsp/examples/regions/graph_1.c" 89 4 34#
    "expl:Pointer index bounds" true) }); _jessie_19 end) in
    (let _jessie_21 =
    (#"/home/debian/mfsp/examples/regions/graph_1.c" 89 4 16#
    "expl:Pointer dereference"
    (acc  __anonstruct_Graph_4_graph_1_13_alloc_table
     __anonstruct_Graph_4_edges_graph_1_13 graph_1 )) in
    (let _jessie_22 = (Safe_int32.to_int  pos_1 ) in
    (let _jessie_23 = (shift_typesafe  _jessie_21 _jessie_22 ) in
    (#"/home/debian/mfsp/examples/regions/graph_1.c" 89 4 34#
    "expl:Pointer dereference"
    (upd_offset_typesafe  __anonstruct_Edge_3_edges_29_alloc_table
     __anonstruct_Edge_3_existent_0_edges_29 _jessie_21 _jessie_22 _jessie_20
     ))))));
     begin
     (let _jessie_25 =
     (let _jessie_24 = f_1_0 in
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 90 4 30#
     "expl:Pointer index bounds" true) }); _jessie_24 end) in
     (let _jessie_26 =
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 90 4 16#
     "expl:Pointer dereference"
     (acc  __anonstruct_Graph_4_graph_1_13_alloc_table
      __anonstruct_Graph_4_edges_graph_1_13 graph_1 )) in
     (let _jessie_27 = (Safe_int32.to_int  pos_1 ) in
     (let _jessie_28 = (shift_typesafe  _jessie_26 _jessie_27 ) in
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 90 4 30#
     "expl:Pointer dereference"
     (upd_offset_typesafe  __anonstruct_Edge_3_edges_29_alloc_table
      __anonstruct_Edge_3_from_edges_29 _jessie_26 _jessie_27 _jessie_25 ))))));
      begin
      (let _jessie_30 =
      (let _jessie_29 = t_1_0 in
      begin
      (assert {
      (#"/home/debian/mfsp/examples/regions/graph_1.c" 91 4 28#
      "expl:Pointer index bounds" true) }); _jessie_29 end) in
      (let _jessie_31 =
      (#"/home/debian/mfsp/examples/regions/graph_1.c" 91 4 16#
      "expl:Pointer dereference"
      (acc  __anonstruct_Graph_4_graph_1_13_alloc_table
       __anonstruct_Graph_4_edges_graph_1_13 graph_1 )) in
      (let _jessie_32 = (Safe_int32.to_int  pos_1 ) in
      (let _jessie_33 = (shift_typesafe  _jessie_31 _jessie_32 ) in
      (#"/home/debian/mfsp/examples/regions/graph_1.c" 91 4 28#
      "expl:Pointer dereference"
      (upd_offset_typesafe  __anonstruct_Edge_3_edges_29_alloc_table
       __anonstruct_Edge_3_to_edges_29 _jessie_31 _jessie_32 _jessie_30 ))))));
       (raise Return) end end; (raise Return) end with Return -> () end
  
end

module Function_insert_edge_behaviors
#"/home/debian/mfsp/examples/regions/graph_1.c" 87 5 53#
"expl:insert_edge, behaviors"

  use import core.Upd_unsafe 
  
  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import core.Shift_unsafe 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let insert_edge_ensures_default
  #"/home/debian/mfsp/examples/regions/graph_1.c" 87 5 53#
  "expl:Function insert_edge, default behavior" =
  fun
   (graph_1 : (pointer __anonstruct_Graph_4)) (pos_1 : Int32.t) (f_1_0 :
   Int32.t) (t_1_0 : Int32.t) (__anonstruct_Edge_3_from_edges_29 : ref
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_29 :
   ref (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_29 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_edges_29_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph_1_13_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_30_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_29_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_30 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph_1_13
   : (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_graph_1_13 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph_1_13 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_graph_1_13 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph_1_13 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 72 13 26#
    (#"graph_1_c.jc" 168 12 916#
    ((#"graph_1_c.jc" 168 12 916#
     ((<=) (offset_min __anonstruct_Graph_4_graph_1_13_alloc_table graph_1)
     (0)))
    /\
    (#"graph_1_c.jc" 168 12 916#
    ((#"graph_1_c.jc" 168 12 916#
     ((>=) (offset_max __anonstruct_Graph_4_graph_1_13_alloc_table graph_1)
     (0)))
    /\ (#"graph_1_c.jc" 168 12 916# ((=) true true)))))))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 73 13 25#
    (valid_0 graph_1 __anonstruct_Vertex_2_vertices_30_alloc_table
    __anonstruct_Edge_3_edges_29_alloc_table
    __anonstruct_Graph_4_esize_graph_1_13
    __anonstruct_Graph_4_ecnt_graph_1_13
    __anonstruct_Graph_4_edges_graph_1_13
    __anonstruct_Graph_4_vsize_graph_1_13
    __anonstruct_Graph_4_vertices_graph_1_13
    !__anonstruct_Edge_3_existent_0_edges_29 !__anonstruct_Edge_3_to_edges_29
    !__anonstruct_Edge_3_from_edges_29
    __anonstruct_Vertex_2_existent_vertices_30))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 74 13 21#
    (Int32.(<=) (#"graph_1_c.jc" 172 36 48# "expl:Integer cast" (Int32.of_int
    (0))) pos_1))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 74 18 35#
    (Int32.(<) pos_1 (select __anonstruct_Graph_4_ecnt_graph_1_13 graph_1)))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 75 13 40#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_29
    (shift (select __anonstruct_Graph_4_edges_graph_1_13 graph_1)
    (Int32.to_int pos_1)))) (0)))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 76 13 32#
    (is_vertex graph_1 (Int32.to_int f_1_0)
    __anonstruct_Graph_4_vsize_graph_1_13))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 77 13 32#
    (is_vertex graph_1 (Int32.to_int t_1_0)
    __anonstruct_Graph_4_vsize_graph_1_13))
   /\
   (#"graph_1_c.jc" 168 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 78 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_30
    (shift (select __anonstruct_Graph_4_vertices_graph_1_13 graph_1)
    (Int32.to_int f_1_0)))) (0))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_1.c" 79 13 40#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_30
   (shift (select __anonstruct_Graph_4_vertices_graph_1_13 graph_1)
   (Int32.to_int t_1_0)))) (0)))))))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
     "expl:Ensures clause"
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
      "expl:Ensures clause"
      (valid_0 graph_1 __anonstruct_Vertex_2_vertices_30_alloc_table
      __anonstruct_Edge_3_edges_29_alloc_table
      __anonstruct_Graph_4_esize_graph_1_13
      __anonstruct_Graph_4_ecnt_graph_1_13
      __anonstruct_Graph_4_edges_graph_1_13
      __anonstruct_Graph_4_vsize_graph_1_13
      __anonstruct_Graph_4_vertices_graph_1_13
      !__anonstruct_Edge_3_existent_0_edges_29
      !__anonstruct_Edge_3_to_edges_29 !__anonstruct_Edge_3_from_edges_29
      __anonstruct_Vertex_2_existent_vertices_30))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 83 12 38#
      "expl:Ensures clause"
      (not
      ((=)
      (Int32.to_int
      (select !__anonstruct_Edge_3_existent_0_edges_29
      (shift (select __anonstruct_Graph_4_edges_graph_1_13 graph_1)
      (Int32.to_int pos_1)))) (0))))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 84 12 39#
      "expl:Ensures clause"
      (Int32.(=)
      (select !__anonstruct_Edge_3_from_edges_29
      (shift (select __anonstruct_Graph_4_edges_graph_1_13 graph_1)
      (Int32.to_int pos_1))) f_1_0))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 85 12 37#
     "expl:Ensures clause"
     (Int32.(=)
     (select !__anonstruct_Edge_3_to_edges_29
     (shift (select __anonstruct_Graph_4_edges_graph_1_13 graph_1)
     (Int32.to_int pos_1))) t_1_0)))))))))) }  ->
   'Init:
   try
    begin
    (let _jessie_5 =
    (#"graph_1_c.jc" 194 79 91# "expl:Integer cast"
    (Unsafe_int32.of_int (1))) in
    (let _jessie_6 = (acc  __anonstruct_Graph_4_edges_graph_1_13 graph_1 ) in
    (let _jessie_7 = (Unsafe_int32.to_int  pos_1 ) in
    (let _jessie_8 = (shift_  _jessie_6 _jessie_7 ) in
    (upd  __anonstruct_Edge_3_existent_0_edges_29 _jessie_8 _jessie_5 )))));
     begin
     (let _jessie_10 = f_1_0 in
     (let _jessie_11 = (acc  __anonstruct_Graph_4_edges_graph_1_13 graph_1 )
     in
     (let _jessie_12 = (Unsafe_int32.to_int  pos_1 ) in
     (let _jessie_13 = (shift_  _jessie_11 _jessie_12 ) in
     (upd  __anonstruct_Edge_3_from_edges_29 _jessie_13 _jessie_10 )))));
      begin
      (let _jessie_15 = t_1_0 in
      (let _jessie_16 = (acc  __anonstruct_Graph_4_edges_graph_1_13 graph_1 )
      in
      (let _jessie_17 = (Unsafe_int32.to_int  pos_1 ) in
      (let _jessie_18 = (shift_  _jessie_16 _jessie_17 ) in
      (upd  __anonstruct_Edge_3_to_edges_29 _jessie_18 _jessie_15 )))));
       (raise Return) end end; (raise Return) end with Return -> () end
  
end

module Function_insert_edge_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_edge
  (graph_1 : (pointer __anonstruct_Graph_4)) 
   (pos_1 : Int32.t) 
    (f_1_0 : Int32.t) 
     (t_1_0 : Int32.t) 
      (__anonstruct_Edge_3_existent_0_edges_29 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Edge_3_to_edges_29 : ref (memory __anonstruct_Edge_3
        Int32.t)) 
        (__anonstruct_Edge_3_from_edges_29 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Vertex_2_vertices_30_alloc_table : (alloc_table
          __anonstruct_Vertex_2)) 
          (__anonstruct_Graph_4_graph_1_13_alloc_table : (alloc_table
           __anonstruct_Graph_4)) 
           (__anonstruct_Edge_3_edges_29_alloc_table : (alloc_table
            __anonstruct_Edge_3)) 
            (__anonstruct_Edge_3_edges_29_tag_table : (tag_table
             __anonstruct_Edge_3)) 
             (__anonstruct_Graph_4_esize_graph_1_13 : (memory
              __anonstruct_Graph_4 Int32.t)) 
              (__anonstruct_Graph_4_ecnt_graph_1_13 : (memory
               __anonstruct_Graph_4 Int32.t)) 
               (__anonstruct_Graph_4_edges_graph_1_13 : (memory
                __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                (__anonstruct_Graph_4_vsize_graph_1_13 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_vertices_graph_1_13 : (memory
                  __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                  (__anonstruct_Vertex_2_existent_vertices_30 : (memory
                   __anonstruct_Vertex_2 Int32.t)) : unit
                   requires {
                     ("expl:Internal"
                     (#"graph_1_c.jc" 168 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 72 13 26#
                      "expl:Requires clause"
                      (#"graph_1_c.jc" 168 12 916# "expl:Requires clause"
                      ((#"graph_1_c.jc" 168 12 916# "expl:Requires clause"
                       ((<=)
                       (offset_min
                       __anonstruct_Graph_4_graph_1_13_alloc_table graph_1)
                       (0)))
                      /\
                      (#"graph_1_c.jc" 168 12 916# "expl:Requires clause"
                      ((#"graph_1_c.jc" 168 12 916# "expl:Requires clause"
                       ((>=)
                       (offset_max
                       __anonstruct_Graph_4_graph_1_13_alloc_table graph_1)
                       (0)))
                      /\
                      (#"graph_1_c.jc" 168 12 916# "expl:Requires clause"
                      ((=) true true)))))))
                     /\
                     (#"graph_1_c.jc" 168 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 73 13 25#
                      "expl:Requires clause"
                      (valid_0 graph_1
                      __anonstruct_Vertex_2_vertices_30_alloc_table
                      __anonstruct_Edge_3_edges_29_alloc_table
                      __anonstruct_Graph_4_esize_graph_1_13
                      __anonstruct_Graph_4_ecnt_graph_1_13
                      __anonstruct_Graph_4_edges_graph_1_13
                      __anonstruct_Graph_4_vsize_graph_1_13
                      __anonstruct_Graph_4_vertices_graph_1_13
                      !__anonstruct_Edge_3_existent_0_edges_29
                      !__anonstruct_Edge_3_to_edges_29
                      !__anonstruct_Edge_3_from_edges_29
                      __anonstruct_Vertex_2_existent_vertices_30))
                     /\
                     (#"graph_1_c.jc" 168 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 74 13 21#
                      "expl:Requires clause"
                      (Int32.(<=) (#"graph_1_c.jc" 172 36 48#
                      "expl:Integer cast" (Int32.of_int (0))) pos_1))
                     /\
                     (#"graph_1_c.jc" 168 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 74 18 35#
                      "expl:Requires clause"
                      (Int32.(<) pos_1
                      (select __anonstruct_Graph_4_ecnt_graph_1_13 graph_1)))
                     /\
                     (#"graph_1_c.jc" 168 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 75 13 40#
                      "expl:Requires clause"
                      ((=)
                      (Int32.to_int
                      (select !__anonstruct_Edge_3_existent_0_edges_29
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_1_13 graph_1)
                      (Int32.to_int pos_1)))) (0)))
                     /\
                     (#"graph_1_c.jc" 168 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 76 13 32#
                      "expl:Requires clause"
                      (is_vertex graph_1 (Int32.to_int f_1_0)
                      __anonstruct_Graph_4_vsize_graph_1_13))
                     /\
                     (#"graph_1_c.jc" 168 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 77 13 32#
                      "expl:Requires clause"
                      (is_vertex graph_1 (Int32.to_int t_1_0)
                      __anonstruct_Graph_4_vsize_graph_1_13))
                     /\
                     (#"graph_1_c.jc" 168 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 78 13 40#
                      "expl:Requires clause"
                      (not
                      ((=)
                      (Int32.to_int
                      (select __anonstruct_Vertex_2_existent_vertices_30
                      (shift
                      (select __anonstruct_Graph_4_vertices_graph_1_13
                      graph_1) (Int32.to_int f_1_0)))) (0))))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 79 13 40#
                     "expl:Requires clause"
                     (not
                     ((=)
                     (Int32.to_int
                     (select __anonstruct_Vertex_2_existent_vertices_30
                     (shift
                     (select __anonstruct_Graph_4_vertices_graph_1_13
                     graph_1) (Int32.to_int t_1_0)))) (0)))))))))))))))))))))
                     }
                   reads { __anonstruct_Edge_3_existent_0_edges_29,
                   __anonstruct_Edge_3_from_edges_29,
                   __anonstruct_Edge_3_to_edges_29 } writes {
                   __anonstruct_Edge_3_existent_0_edges_29,
                   __anonstruct_Edge_3_from_edges_29,
                   __anonstruct_Edge_3_to_edges_29 }
                   ensures {
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
                     "expl:Ensures clause"
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
                      "expl:Ensures clause"
                      (valid_0 graph_1
                      __anonstruct_Vertex_2_vertices_30_alloc_table
                      __anonstruct_Edge_3_edges_29_alloc_table
                      __anonstruct_Graph_4_esize_graph_1_13
                      __anonstruct_Graph_4_ecnt_graph_1_13
                      __anonstruct_Graph_4_edges_graph_1_13
                      __anonstruct_Graph_4_vsize_graph_1_13
                      __anonstruct_Graph_4_vertices_graph_1_13
                      !__anonstruct_Edge_3_existent_0_edges_29
                      !__anonstruct_Edge_3_to_edges_29
                      !__anonstruct_Edge_3_from_edges_29
                      __anonstruct_Vertex_2_existent_vertices_30))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 83 12 38#
                      "expl:Ensures clause"
                      (not
                      ((=)
                      (Int32.to_int
                      (select !__anonstruct_Edge_3_existent_0_edges_29
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_1_13 graph_1)
                      (Int32.to_int pos_1)))) (0))))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 84 12 39#
                      "expl:Ensures clause"
                      (Int32.(=)
                      (select !__anonstruct_Edge_3_from_edges_29
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_1_13 graph_1)
                      (Int32.to_int pos_1))) f_1_0))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 85 12 37#
                     "expl:Ensures clause"
                     (Int32.(=)
                     (select !__anonstruct_Edge_3_to_edges_29
                     (shift
                     (select __anonstruct_Graph_4_edges_graph_1_13 graph_1)
                     (Int32.to_int pos_1))) t_1_0))))))))) }
  
end

module Function_insert_double_edge_safety
#"/home/debian/mfsp/examples/regions/graph_1.c" 117 5 86#
"expl:insert_double_edge, safety"

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_insert_edge_safe 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  let insert_double_edge
  #"/home/debian/mfsp/examples/regions/graph_1.c" 117 5 86#
  "expl:Function insert_double_edge, safety" =
  fun
   (graph : (pointer __anonstruct_Graph_4)) (pos : Int32.t) (pos2 : Int32.t)
   (f_2 : Int32.t) (t_2 : Int32.t) (f2 : Int32.t) (t2 : Int32.t)
   (__anonstruct_Edge_3_from_edges_31 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_31 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_existent_0_edges_31 :
   ref (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_edges_31_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph_14_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_32_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_31_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_32 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph_14 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_graph_14 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph_14 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_graph_14 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph_14 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 95 13 26#
    (#"graph_1_c.jc" 204 12 2006#
    ((#"graph_1_c.jc" 204 12 2006#
     ((<=) (offset_min __anonstruct_Graph_4_graph_14_alloc_table graph) (0)))
    /\
    (#"graph_1_c.jc" 204 12 2006#
    ((#"graph_1_c.jc" 204 12 2006#
     ((>=) (offset_max __anonstruct_Graph_4_graph_14_alloc_table graph) (0)))
    /\ (#"graph_1_c.jc" 204 12 2006# ((=) true true)))))))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 96 13 25#
    (valid_0 graph __anonstruct_Vertex_2_vertices_32_alloc_table
    __anonstruct_Edge_3_edges_31_alloc_table
    __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
    __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
    __anonstruct_Graph_4_vertices_graph_14
    !__anonstruct_Edge_3_existent_0_edges_31 !__anonstruct_Edge_3_to_edges_31
    !__anonstruct_Edge_3_from_edges_31
    __anonstruct_Vertex_2_existent_vertices_32))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 97 13 21#
    (Int32.(<=) (#"graph_1_c.jc" 208 36 48# "expl:Integer cast" (Int32.of_int
    (0))) pos))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 97 18 35#
    (Int32.(<) pos (select __anonstruct_Graph_4_ecnt_graph_14 graph)))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 98 13 22#
    (Int32.(<=) (#"graph_1_c.jc" 210 38 50# "expl:Integer cast" (Int32.of_int
    (0))) pos2))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 98 18 36#
    (Int32.(<) pos2 (select __anonstruct_Graph_4_ecnt_graph_14 graph)))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 99 13 24#
    (not (Int32.(=) pos pos2)))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 100 13 40#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_31
    (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
    (Int32.to_int pos)))) (0)))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 101 13 41#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_31
    (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
    (Int32.to_int pos2)))) (0)))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 102 13 32#
    (is_vertex graph (Int32.to_int f_2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 103 13 33#
    (is_vertex graph (Int32.to_int f2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 104 13 32#
    (is_vertex graph (Int32.to_int t_2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 105 13 33#
    (is_vertex graph (Int32.to_int t2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 106 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_32
    (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
    (Int32.to_int f_2)))) (0))))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 107 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_32
    (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
    (Int32.to_int t_2)))) (0))))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 108 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_32
    (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
    (Int32.to_int f2)))) (0))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_1.c" 109 13 41#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_32
   (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
   (Int32.to_int t2)))) (0)))))))))))))))))))))))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (let _jessie_45 = graph in
    (let _jessie_44 = pos in
    (let _jessie_43 = f_2 in
    (let _jessie_42 = t_2 in
    (#"/home/debian/mfsp/examples/regions/graph_1.c" 119 4 33#
    "expl:Precondition for insert_edge"
    (Function_insert_edge_safe.insert_edge  _jessie_45 _jessie_44 _jessie_43
     _jessie_42 __anonstruct_Edge_3_existent_0_edges_31
     __anonstruct_Edge_3_to_edges_31 __anonstruct_Edge_3_from_edges_31
     __anonstruct_Vertex_2_vertices_32_alloc_table
     __anonstruct_Graph_4_graph_14_alloc_table
     __anonstruct_Edge_3_edges_31_alloc_table
     __anonstruct_Edge_3_edges_31_tag_table
     __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
     __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
     __anonstruct_Graph_4_vertices_graph_14
     __anonstruct_Vertex_2_existent_vertices_32 ))))));
     begin
     any unit
     requires { true } reads { graph }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_1.c" 120 15 28#
       (#"/home/debian/mfsp/examples/regions/graph_1.c" 120 15 28#
       ((#"/home/debian/mfsp/examples/regions/graph_1.c" 120 15 28#
        ((<=) (offset_min __anonstruct_Graph_4_graph_14_alloc_table graph)
        (0)))
       /\
       (#"/home/debian/mfsp/examples/regions/graph_1.c" 120 15 28#
       ((#"/home/debian/mfsp/examples/regions/graph_1.c" 120 15 28#
        ((>=) (offset_max __anonstruct_Graph_4_graph_14_alloc_table graph)
        (0)))
       /\
       (#"/home/debian/mfsp/examples/regions/graph_1.c" 120 15 28#
       ((=) true true))))))) } ; () end;
     begin
     any unit
     requires { true } reads { f2, graph }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_1.c" 121 17 45#
       (not
       ((=)
       (Int32.to_int
       (select __anonstruct_Vertex_2_existent_vertices_32
       (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
       (Int32.to_int f2)))) (0)))) } ; () end;
     begin
     any unit
     requires { true } reads { __anonstruct_Edge_3_existent_0_edges_31,
     graph, pos2 }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_1.c" 122 17 45#
       ((=)
       (Int32.to_int
       (select !__anonstruct_Edge_3_existent_0_edges_31
       (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
       (Int32.to_int pos2)))) (0))) } ; () end;
     begin
     (let _jessie_49 = graph in
     (let _jessie_48 = pos2 in
     (let _jessie_47 = f2 in
     (let _jessie_46 = t2 in
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 123 6 38#
     "expl:Precondition for insert_edge"
     (Function_insert_edge_safe.insert_edge  _jessie_49 _jessie_48 _jessie_47
      _jessie_46 __anonstruct_Edge_3_existent_0_edges_31
      __anonstruct_Edge_3_to_edges_31 __anonstruct_Edge_3_from_edges_31
      __anonstruct_Vertex_2_vertices_32_alloc_table
      __anonstruct_Graph_4_graph_14_alloc_table
      __anonstruct_Edge_3_edges_31_alloc_table
      __anonstruct_Edge_3_edges_31_tag_table
      __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
      __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
      __anonstruct_Graph_4_vertices_graph_14
      __anonstruct_Vertex_2_existent_vertices_32 )))))); (raise Return) end;
     (raise Return) end with Return -> () end
  
end

module Function_insert_edge

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_edge
  (graph_1 : (pointer __anonstruct_Graph_4)) 
   (pos_1 : Int32.t) 
    (f_1_0 : Int32.t) 
     (t_1_0 : Int32.t) 
      (__anonstruct_Edge_3_existent_0_edges_29 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Edge_3_to_edges_29 : ref (memory __anonstruct_Edge_3
        Int32.t)) 
        (__anonstruct_Edge_3_from_edges_29 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Vertex_2_vertices_30_alloc_table : (alloc_table
          __anonstruct_Vertex_2)) 
          (__anonstruct_Graph_4_graph_1_13_alloc_table : (alloc_table
           __anonstruct_Graph_4)) 
           (__anonstruct_Edge_3_edges_29_alloc_table : (alloc_table
            __anonstruct_Edge_3)) 
            (__anonstruct_Edge_3_edges_29_tag_table : (tag_table
             __anonstruct_Edge_3)) 
             (__anonstruct_Graph_4_esize_graph_1_13 : (memory
              __anonstruct_Graph_4 Int32.t)) 
              (__anonstruct_Graph_4_ecnt_graph_1_13 : (memory
               __anonstruct_Graph_4 Int32.t)) 
               (__anonstruct_Graph_4_edges_graph_1_13 : (memory
                __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                (__anonstruct_Graph_4_vsize_graph_1_13 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_vertices_graph_1_13 : (memory
                  __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                  (__anonstruct_Vertex_2_existent_vertices_30 : (memory
                   __anonstruct_Vertex_2 Int32.t)) : unit
                   requires { true } reads {
                   __anonstruct_Edge_3_existent_0_edges_29,
                   __anonstruct_Edge_3_from_edges_29,
                   __anonstruct_Edge_3_to_edges_29 } writes {
                   __anonstruct_Edge_3_existent_0_edges_29,
                   __anonstruct_Edge_3_from_edges_29,
                   __anonstruct_Edge_3_to_edges_29 }
                   ensures {
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
                     "expl:Ensures clause"
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
                      "expl:Ensures clause"
                      (valid_0 graph_1
                      __anonstruct_Vertex_2_vertices_30_alloc_table
                      __anonstruct_Edge_3_edges_29_alloc_table
                      __anonstruct_Graph_4_esize_graph_1_13
                      __anonstruct_Graph_4_ecnt_graph_1_13
                      __anonstruct_Graph_4_edges_graph_1_13
                      __anonstruct_Graph_4_vsize_graph_1_13
                      __anonstruct_Graph_4_vertices_graph_1_13
                      !__anonstruct_Edge_3_existent_0_edges_29
                      !__anonstruct_Edge_3_to_edges_29
                      !__anonstruct_Edge_3_from_edges_29
                      __anonstruct_Vertex_2_existent_vertices_30))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 83 12 38#
                      "expl:Ensures clause"
                      (not
                      ((=)
                      (Int32.to_int
                      (select !__anonstruct_Edge_3_existent_0_edges_29
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_1_13 graph_1)
                      (Int32.to_int pos_1)))) (0))))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 82 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 84 12 39#
                      "expl:Ensures clause"
                      (Int32.(=)
                      (select !__anonstruct_Edge_3_from_edges_29
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_1_13 graph_1)
                      (Int32.to_int pos_1))) f_1_0))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 85 12 37#
                     "expl:Ensures clause"
                     (Int32.(=)
                     (select !__anonstruct_Edge_3_to_edges_29
                     (shift
                     (select __anonstruct_Graph_4_edges_graph_1_13 graph_1)
                     (Int32.to_int pos_1))) t_1_0))))))))) }
  
end

module Function_insert_double_edge_behaviors
#"/home/debian/mfsp/examples/regions/graph_1.c" 117 5 86#
"expl:insert_double_edge, behaviors"

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_insert_edge 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  let insert_double_edge_ensures_default
  #"/home/debian/mfsp/examples/regions/graph_1.c" 117 5 86#
  "expl:Function insert_double_edge, default behavior" =
  fun
   (graph : (pointer __anonstruct_Graph_4)) (pos : Int32.t) (pos2 : Int32.t)
   (f_2 : Int32.t) (t_2 : Int32.t) (f2 : Int32.t) (t2 : Int32.t)
   (__anonstruct_Edge_3_from_edges_31 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_31 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_existent_0_edges_31 :
   ref (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_edges_31_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph_14_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_32_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_31_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_32 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph_14 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_graph_14 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph_14 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_graph_14 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph_14 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 95 13 26#
    (#"graph_1_c.jc" 204 12 2006#
    ((#"graph_1_c.jc" 204 12 2006#
     ((<=) (offset_min __anonstruct_Graph_4_graph_14_alloc_table graph) (0)))
    /\
    (#"graph_1_c.jc" 204 12 2006#
    ((#"graph_1_c.jc" 204 12 2006#
     ((>=) (offset_max __anonstruct_Graph_4_graph_14_alloc_table graph) (0)))
    /\ (#"graph_1_c.jc" 204 12 2006# ((=) true true)))))))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 96 13 25#
    (valid_0 graph __anonstruct_Vertex_2_vertices_32_alloc_table
    __anonstruct_Edge_3_edges_31_alloc_table
    __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
    __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
    __anonstruct_Graph_4_vertices_graph_14
    !__anonstruct_Edge_3_existent_0_edges_31 !__anonstruct_Edge_3_to_edges_31
    !__anonstruct_Edge_3_from_edges_31
    __anonstruct_Vertex_2_existent_vertices_32))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 97 13 21#
    (Int32.(<=) (#"graph_1_c.jc" 208 36 48# "expl:Integer cast" (Int32.of_int
    (0))) pos))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 97 18 35#
    (Int32.(<) pos (select __anonstruct_Graph_4_ecnt_graph_14 graph)))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 98 13 22#
    (Int32.(<=) (#"graph_1_c.jc" 210 38 50# "expl:Integer cast" (Int32.of_int
    (0))) pos2))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 98 18 36#
    (Int32.(<) pos2 (select __anonstruct_Graph_4_ecnt_graph_14 graph)))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 99 13 24#
    (not (Int32.(=) pos pos2)))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 100 13 40#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_31
    (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
    (Int32.to_int pos)))) (0)))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 101 13 41#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_31
    (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
    (Int32.to_int pos2)))) (0)))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 102 13 32#
    (is_vertex graph (Int32.to_int f_2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 103 13 33#
    (is_vertex graph (Int32.to_int f2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 104 13 32#
    (is_vertex graph (Int32.to_int t_2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 105 13 33#
    (is_vertex graph (Int32.to_int t2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 106 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_32
    (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
    (Int32.to_int f_2)))) (0))))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 107 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_32
    (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
    (Int32.to_int t_2)))) (0))))
   /\
   (#"graph_1_c.jc" 204 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 108 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_32
    (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
    (Int32.to_int f2)))) (0))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_1.c" 109 13 41#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_32
   (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
   (Int32.to_int t2)))) (0)))))))))))))))))))))))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
     "expl:Ensures clause"
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
      "expl:Ensures clause"
      (not
      ((=)
      (Int32.to_int
      (select !__anonstruct_Edge_3_existent_0_edges_31
      (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
      (Int32.to_int pos)))) (0))))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 111 12 39#
      "expl:Ensures clause"
      (not
      ((=)
      (Int32.to_int
      (select !__anonstruct_Edge_3_existent_0_edges_31
      (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
      (Int32.to_int pos2)))) (0))))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 112 12 39#
      "expl:Ensures clause"
      (Int32.(=)
      (select !__anonstruct_Edge_3_from_edges_31
      (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
      (Int32.to_int pos))) f_2))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 113 12 41#
      "expl:Ensures clause"
      (Int32.(=)
      (select !__anonstruct_Edge_3_from_edges_31
      (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
      (Int32.to_int pos2))) f2))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 114 12 37#
      "expl:Ensures clause"
      (Int32.(=)
      (select !__anonstruct_Edge_3_to_edges_31
      (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
      (Int32.to_int pos))) t_2))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 115 12 39#
     "expl:Ensures clause"
     (Int32.(=)
     (select !__anonstruct_Edge_3_to_edges_31
     (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
     (Int32.to_int pos2))) t2)))))))))))))) }  ->
   'Init:
   try
    begin
    (let _jessie_37 = graph in
    (let _jessie_36 = pos in
    (let _jessie_35 = f_2 in
    (let _jessie_34 = t_2 in
    (#"/home/debian/mfsp/examples/regions/graph_1.c" 119 4 33#
    "expl:Precondition for insert_edge"
    (Function_insert_edge.insert_edge  _jessie_37 _jessie_36 _jessie_35
     _jessie_34 __anonstruct_Edge_3_existent_0_edges_31
     __anonstruct_Edge_3_to_edges_31 __anonstruct_Edge_3_from_edges_31
     __anonstruct_Vertex_2_vertices_32_alloc_table
     __anonstruct_Graph_4_graph_14_alloc_table
     __anonstruct_Edge_3_edges_31_alloc_table
     __anonstruct_Edge_3_edges_31_tag_table
     __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
     __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
     __anonstruct_Graph_4_vertices_graph_14
     __anonstruct_Vertex_2_existent_vertices_32 ))))));
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 120 15 28#
     "expl:Assertion in line 120"
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 120 15 28#
     "expl:Assertion in line 120"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 120 15 28#
      "expl:Assertion in line 120"
      ((<=) (offset_min __anonstruct_Graph_4_graph_14_alloc_table graph) (0)))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 120 15 28#
     "expl:Assertion in line 120"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 120 15 28#
      "expl:Assertion in line 120"
      ((>=) (offset_max __anonstruct_Graph_4_graph_14_alloc_table graph) (0)))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 120 15 28#
     "expl:Assertion in line 120" ((=) true true))))))) }); () end;
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 121 17 45#
     "expl:Assertion in line 121"
     (not
     ((=)
     (Int32.to_int
     (select __anonstruct_Vertex_2_existent_vertices_32
     (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
     (Int32.to_int f2)))) (0)))) }); () end;
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 122 17 45#
     "expl:Assertion in line 122"
     ((=)
     (Int32.to_int
     (select !__anonstruct_Edge_3_existent_0_edges_31
     (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
     (Int32.to_int pos2)))) (0))) }); () end;
     begin
     (let _jessie_41 = graph in
     (let _jessie_40 = pos2 in
     (let _jessie_39 = f2 in
     (let _jessie_38 = t2 in
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 123 6 38#
     "expl:Precondition for insert_edge"
     (Function_insert_edge.insert_edge  _jessie_41 _jessie_40 _jessie_39
      _jessie_38 __anonstruct_Edge_3_existent_0_edges_31
      __anonstruct_Edge_3_to_edges_31 __anonstruct_Edge_3_from_edges_31
      __anonstruct_Vertex_2_vertices_32_alloc_table
      __anonstruct_Graph_4_graph_14_alloc_table
      __anonstruct_Edge_3_edges_31_alloc_table
      __anonstruct_Edge_3_edges_31_tag_table
      __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
      __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
      __anonstruct_Graph_4_vertices_graph_14
      __anonstruct_Vertex_2_existent_vertices_32 )))))); (raise Return) end;
     (raise Return) end with Return -> () end
  
end

theory Root_struct___anonstruct_Graph_4_xP

  use why3.Bool.Bool 
  
  type struct___anonstruct_Graph_4_xP 
  
end

theory Struct_struct___anonstruct_Graph_4_xP

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root_struct___anonstruct_Graph_4_xP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function struct___anonstruct_Graph_4_xP_tag  : (tag_id
  struct___anonstruct_Graph_4_xP)
  
  axiom Struct___anonstruct_Graph_4_xP_parenttag_bottom  :
  (parenttag struct___anonstruct_Graph_4_xP_tag bottom_tag)
  
  axiom Struct___anonstruct_Graph_4_xP_is_final  :
  (forall struct___anonstruct_Graph_4_xP_tag_table : (tag_table
   struct___anonstruct_Graph_4_xP).
   (forall p : (pointer struct___anonstruct_Graph_4_xP).
    ((instanceof struct___anonstruct_Graph_4_xP_tag_table p
     struct___anonstruct_Graph_4_xP_tag) ->
     ((=) (typeof struct___anonstruct_Graph_4_xP_tag_table p)
     struct___anonstruct_Graph_4_xP_tag))))
  
  predicate frame_tag_struct_struct___anonstruct_Graph_4_xP (p : (pointer
  struct___anonstruct_Graph_4_xP))
  (old_struct___anonstruct_Graph_4_xP_tag_table : (tag_table
  struct___anonstruct_Graph_4_xP)) (struct___anonstruct_Graph_4_xP_tag_table
  : (tag_table struct___anonstruct_Graph_4_xP))
  =
     ((tag_extends old_struct___anonstruct_Graph_4_xP_tag_table
      struct___anonstruct_Graph_4_xP_tag_table)
     /\
     (alloc_tag_block old_struct___anonstruct_Graph_4_xP_tag_table
     struct___anonstruct_Graph_4_xP_tag_table p))
  
  predicate frame_free_struct_struct___anonstruct_Graph_4_xP (p : (pointer
  struct___anonstruct_Graph_4_xP))
  (old_struct___anonstruct_Graph_4_xP_alloc_table : (alloc_table
  struct___anonstruct_Graph_4_xP))
  (struct___anonstruct_Graph_4_xP_alloc_table : (alloc_table
  struct___anonstruct_Graph_4_xP))
  =
     ((free_extends old_struct___anonstruct_Graph_4_xP_alloc_table
      struct___anonstruct_Graph_4_xP_alloc_table)
     /\
     (free_block old_struct___anonstruct_Graph_4_xP_alloc_table
     struct___anonstruct_Graph_4_xP_alloc_table p))
  
  predicate frame_alloc_struct_struct___anonstruct_Graph_4_xP (p : (pointer
  struct___anonstruct_Graph_4_xP)) (n : int)
  (old_struct___anonstruct_Graph_4_xP_alloc_table : (alloc_table
  struct___anonstruct_Graph_4_xP))
  (struct___anonstruct_Graph_4_xP_alloc_table : (alloc_table
  struct___anonstruct_Graph_4_xP))
  =
     ((alloc_extends old_struct___anonstruct_Graph_4_xP_alloc_table
      struct___anonstruct_Graph_4_xP_alloc_table)
     /\
     (alloc_block old_struct___anonstruct_Graph_4_xP_alloc_table
     struct___anonstruct_Graph_4_xP_alloc_table p n))
  
  predicate fresh_tag_struct_struct___anonstruct_Graph_4_xP (p : (pointer
  struct___anonstruct_Graph_4_xP)) (n : int)
  (struct___anonstruct_Graph_4_xP_tag_table : (tag_table
  struct___anonstruct_Graph_4_xP))
  = (tag_fresh struct___anonstruct_Graph_4_xP_tag_table p)
  
  predicate fresh_alloc_struct_struct___anonstruct_Graph_4_xP (p : (pointer
  struct___anonstruct_Graph_4_xP)) (n : int)
  (struct___anonstruct_Graph_4_xP_alloc_table : (alloc_table
  struct___anonstruct_Graph_4_xP))
  = (alloc_fresh struct___anonstruct_Graph_4_xP_alloc_table p)
  
  predicate container_of_singleton_struct_struct___anonstruct_Graph_4_xP (p :
  (pointer struct___anonstruct_Graph_4_xP))
  (struct___anonstruct_Graph_4_xP_tag_table : (tag_table
  struct___anonstruct_Graph_4_xP)) = true
  
  predicate container_of_struct_struct___anonstruct_Graph_4_xP (p : (pointer
  struct___anonstruct_Graph_4_xP)) (l : int) (r : int)
  (struct___anonstruct_Graph_4_xP_tag_table : (tag_table
  struct___anonstruct_Graph_4_xP)) = true
  
  predicate typeof_singleton_struct_struct___anonstruct_Graph_4_xP (p :
  (pointer struct___anonstruct_Graph_4_xP))
  (struct___anonstruct_Graph_4_xP_tag_table : (tag_table
  struct___anonstruct_Graph_4_xP))
  =
     ((=) (typeof struct___anonstruct_Graph_4_xP_tag_table p)
     struct___anonstruct_Graph_4_xP_tag)
  
  predicate typeof_struct_struct___anonstruct_Graph_4_xP (p : (pointer
  struct___anonstruct_Graph_4_xP)) (l : int) (r : int)
  (struct___anonstruct_Graph_4_xP_tag_table : (tag_table
  struct___anonstruct_Graph_4_xP))
  =
     (((=) (typeof struct___anonstruct_Graph_4_xP_tag_table p)
      struct___anonstruct_Graph_4_xP_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof struct___anonstruct_Graph_4_xP_tag_table (shift p i))
       struct___anonstruct_Graph_4_xP_tag))))
  
  predicate instanceof_singleton_struct_struct___anonstruct_Graph_4_xP (p :
  (pointer struct___anonstruct_Graph_4_xP))
  (struct___anonstruct_Graph_4_xP_tag_table : (tag_table
  struct___anonstruct_Graph_4_xP))
  =
     (instanceof struct___anonstruct_Graph_4_xP_tag_table p
     struct___anonstruct_Graph_4_xP_tag)
  
  predicate instanceof_struct_struct___anonstruct_Graph_4_xP (p : (pointer
  struct___anonstruct_Graph_4_xP)) (l : int) (r : int)
  (struct___anonstruct_Graph_4_xP_tag_table : (tag_table
  struct___anonstruct_Graph_4_xP))
  =
     ((instanceof struct___anonstruct_Graph_4_xP_tag_table p
      struct___anonstruct_Graph_4_xP_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof struct___anonstruct_Graph_4_xP_tag_table (shift p i)
       struct___anonstruct_Graph_4_xP_tag))))
  
  predicate right_valid_struct_struct___anonstruct_Graph_4_xP (p : (pointer
  struct___anonstruct_Graph_4_xP)) (b : int)
  (struct___anonstruct_Graph_4_xP_alloc_table : (alloc_table
  struct___anonstruct_Graph_4_xP))
  = ((>=) (offset_max struct___anonstruct_Graph_4_xP_alloc_table p) b)
  
  predicate left_valid_struct_struct___anonstruct_Graph_4_xP (p : (pointer
  struct___anonstruct_Graph_4_xP)) (a : int)
  (struct___anonstruct_Graph_4_xP_alloc_table : (alloc_table
  struct___anonstruct_Graph_4_xP))
  = ((<=) (offset_min struct___anonstruct_Graph_4_xP_alloc_table p) a)
  
  predicate strict_left_valid_struct_struct___anonstruct_Graph_4_xP (p :
  (pointer struct___anonstruct_Graph_4_xP)) (a : int)
  (struct___anonstruct_Graph_4_xP_alloc_table : (alloc_table
  struct___anonstruct_Graph_4_xP))
  = ((=) (offset_min struct___anonstruct_Graph_4_xP_alloc_table p) a)
  
  predicate valid_struct_struct___anonstruct_Graph_4_xP (p : (pointer
  struct___anonstruct_Graph_4_xP)) (a : int) (b : int)
  (struct___anonstruct_Graph_4_xP_alloc_table : (alloc_table
  struct___anonstruct_Graph_4_xP))
  =
     (((<=) (offset_min struct___anonstruct_Graph_4_xP_alloc_table p) a) /\
     ((>=) (offset_max struct___anonstruct_Graph_4_xP_alloc_table p) b))
  
  predicate strict_valid_struct_struct___anonstruct_Graph_4_xP (p : (pointer
  struct___anonstruct_Graph_4_xP)) (a : int) (b : int)
  (struct___anonstruct_Graph_4_xP_alloc_table : (alloc_table
  struct___anonstruct_Graph_4_xP))
  =
     (((=) (offset_min struct___anonstruct_Graph_4_xP_alloc_table p) a) /\
     ((=) (offset_max struct___anonstruct_Graph_4_xP_alloc_table p) b))
  
  axiom Struct___anonstruct_Graph_4_xP_int  :
  ((=) (int_of_tag struct___anonstruct_Graph_4_xP_tag) (7))
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto_while_0_break_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Function_insert_edge_to_graphs_safety
#"/home/debian/mfsp/examples/regions/graph_1.c" 147 5 72#
"expl:insert_edge_to_graphs, safety"

  use import core.Tag_table_type 
  
  use import Struct_struct___anonstruct_Graph_4_xP 
  
  use Safe_int32 
  
  use import Root_struct___anonstruct_Graph_4_xP 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_insert_edge_safe 
  
  use import Exceptions 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Acc_offset_safe 
  
  use why3.Bool.Bool 
  
  let insert_edge_to_graphs
  #"/home/debian/mfsp/examples/regions/graph_1.c" 147 5 72#
  "expl:Function insert_edge_to_graphs, safety" =
  fun
   (graphs : (pointer struct___anonstruct_Graph_4_xP)) (n_1_0 : Int32.t)
   (pos_3 : Int32.t) (f_3 : Int32.t) (t_3 : Int32.t)
   (__anonstruct_Edge_3_from_edges_34 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_34 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_existent_0_edges_34 :
   ref (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_edges_34_alloc_table : (alloc_table
   __anonstruct_Edge_3))
   (__anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_35_alloc_table : (alloc_table
   __anonstruct_Vertex_2))
   (struct___anonstruct_Graph_4_xP_graphs_15_alloc_table : (alloc_table
   struct___anonstruct_Graph_4_xP))
   (struct___anonstruct_Graph_4_xP_graphs_15_tag_table : (tag_table
   struct___anonstruct_Graph_4_xP)) (__anonstruct_Edge_3_edges_34_tag_table :
   (tag_table __anonstruct_Edge_3))
   (struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15 :
   (memory struct___anonstruct_Graph_4_xP (pointer __anonstruct_Graph_4)))
   (__anonstruct_Vertex_2_existent_vertices_35 : (memory
   __anonstruct_Vertex_2 Int32.t))
   (__anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33 : (memory
   __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_struct___anonstruct_Graph_4_xM_33 : (memory
   __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_esize_struct___anonstruct_Graph_4_xM_33 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (((allocated struct___anonstruct_Graph_4_xP_graphs_15_alloc_table graphs)
     ->
     (((=) (typeof struct___anonstruct_Graph_4_xP_graphs_15_tag_table graphs)
      struct___anonstruct_Graph_4_xP_tag)
     /\
     (forall i : int.
      ((((<=)
        (offset_min struct___anonstruct_Graph_4_xP_graphs_15_alloc_table
        graphs) i)
       /\
       ((<) i
       (offset_max struct___anonstruct_Graph_4_xP_graphs_15_alloc_table
       graphs))) ->
       ((=)
       (typeof struct___anonstruct_Graph_4_xP_graphs_15_tag_table
       (shift graphs i)) struct___anonstruct_Graph_4_xP_tag)))))
   /\
   (#"graph_1_c.jc" 288 12 3239#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 129 13 19#
    (Int32.(>=) n_1_0 (#"graph_1_c.jc" 288 29 41# "expl:Integer cast"
    (Int32.of_int (0)))))
   /\
   (#"graph_1_c.jc" 288 12 3239#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 130 13 42#
    (if ((<=) (0) (Int.(-) (Int32.to_int n_1_0) (1))) then
     (((<=)
      (offset_min struct___anonstruct_Graph_4_xP_graphs_15_alloc_table
      graphs) (0))
     /\
     (((>=)
      (offset_max struct___anonstruct_Graph_4_xP_graphs_15_alloc_table
      graphs) (Int.(-) (Int32.to_int n_1_0) (1)))
     /\
     (forall __framac_tmp7 : int.
      ((((<=) (0) __framac_tmp7) /\
       ((<=) __framac_tmp7 (Int.(-) (Int32.to_int n_1_0) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_1.c" 131 13 565#
   (forall k_11 : int.
    ((((<=) (0) k_11) /\ ((<) k_11 (Int32.to_int n_1_0))) ->
     ((((<=)
       (offset_min
       __anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
       (select
       struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
       (shift graphs k_11))) (0))
      /\
      (((>=)
       (offset_max
       __anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
       (select
       struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
       (shift graphs k_11))) (0))
      /\ ((=) true true)))
     /\
     ((valid_0
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11)) __anonstruct_Vertex_2_vertices_35_alloc_table
      __anonstruct_Edge_3_edges_34_alloc_table
      __anonstruct_Graph_4_esize_struct___anonstruct_Graph_4_xM_33
      __anonstruct_Graph_4_ecnt_struct___anonstruct_Graph_4_xM_33
      __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
      __anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33
      __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
      !__anonstruct_Edge_3_existent_0_edges_34
      !__anonstruct_Edge_3_to_edges_34 !__anonstruct_Edge_3_from_edges_34
      __anonstruct_Vertex_2_existent_vertices_35)
     /\
     ((Int32.(<=) (#"graph_1_c.jc" 307 39 51# "expl:Integer cast"
      (Int32.of_int (0))) pos_3)
     /\
     ((Int32.(<) pos_3
      (select __anonstruct_Graph_4_ecnt_struct___anonstruct_Graph_4_xM_33
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11))))
     /\
     (((=)
      (Int32.to_int
      (select !__anonstruct_Edge_3_existent_0_edges_34
      (shift
      (select __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11))) (Int32.to_int pos_3)))) (0))
     /\
     ((is_vertex
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11)) (Int32.to_int f_3)
      __anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33)
     /\
     ((is_vertex
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11)) (Int32.to_int t_3)
      __anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33)
     /\
     ((not
      ((=)
      (Int32.to_int
      (select __anonstruct_Vertex_2_existent_vertices_35
      (shift
      (select __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11))) (Int32.to_int f_3)))) (0)))
     /\
     ((not
      ((=)
      (Int32.to_int
      (select __anonstruct_Vertex_2_existent_vertices_35
      (shift
      (select __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11))) (Int32.to_int t_3)))) (0)))
     /\
     ((forall k2_1 : int.
       ((((<=) (0) k2_1) /\ ((<) k2_1 (Int32.to_int n_1_0))) ->
        (not
        (same_block
        (select
        __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
        (select
        struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
        (shift graphs k_11)))
        (select
        __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
        (select
        struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
        (shift graphs k2_1)))))))
     /\
     (forall k2_2 : int.
      ((((<=) (0) k2_2) /\ ((<) k2_2 (Int32.to_int n_1_0))) ->
       (not
       (same_block
       (select __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
       (select
       struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
       (shift graphs k_11)))
       (select __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
       (select
       struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
       (shift graphs k2_2))))))))))))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (let i = ref (Safe_int32.any_  () ) in
    try
     begin
     (i :=
      (let _jessie_61 =
      (#"graph_1_c.jc" 346 20 32# "expl:Integer cast"
      (Safe_int32.of_int (0))) in
      begin
      (assert {
      (#"/home/debian/mfsp/examples/regions/graph_1.c" 156 13 14#
      "expl:Pointer index bounds" true) }); _jessie_61 end));
      'LoopEntry:
      begin
      'LoopEntry:
      'Loop_2:
      loop
      invariant { (#"graph_1_c.jc" 348 6 5128# true) }
        variant { (#"/home/debian/mfsp/examples/regions/graph_1.c" 154 21 26#
          (Int.(-) (Int32.to_int n_1_0) (Int32.to_int !i))) }
       begin
       any unit
       requires { true } reads { __anonstruct_Edge_3_existent_0_edges_34,
       __anonstruct_Edge_3_from_edges_34, __anonstruct_Edge_3_to_edges_34,
       f_3, graphs, n_1_0, pos_3, t_3 }
       ensures {
         ((#"/home/debian/mfsp/examples/regions/graph_1.c" 153 23 34#
          (#"/home/debian/mfsp/examples/regions/graph_1.c" 153 23 34#
          ((#"/home/debian/mfsp/examples/regions/graph_1.c" 153 23 29#
           (Int32.(<=) (#"graph_1_c.jc" 376 38 50# "expl:Integer cast"
           (Int32.of_int (0))) !i))
          /\
          (#"/home/debian/mfsp/examples/regions/graph_1.c" 153 28 34#
          (Int32.(<=) !i n_1_0)))))
         /\
         ((#"/home/debian/mfsp/examples/regions/graph_1.c" 152 23 155#
          (forall k_10 : int.
           ((((<=) (0) k_10) /\ ((<) k_10 (Int32.to_int !i))) ->
            ((not
             ((=)
             (Int32.to_int
             (select !__anonstruct_Edge_3_existent_0_edges_34
             (shift
             (select
             __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
             (select
             struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
             (shift graphs k_10))) (Int32.to_int pos_3)))) (0)))
            /\
            ((Int32.(=)
             (select !__anonstruct_Edge_3_from_edges_34
             (shift
             (select
             __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
             (select
             struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
             (shift graphs k_10))) (Int32.to_int pos_3))) f_3)
            /\
            (Int32.(=)
            (select !__anonstruct_Edge_3_to_edges_34
            (shift
            (select
            __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
            (select
            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
            (shift graphs k_10))) (Int32.to_int pos_3))) t_3))))))
         /\
         ((#"/home/debian/mfsp/examples/regions/graph_1.c" 151 23 154#
          (forall k_9 : int.
           ((((<=) (0) k_9) /\ ((<) k_9 (Int32.to_int n_1_0))) ->
            (forall k2_0 : int.
             ((((<=) (0) k2_0) /\ ((<) k2_0 (Int32.to_int n_1_0))) ->
              (not
              (same_block
              (select
              __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
              (select
              struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
              (shift graphs k_9)))
              (select
              __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
              (select
              struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
              (shift graphs k2_0))))))))))
         /\
         (#"/home/debian/mfsp/examples/regions/graph_1.c" 150 23 160#
         (forall k_8 : int.
          ((((<=) (0) k_8) /\ ((<) k_8 (Int32.to_int n_1_0))) ->
           (forall k2 : int.
            ((((<=) (0) k2) /\ ((<) k2 (Int32.to_int n_1_0))) ->
             (not
             (same_block
             (select
             __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
             (select
             struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
             (shift graphs k_8)))
             (select
             __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
             (select
             struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
             (shift graphs k2))))))))))))) } ;
        try
         begin
         'LoopCurrent:
         begin
         'LoopCurrent:
         (if
         (#"/home/debian/mfsp/examples/regions/graph_1.c" 156 20 25#
         (Safe_int32.(<)  !i n_1_0 )) then ()
         else (raise (Goto_while_0_break_exc ())));
          begin
          (let _jessie_59 =
          (#"/home/debian/mfsp/examples/regions/graph_1.c" 157 20 29#
          "expl:Pointer dereference"
          (acc_offset_typesafe 
           struct___anonstruct_Graph_4_xP_graphs_15_alloc_table
           struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
           graphs (Safe_int32.to_int  !i ) )) in
          (let _jessie_58 = pos_3 in
          (let _jessie_57 = f_3 in
          (let _jessie_56 = t_3 in
          (#"/home/debian/mfsp/examples/regions/graph_1.c" 157 8 41#
          "expl:Precondition for insert_edge"
          (Function_insert_edge_safe.insert_edge  _jessie_59 _jessie_58
           _jessie_57 _jessie_56 __anonstruct_Edge_3_existent_0_edges_34
           __anonstruct_Edge_3_to_edges_34 __anonstruct_Edge_3_from_edges_34
           __anonstruct_Vertex_2_vertices_35_alloc_table
           __anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
           __anonstruct_Edge_3_edges_34_alloc_table
           __anonstruct_Edge_3_edges_34_tag_table
           __anonstruct_Graph_4_esize_struct___anonstruct_Graph_4_xM_33
           __anonstruct_Graph_4_ecnt_struct___anonstruct_Graph_4_xM_33
           __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
           __anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33
           __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
           __anonstruct_Vertex_2_existent_vertices_35 ))))));
           begin
           any unit
           requires { true } reads { graphs, n_1_0 }
           ensures {
             (#"/home/debian/mfsp/examples/regions/graph_1.c" 158 19 57#
             (((Int32.(>=) n_1_0 (#"graph_1_c.jc" 389 64 76#
               "expl:Integer cast" (Int32.of_int (2))))
              /\
              (Int32.(=) !i (#"graph_1_c.jc" 391 65 77# "expl:Integer cast"
              (Int32.of_int (0))))) ->
              (((<=)
               (offset_min
               __anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
               (select
               struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
               (shift graphs (1)))) (0))
              /\
              (((>=)
               (offset_max
               __anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
               (select
               struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
               (shift graphs (1)))) (0))
              /\ ((=) true true))))) } ; () end;
           begin
           any unit
           requires { true } reads { f_3, graphs, n_1_0 }
           ensures {
             (#"/home/debian/mfsp/examples/regions/graph_1.c" 159 21 73#
             (((Int32.(>=) n_1_0 (#"graph_1_c.jc" 408 64 76#
               "expl:Integer cast" (Int32.of_int (2))))
              /\
              (Int32.(=) !i (#"graph_1_c.jc" 410 65 77# "expl:Integer cast"
              (Int32.of_int (0))))) ->
              (not
              ((=)
              (Int32.to_int
              (select __anonstruct_Vertex_2_existent_vertices_35
              (shift
              (select
              __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
              (select
              struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
              (shift graphs (1)))) (Int32.to_int f_3)))) (0))))) } ; () end;
           begin
           any unit
           requires { true } reads { __anonstruct_Edge_3_existent_0_edges_34,
           graphs, n_1_0, pos_3 }
           ensures {
             (#"/home/debian/mfsp/examples/regions/graph_1.c" 160 21 73#
             (((Int32.(>=) n_1_0 (#"graph_1_c.jc" 420 64 76#
               "expl:Integer cast" (Int32.of_int (2))))
              /\
              (Int32.(=) !i (#"graph_1_c.jc" 422 65 77# "expl:Integer cast"
              (Int32.of_int (0))))) ->
              ((=)
              (Int32.to_int
              (select !__anonstruct_Edge_3_existent_0_edges_34
              (shift
              (select
              __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
              (select
              struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
              (shift graphs (1)))) (Int32.to_int pos_3)))) (0)))) } ; () end
          end;
          (i :=
           (let _jessie_60 =
           (Safe_int32.(+)  !i
            (#"graph_1_c.jc" 429 50 62# "expl:Integer cast"
            (Safe_int32.of_int (1))) ) in
           begin
           (assert {
           (#"/home/debian/mfsp/examples/regions/graph_1.c" 156 27 30#
           "expl:Pointer index bounds" true) }); _jessie_60 end)) end;
          (raise (Loop_continue_exc ())) end with Loop_continue_exc _jessie_3
         -> () end end end; (raise (Goto_while_0_break_exc ())) end end with
     Goto_while_0_break_exc _jessie_1 ->
     'While_0_break: 'While_0_break: begin (); (raise Return) end end);
     (raise Return) end with Return -> () end
  
end

module Function_insert_edge_to_graphs_behaviors
#"/home/debian/mfsp/examples/regions/graph_1.c" 147 5 72#
"expl:insert_edge_to_graphs, behaviors"

  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import Struct_struct___anonstruct_Graph_4_xP 
  
  use import core.Shift_unsafe 
  
  use import Root_struct___anonstruct_Graph_4_xP 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_insert_edge 
  
  use import Exceptions 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let insert_edge_to_graphs_ensures_default
  #"/home/debian/mfsp/examples/regions/graph_1.c" 147 5 72#
  "expl:Function insert_edge_to_graphs, default behavior" =
  fun
   (graphs : (pointer struct___anonstruct_Graph_4_xP)) (n_1_0 : Int32.t)
   (pos_3 : Int32.t) (f_3 : Int32.t) (t_3 : Int32.t)
   (__anonstruct_Edge_3_from_edges_34 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_34 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_existent_0_edges_34 :
   ref (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_edges_34_alloc_table : (alloc_table
   __anonstruct_Edge_3))
   (__anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_35_alloc_table : (alloc_table
   __anonstruct_Vertex_2))
   (struct___anonstruct_Graph_4_xP_graphs_15_alloc_table : (alloc_table
   struct___anonstruct_Graph_4_xP))
   (struct___anonstruct_Graph_4_xP_graphs_15_tag_table : (tag_table
   struct___anonstruct_Graph_4_xP)) (__anonstruct_Edge_3_edges_34_tag_table :
   (tag_table __anonstruct_Edge_3))
   (struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15 :
   (memory struct___anonstruct_Graph_4_xP (pointer __anonstruct_Graph_4)))
   (__anonstruct_Vertex_2_existent_vertices_35 : (memory
   __anonstruct_Vertex_2 Int32.t))
   (__anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33 : (memory
   __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_struct___anonstruct_Graph_4_xM_33 : (memory
   __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_esize_struct___anonstruct_Graph_4_xM_33 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (((allocated struct___anonstruct_Graph_4_xP_graphs_15_alloc_table graphs)
     ->
     (((=) (typeof struct___anonstruct_Graph_4_xP_graphs_15_tag_table graphs)
      struct___anonstruct_Graph_4_xP_tag)
     /\
     (forall i : int.
      ((((<=)
        (offset_min struct___anonstruct_Graph_4_xP_graphs_15_alloc_table
        graphs) i)
       /\
       ((<) i
       (offset_max struct___anonstruct_Graph_4_xP_graphs_15_alloc_table
       graphs))) ->
       ((=)
       (typeof struct___anonstruct_Graph_4_xP_graphs_15_tag_table
       (shift graphs i)) struct___anonstruct_Graph_4_xP_tag)))))
   /\
   (#"graph_1_c.jc" 288 12 3239#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 129 13 19#
    (Int32.(>=) n_1_0 (#"graph_1_c.jc" 288 29 41# "expl:Integer cast"
    (Int32.of_int (0)))))
   /\
   (#"graph_1_c.jc" 288 12 3239#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 130 13 42#
    (if ((<=) (0) (Int.(-) (Int32.to_int n_1_0) (1))) then
     (((<=)
      (offset_min struct___anonstruct_Graph_4_xP_graphs_15_alloc_table
      graphs) (0))
     /\
     (((>=)
      (offset_max struct___anonstruct_Graph_4_xP_graphs_15_alloc_table
      graphs) (Int.(-) (Int32.to_int n_1_0) (1)))
     /\
     (forall __framac_tmp7 : int.
      ((((<=) (0) __framac_tmp7) /\
       ((<=) __framac_tmp7 (Int.(-) (Int32.to_int n_1_0) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_1.c" 131 13 565#
   (forall k_11 : int.
    ((((<=) (0) k_11) /\ ((<) k_11 (Int32.to_int n_1_0))) ->
     ((((<=)
       (offset_min
       __anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
       (select
       struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
       (shift graphs k_11))) (0))
      /\
      (((>=)
       (offset_max
       __anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
       (select
       struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
       (shift graphs k_11))) (0))
      /\ ((=) true true)))
     /\
     ((valid_0
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11)) __anonstruct_Vertex_2_vertices_35_alloc_table
      __anonstruct_Edge_3_edges_34_alloc_table
      __anonstruct_Graph_4_esize_struct___anonstruct_Graph_4_xM_33
      __anonstruct_Graph_4_ecnt_struct___anonstruct_Graph_4_xM_33
      __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
      __anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33
      __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
      !__anonstruct_Edge_3_existent_0_edges_34
      !__anonstruct_Edge_3_to_edges_34 !__anonstruct_Edge_3_from_edges_34
      __anonstruct_Vertex_2_existent_vertices_35)
     /\
     ((Int32.(<=) (#"graph_1_c.jc" 307 39 51# "expl:Integer cast"
      (Int32.of_int (0))) pos_3)
     /\
     ((Int32.(<) pos_3
      (select __anonstruct_Graph_4_ecnt_struct___anonstruct_Graph_4_xM_33
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11))))
     /\
     (((=)
      (Int32.to_int
      (select !__anonstruct_Edge_3_existent_0_edges_34
      (shift
      (select __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11))) (Int32.to_int pos_3)))) (0))
     /\
     ((is_vertex
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11)) (Int32.to_int f_3)
      __anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33)
     /\
     ((is_vertex
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11)) (Int32.to_int t_3)
      __anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33)
     /\
     ((not
      ((=)
      (Int32.to_int
      (select __anonstruct_Vertex_2_existent_vertices_35
      (shift
      (select __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11))) (Int32.to_int f_3)))) (0)))
     /\
     ((not
      ((=)
      (Int32.to_int
      (select __anonstruct_Vertex_2_existent_vertices_35
      (shift
      (select __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
      (select
      struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
      (shift graphs k_11))) (Int32.to_int t_3)))) (0)))
     /\
     ((forall k2_1 : int.
       ((((<=) (0) k2_1) /\ ((<) k2_1 (Int32.to_int n_1_0))) ->
        (not
        (same_block
        (select
        __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
        (select
        struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
        (shift graphs k_11)))
        (select
        __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
        (select
        struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
        (shift graphs k2_1)))))))
     /\
     (forall k2_2 : int.
      ((((<=) (0) k2_2) /\ ((<) k2_2 (Int32.to_int n_1_0))) ->
       (not
       (same_block
       (select __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
       (select
       struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
       (shift graphs k_11)))
       (select __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
       (select
       struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
       (shift graphs k2_2))))))))))))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 142 12 168#
     "expl:Ensures clause"
     (forall k_12 : int.
      ((((<=) (0) k_12) /\ ((<) k_12 (Int32.to_int n_1_0))) ->
       ((not
        ((=)
        (Int32.to_int
        (select !__anonstruct_Edge_3_existent_0_edges_34
        (shift
        (select __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
        (select
        struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
        (shift graphs k_12))) (Int32.to_int pos_3)))) (0)))
       /\
       ((Int32.(=)
        (select !__anonstruct_Edge_3_from_edges_34
        (shift
        (select __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
        (select
        struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
        (shift graphs k_12))) (Int32.to_int pos_3))) f_3)
       /\
       (Int32.(=)
       (select !__anonstruct_Edge_3_to_edges_34
       (shift
       (select __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
       (select
       struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
       (shift graphs k_12))) (Int32.to_int pos_3))) t_3))))))) } diverges  ->
   'Init:
   try
    begin
    (let i = ref (Unsafe_int32.any_  () ) in
    try
     begin
     (i :=
      (#"graph_1_c.jc" 346 20 32# "expl:Integer cast"
      (Unsafe_int32.of_int (0))));
      'LoopEntry:
      begin
      'LoopEntry:
      'Loop_1:
      loop
      invariant
        { ((#"/home/debian/mfsp/examples/regions/graph_1.c" 150 23 160#
           (forall k_8 : int.
            ((((<=) (0) k_8) /\ ((<) k_8 (Int32.to_int n_1_0))) ->
             (forall k2 : int.
              ((((<=) (0) k2) /\ ((<) k2 (Int32.to_int n_1_0))) ->
               (not
               (same_block
               (select
               __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
               (select
               struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
               (shift graphs k_8)))
               (select
               __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
               (select
               struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
               (shift graphs k2))))))))))
          &&
          ((#"/home/debian/mfsp/examples/regions/graph_1.c" 151 23 154#
           (forall k_9 : int.
            ((((<=) (0) k_9) /\ ((<) k_9 (Int32.to_int n_1_0))) ->
             (forall k2_0 : int.
              ((((<=) (0) k2_0) /\ ((<) k2_0 (Int32.to_int n_1_0))) ->
               (not
               (same_block
               (select
               __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
               (select
               struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
               (shift graphs k_9)))
               (select
               __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
               (select
               struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
               (shift graphs k2_0))))))))))
          &&
          ((#"/home/debian/mfsp/examples/regions/graph_1.c" 152 23 155#
           (forall k_10 : int.
            ((((<=) (0) k_10) /\ ((<) k_10 (Int32.to_int !i))) ->
             ((not
              ((=)
              (Int32.to_int
              (select !__anonstruct_Edge_3_existent_0_edges_34
              (shift
              (select
              __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
              (select
              struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
              (shift graphs k_10))) (Int32.to_int pos_3)))) (0)))
             /\
             ((Int32.(=)
              (select !__anonstruct_Edge_3_from_edges_34
              (shift
              (select
              __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
              (select
              struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
              (shift graphs k_10))) (Int32.to_int pos_3))) f_3)
             /\
             (Int32.(=)
             (select !__anonstruct_Edge_3_to_edges_34
             (shift
             (select
             __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
             (select
             struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
             (shift graphs k_10))) (Int32.to_int pos_3))) t_3))))))
          &&
          (#"/home/debian/mfsp/examples/regions/graph_1.c" 153 23 34#
          (#"/home/debian/mfsp/examples/regions/graph_1.c" 153 23 34#
          ((#"/home/debian/mfsp/examples/regions/graph_1.c" 153 23 29#
           (Int32.(<=) (#"graph_1_c.jc" 376 38 50# "expl:Integer cast"
           (Int32.of_int (0))) !i))
          /\
          (#"/home/debian/mfsp/examples/regions/graph_1.c" 153 28 34#
          (Int32.(<=) !i n_1_0)))))))) } 
       begin
       any unit requires { true } ensures { true } ;
        try
         begin
         'LoopCurrent:
         begin
         'LoopCurrent:
         (if
         (#"/home/debian/mfsp/examples/regions/graph_1.c" 156 20 25#
         (Unsafe_int32.(<)  !i n_1_0 )) then ()
         else (raise (Goto_while_0_break_exc ())));
          begin
          (let _jessie_53 =
          (acc 
           struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
           (shift_  graphs (Unsafe_int32.to_int  !i ) ) ) in
          (let _jessie_52 = pos_3 in
          (let _jessie_51 = f_3 in
          (let _jessie_50 = t_3 in
          (#"/home/debian/mfsp/examples/regions/graph_1.c" 157 8 41#
          "expl:Precondition for insert_edge"
          (Function_insert_edge.insert_edge  _jessie_53 _jessie_52 _jessie_51
           _jessie_50 __anonstruct_Edge_3_existent_0_edges_34
           __anonstruct_Edge_3_to_edges_34 __anonstruct_Edge_3_from_edges_34
           __anonstruct_Vertex_2_vertices_35_alloc_table
           __anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
           __anonstruct_Edge_3_edges_34_alloc_table
           __anonstruct_Edge_3_edges_34_tag_table
           __anonstruct_Graph_4_esize_struct___anonstruct_Graph_4_xM_33
           __anonstruct_Graph_4_ecnt_struct___anonstruct_Graph_4_xM_33
           __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
           __anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33
           __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
           __anonstruct_Vertex_2_existent_vertices_35 ))))));
           begin
           (assert {
           (#"/home/debian/mfsp/examples/regions/graph_1.c" 158 19 57#
           "expl:Assertion in line 158"
           (((Int32.(>=) n_1_0 (#"graph_1_c.jc" 389 64 76#
             "expl:Integer cast" (Int32.of_int (2))))
            /\
            (Int32.(=) !i (#"graph_1_c.jc" 391 65 77# "expl:Integer cast"
            (Int32.of_int (0))))) ->
            (((<=)
             (offset_min
             __anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
             (select
             struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
             (shift graphs (1)))) (0))
            /\
            (((>=)
             (offset_max
             __anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
             (select
             struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
             (shift graphs (1)))) (0))
            /\ ((=) true true))))) }); () end;
           begin
           (assert {
           (#"/home/debian/mfsp/examples/regions/graph_1.c" 159 21 73#
           "expl:Assertion in line 159"
           (((Int32.(>=) n_1_0 (#"graph_1_c.jc" 408 64 76#
             "expl:Integer cast" (Int32.of_int (2))))
            /\
            (Int32.(=) !i (#"graph_1_c.jc" 410 65 77# "expl:Integer cast"
            (Int32.of_int (0))))) ->
            (not
            ((=)
            (Int32.to_int
            (select __anonstruct_Vertex_2_existent_vertices_35
            (shift
            (select
            __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
            (select
            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
            (shift graphs (1)))) (Int32.to_int f_3)))) (0))))) }); () end;
           begin
           (assert {
           (#"/home/debian/mfsp/examples/regions/graph_1.c" 160 21 73#
           "expl:Assertion in line 160"
           (((Int32.(>=) n_1_0 (#"graph_1_c.jc" 420 64 76#
             "expl:Integer cast" (Int32.of_int (2))))
            /\
            (Int32.(=) !i (#"graph_1_c.jc" 422 65 77# "expl:Integer cast"
            (Int32.of_int (0))))) ->
            ((=)
            (Int32.to_int
            (select !__anonstruct_Edge_3_existent_0_edges_34
            (shift
            (select
            __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
            (select
            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
            (shift graphs (1)))) (Int32.to_int pos_3)))) (0)))) }); () end
          end;
          (i :=
           (Unsafe_int32.(+)  !i
            (#"graph_1_c.jc" 429 50 62# "expl:Integer cast"
            (Unsafe_int32.of_int (1))) )) end; (raise (Loop_continue_exc ()))
         end with Loop_continue_exc _jessie_3 -> () end end end;
       (raise (Goto_while_0_break_exc ())) end end with
     Goto_while_0_break_exc _jessie_1 ->
     'While_0_break: 'While_0_break: begin (); (raise Return) end end);
     (raise Return) end with Return -> () end
  
end

module Function_insert_edge_fixed_safety
#"/home/debian/mfsp/examples/regions/graph_1.c" 180 5 59#
"expl:insert_edge_fixed, safety"

  use import core.Upd_offset_safe 
  
  use import core.Tag_table_type 
  
  use import core.Shift_safe 
  
  use Safe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use why3.Bool.Bool 
  
  let insert_edge_fixed
  #"/home/debian/mfsp/examples/regions/graph_1.c" 180 5 59#
  "expl:Function insert_edge_fixed, safety" =
  fun
   (graph_2 : (pointer __anonstruct_Graph_4)) (pos_2 : Int32.t) (f_2_0 :
   Int32.t) (t_2_0 : Int32.t) (__anonstruct_Edge_3_from_edges_36 : ref
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_36 :
   ref (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_36 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_edges_36_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph_2_16_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_37_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_36_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_37 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph_2_16
   : (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_graph_2_16 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph_2_16 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_graph_2_16 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph_2_16 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 165 13 26#
    (#"graph_1_c.jc" 440 12 932#
    ((#"graph_1_c.jc" 440 12 932#
     ((<=) (offset_min __anonstruct_Graph_4_graph_2_16_alloc_table graph_2)
     (0)))
    /\
    (#"graph_1_c.jc" 440 12 932#
    ((#"graph_1_c.jc" 440 12 932#
     ((>=) (offset_max __anonstruct_Graph_4_graph_2_16_alloc_table graph_2)
     (0)))
    /\ (#"graph_1_c.jc" 440 12 932# ((=) true true)))))))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 166 13 25#
    (valid_0 graph_2 __anonstruct_Vertex_2_vertices_37_alloc_table
    __anonstruct_Edge_3_edges_36_alloc_table
    __anonstruct_Graph_4_esize_graph_2_16
    __anonstruct_Graph_4_ecnt_graph_2_16
    __anonstruct_Graph_4_edges_graph_2_16
    __anonstruct_Graph_4_vsize_graph_2_16
    __anonstruct_Graph_4_vertices_graph_2_16
    !__anonstruct_Edge_3_existent_0_edges_36 !__anonstruct_Edge_3_to_edges_36
    !__anonstruct_Edge_3_from_edges_36
    __anonstruct_Vertex_2_existent_vertices_37))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 167 13 21#
    (Int32.(<=) (#"graph_1_c.jc" 444 38 50# "expl:Integer cast" (Int32.of_int
    (0))) pos_2))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 167 18 35#
    (Int32.(<) pos_2 (select __anonstruct_Graph_4_ecnt_graph_2_16 graph_2)))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 168 13 40#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_36
    (shift (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
    (Int32.to_int pos_2)))) (0)))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 169 13 32#
    (is_vertex graph_2 (Int32.to_int f_2_0)
    __anonstruct_Graph_4_vsize_graph_2_16))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 170 13 32#
    (is_vertex graph_2 (Int32.to_int t_2_0)
    __anonstruct_Graph_4_vsize_graph_2_16))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 171 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_37
    (shift (select __anonstruct_Graph_4_vertices_graph_2_16 graph_2)
    (Int32.to_int f_2_0)))) (0))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_1.c" 172 13 40#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_37
   (shift (select __anonstruct_Graph_4_vertices_graph_2_16 graph_2)
   (Int32.to_int t_2_0)))) (0)))))))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (let _jessie_78 =
    (let _jessie_77 =
    (#"graph_1_c.jc" 469 83 95# "expl:Integer cast" (Safe_int32.of_int (1)))
    in
    begin
    (assert {
    (#"/home/debian/mfsp/examples/regions/graph_1.c" 182 4 34#
    "expl:Pointer index bounds" true) }); _jessie_77 end) in
    (let _jessie_79 =
    (#"/home/debian/mfsp/examples/regions/graph_1.c" 182 4 16#
    "expl:Pointer dereference"
    (acc  __anonstruct_Graph_4_graph_2_16_alloc_table
     __anonstruct_Graph_4_edges_graph_2_16 graph_2 )) in
    (let _jessie_80 = (Safe_int32.to_int  pos_2 ) in
    (let _jessie_81 = (shift_typesafe  _jessie_79 _jessie_80 ) in
    (#"/home/debian/mfsp/examples/regions/graph_1.c" 182 4 34#
    "expl:Pointer dereference"
    (upd_offset_typesafe  __anonstruct_Edge_3_edges_36_alloc_table
     __anonstruct_Edge_3_existent_0_edges_36 _jessie_79 _jessie_80 _jessie_78
     ))))));
     begin
     (let _jessie_83 =
     (let _jessie_82 = f_2_0 in
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 183 4 30#
     "expl:Pointer index bounds" true) }); _jessie_82 end) in
     (let _jessie_84 =
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 183 4 16#
     "expl:Pointer dereference"
     (acc  __anonstruct_Graph_4_graph_2_16_alloc_table
      __anonstruct_Graph_4_edges_graph_2_16 graph_2 )) in
     (let _jessie_85 = (Safe_int32.to_int  pos_2 ) in
     (let _jessie_86 = (shift_typesafe  _jessie_84 _jessie_85 ) in
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 183 4 30#
     "expl:Pointer dereference"
     (upd_offset_typesafe  __anonstruct_Edge_3_edges_36_alloc_table
      __anonstruct_Edge_3_from_edges_36 _jessie_84 _jessie_85 _jessie_83 ))))));
      begin
      (let _jessie_88 =
      (let _jessie_87 = t_2_0 in
      begin
      (assert {
      (#"/home/debian/mfsp/examples/regions/graph_1.c" 184 4 28#
      "expl:Pointer index bounds" true) }); _jessie_87 end) in
      (let _jessie_89 =
      (#"/home/debian/mfsp/examples/regions/graph_1.c" 184 4 16#
      "expl:Pointer dereference"
      (acc  __anonstruct_Graph_4_graph_2_16_alloc_table
       __anonstruct_Graph_4_edges_graph_2_16 graph_2 )) in
      (let _jessie_90 = (Safe_int32.to_int  pos_2 ) in
      (let _jessie_91 = (shift_typesafe  _jessie_89 _jessie_90 ) in
      (#"/home/debian/mfsp/examples/regions/graph_1.c" 184 4 28#
      "expl:Pointer dereference"
      (upd_offset_typesafe  __anonstruct_Edge_3_edges_36_alloc_table
       __anonstruct_Edge_3_to_edges_36 _jessie_89 _jessie_90 _jessie_88 ))))));
       (raise Return) end end; (raise Return) end with Return -> () end
  
end

module Function_insert_edge_fixed_behaviors
#"/home/debian/mfsp/examples/regions/graph_1.c" 180 5 59#
"expl:insert_edge_fixed, behaviors"

  use import core.Upd_unsafe 
  
  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import core.Shift_unsafe 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let insert_edge_fixed_ensures_default
  #"/home/debian/mfsp/examples/regions/graph_1.c" 180 5 59#
  "expl:Function insert_edge_fixed, default behavior" =
  fun
   (graph_2 : (pointer __anonstruct_Graph_4)) (pos_2 : Int32.t) (f_2_0 :
   Int32.t) (t_2_0 : Int32.t) (__anonstruct_Edge_3_from_edges_36 : ref
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_36 :
   ref (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_36 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_edges_36_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph_2_16_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_37_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_36_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_37 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph_2_16
   : (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_graph_2_16 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph_2_16 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_graph_2_16 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph_2_16 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 165 13 26#
    (#"graph_1_c.jc" 440 12 932#
    ((#"graph_1_c.jc" 440 12 932#
     ((<=) (offset_min __anonstruct_Graph_4_graph_2_16_alloc_table graph_2)
     (0)))
    /\
    (#"graph_1_c.jc" 440 12 932#
    ((#"graph_1_c.jc" 440 12 932#
     ((>=) (offset_max __anonstruct_Graph_4_graph_2_16_alloc_table graph_2)
     (0)))
    /\ (#"graph_1_c.jc" 440 12 932# ((=) true true)))))))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 166 13 25#
    (valid_0 graph_2 __anonstruct_Vertex_2_vertices_37_alloc_table
    __anonstruct_Edge_3_edges_36_alloc_table
    __anonstruct_Graph_4_esize_graph_2_16
    __anonstruct_Graph_4_ecnt_graph_2_16
    __anonstruct_Graph_4_edges_graph_2_16
    __anonstruct_Graph_4_vsize_graph_2_16
    __anonstruct_Graph_4_vertices_graph_2_16
    !__anonstruct_Edge_3_existent_0_edges_36 !__anonstruct_Edge_3_to_edges_36
    !__anonstruct_Edge_3_from_edges_36
    __anonstruct_Vertex_2_existent_vertices_37))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 167 13 21#
    (Int32.(<=) (#"graph_1_c.jc" 444 38 50# "expl:Integer cast" (Int32.of_int
    (0))) pos_2))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 167 18 35#
    (Int32.(<) pos_2 (select __anonstruct_Graph_4_ecnt_graph_2_16 graph_2)))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 168 13 40#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_36
    (shift (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
    (Int32.to_int pos_2)))) (0)))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 169 13 32#
    (is_vertex graph_2 (Int32.to_int f_2_0)
    __anonstruct_Graph_4_vsize_graph_2_16))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 170 13 32#
    (is_vertex graph_2 (Int32.to_int t_2_0)
    __anonstruct_Graph_4_vsize_graph_2_16))
   /\
   (#"graph_1_c.jc" 440 12 932#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 171 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_37
    (shift (select __anonstruct_Graph_4_vertices_graph_2_16 graph_2)
    (Int32.to_int f_2_0)))) (0))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_1.c" 172 13 40#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_37
   (shift (select __anonstruct_Graph_4_vertices_graph_2_16 graph_2)
   (Int32.to_int t_2_0)))) (0)))))))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     ((((#"graph_1_c.jc" 455 10 145# "expl:Assigns clause"
        (not_assigns __anonstruct_Edge_3_edges_36_alloc_table
        __anonstruct_Edge_3_edges_36_alloc_table (old
        !__anonstruct_Edge_3_from_edges_36)
        !__anonstruct_Edge_3_from_edges_36
        (pset_singleton
        (shift (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
        (Int32.to_int pos_2)))))
       /\
       (#"graph_1_c.jc" 455 10 145# "expl:Assigns clause"
       (not_assigns __anonstruct_Edge_3_edges_36_alloc_table
       __anonstruct_Edge_3_edges_36_alloc_table (old
       !__anonstruct_Edge_3_to_edges_36) !__anonstruct_Edge_3_to_edges_36
       (pset_singleton
       (shift (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
       (Int32.to_int pos_2))))))
      /\
      (#"graph_1_c.jc" 455 10 145# "expl:Assigns clause"
      (not_assigns __anonstruct_Edge_3_edges_36_alloc_table
      __anonstruct_Edge_3_edges_36_alloc_table (old
      !__anonstruct_Edge_3_existent_0_edges_36)
      !__anonstruct_Edge_3_existent_0_edges_36
      (pset_singleton
      (shift (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
      (Int32.to_int pos_2))))))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
     "expl:Ensures clause"
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
      "expl:Ensures clause"
      (valid_0 graph_2 __anonstruct_Vertex_2_vertices_37_alloc_table
      __anonstruct_Edge_3_edges_36_alloc_table
      __anonstruct_Graph_4_esize_graph_2_16
      __anonstruct_Graph_4_ecnt_graph_2_16
      __anonstruct_Graph_4_edges_graph_2_16
      __anonstruct_Graph_4_vsize_graph_2_16
      __anonstruct_Graph_4_vertices_graph_2_16
      !__anonstruct_Edge_3_existent_0_edges_36
      !__anonstruct_Edge_3_to_edges_36 !__anonstruct_Edge_3_from_edges_36
      __anonstruct_Vertex_2_existent_vertices_37))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 176 12 38#
      "expl:Ensures clause"
      (not
      ((=)
      (Int32.to_int
      (select !__anonstruct_Edge_3_existent_0_edges_36
      (shift (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
      (Int32.to_int pos_2)))) (0))))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 177 12 39#
      "expl:Ensures clause"
      (Int32.(=)
      (select !__anonstruct_Edge_3_from_edges_36
      (shift (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
      (Int32.to_int pos_2))) f_2_0))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 178 12 37#
     "expl:Ensures clause"
     (Int32.(=)
     (select !__anonstruct_Edge_3_to_edges_36
     (shift (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
     (Int32.to_int pos_2))) t_2_0))))))))))) }  ->
   'Init:
   try
    begin
    (let _jessie_63 =
    (#"graph_1_c.jc" 469 83 95# "expl:Integer cast"
    (Unsafe_int32.of_int (1))) in
    (let _jessie_64 = (acc  __anonstruct_Graph_4_edges_graph_2_16 graph_2 )
    in
    (let _jessie_65 = (Unsafe_int32.to_int  pos_2 ) in
    (let _jessie_66 = (shift_  _jessie_64 _jessie_65 ) in
    (upd  __anonstruct_Edge_3_existent_0_edges_36 _jessie_66 _jessie_63 )))));
     begin
     (let _jessie_68 = f_2_0 in
     (let _jessie_69 = (acc  __anonstruct_Graph_4_edges_graph_2_16 graph_2 )
     in
     (let _jessie_70 = (Unsafe_int32.to_int  pos_2 ) in
     (let _jessie_71 = (shift_  _jessie_69 _jessie_70 ) in
     (upd  __anonstruct_Edge_3_from_edges_36 _jessie_71 _jessie_68 )))));
      begin
      (let _jessie_73 = t_2_0 in
      (let _jessie_74 = (acc  __anonstruct_Graph_4_edges_graph_2_16 graph_2 )
      in
      (let _jessie_75 = (Unsafe_int32.to_int  pos_2 ) in
      (let _jessie_76 = (shift_  _jessie_74 _jessie_75 ) in
      (upd  __anonstruct_Edge_3_to_edges_36 _jessie_76 _jessie_73 )))));
       (raise Return) end end; (raise Return) end with Return -> () end
  
end

module Function_insert_edge_fixed_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_edge_fixed
  (graph_2 : (pointer __anonstruct_Graph_4)) 
   (pos_2 : Int32.t) 
    (f_2_0 : Int32.t) 
     (t_2_0 : Int32.t) 
      (__anonstruct_Edge_3_existent_0_edges_36 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Edge_3_to_edges_36 : ref (memory __anonstruct_Edge_3
        Int32.t)) 
        (__anonstruct_Edge_3_from_edges_36 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Vertex_2_vertices_37_alloc_table : (alloc_table
          __anonstruct_Vertex_2)) 
          (__anonstruct_Graph_4_graph_2_16_alloc_table : (alloc_table
           __anonstruct_Graph_4)) 
           (__anonstruct_Edge_3_edges_36_alloc_table : (alloc_table
            __anonstruct_Edge_3)) 
            (__anonstruct_Edge_3_edges_36_tag_table : (tag_table
             __anonstruct_Edge_3)) 
             (__anonstruct_Graph_4_esize_graph_2_16 : (memory
              __anonstruct_Graph_4 Int32.t)) 
              (__anonstruct_Graph_4_ecnt_graph_2_16 : (memory
               __anonstruct_Graph_4 Int32.t)) 
               (__anonstruct_Graph_4_edges_graph_2_16 : (memory
                __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                (__anonstruct_Graph_4_vsize_graph_2_16 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_vertices_graph_2_16 : (memory
                  __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                  (__anonstruct_Vertex_2_existent_vertices_37 : (memory
                   __anonstruct_Vertex_2 Int32.t)) : unit
                   requires {
                     ("expl:Internal"
                     (#"graph_1_c.jc" 440 12 932# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 165 13 26#
                      "expl:Requires clause"
                      (#"graph_1_c.jc" 440 12 932# "expl:Requires clause"
                      ((#"graph_1_c.jc" 440 12 932# "expl:Requires clause"
                       ((<=)
                       (offset_min
                       __anonstruct_Graph_4_graph_2_16_alloc_table graph_2)
                       (0)))
                      /\
                      (#"graph_1_c.jc" 440 12 932# "expl:Requires clause"
                      ((#"graph_1_c.jc" 440 12 932# "expl:Requires clause"
                       ((>=)
                       (offset_max
                       __anonstruct_Graph_4_graph_2_16_alloc_table graph_2)
                       (0)))
                      /\
                      (#"graph_1_c.jc" 440 12 932# "expl:Requires clause"
                      ((=) true true)))))))
                     /\
                     (#"graph_1_c.jc" 440 12 932# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 166 13 25#
                      "expl:Requires clause"
                      (valid_0 graph_2
                      __anonstruct_Vertex_2_vertices_37_alloc_table
                      __anonstruct_Edge_3_edges_36_alloc_table
                      __anonstruct_Graph_4_esize_graph_2_16
                      __anonstruct_Graph_4_ecnt_graph_2_16
                      __anonstruct_Graph_4_edges_graph_2_16
                      __anonstruct_Graph_4_vsize_graph_2_16
                      __anonstruct_Graph_4_vertices_graph_2_16
                      !__anonstruct_Edge_3_existent_0_edges_36
                      !__anonstruct_Edge_3_to_edges_36
                      !__anonstruct_Edge_3_from_edges_36
                      __anonstruct_Vertex_2_existent_vertices_37))
                     /\
                     (#"graph_1_c.jc" 440 12 932# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 167 13 21#
                      "expl:Requires clause"
                      (Int32.(<=) (#"graph_1_c.jc" 444 38 50#
                      "expl:Integer cast" (Int32.of_int (0))) pos_2))
                     /\
                     (#"graph_1_c.jc" 440 12 932# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 167 18 35#
                      "expl:Requires clause"
                      (Int32.(<) pos_2
                      (select __anonstruct_Graph_4_ecnt_graph_2_16 graph_2)))
                     /\
                     (#"graph_1_c.jc" 440 12 932# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 168 13 40#
                      "expl:Requires clause"
                      ((=)
                      (Int32.to_int
                      (select !__anonstruct_Edge_3_existent_0_edges_36
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
                      (Int32.to_int pos_2)))) (0)))
                     /\
                     (#"graph_1_c.jc" 440 12 932# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 169 13 32#
                      "expl:Requires clause"
                      (is_vertex graph_2 (Int32.to_int f_2_0)
                      __anonstruct_Graph_4_vsize_graph_2_16))
                     /\
                     (#"graph_1_c.jc" 440 12 932# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 170 13 32#
                      "expl:Requires clause"
                      (is_vertex graph_2 (Int32.to_int t_2_0)
                      __anonstruct_Graph_4_vsize_graph_2_16))
                     /\
                     (#"graph_1_c.jc" 440 12 932# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 171 13 40#
                      "expl:Requires clause"
                      (not
                      ((=)
                      (Int32.to_int
                      (select __anonstruct_Vertex_2_existent_vertices_37
                      (shift
                      (select __anonstruct_Graph_4_vertices_graph_2_16
                      graph_2) (Int32.to_int f_2_0)))) (0))))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 172 13 40#
                     "expl:Requires clause"
                     (not
                     ((=)
                     (Int32.to_int
                     (select __anonstruct_Vertex_2_existent_vertices_37
                     (shift
                     (select __anonstruct_Graph_4_vertices_graph_2_16
                     graph_2) (Int32.to_int t_2_0)))) (0)))))))))))))))))))))
                     }
                   reads { __anonstruct_Edge_3_existent_0_edges_36,
                   __anonstruct_Edge_3_from_edges_36,
                   __anonstruct_Edge_3_to_edges_36 } writes {
                   __anonstruct_Edge_3_existent_0_edges_36,
                   __anonstruct_Edge_3_from_edges_36,
                   __anonstruct_Edge_3_to_edges_36 }
                   ensures {
                     ((((#"graph_1_c.jc" 455 10 145# "expl:Assigns clause"
                        (not_assigns __anonstruct_Edge_3_edges_36_alloc_table
                        __anonstruct_Edge_3_edges_36_alloc_table (old
                        !__anonstruct_Edge_3_from_edges_36)
                        !__anonstruct_Edge_3_from_edges_36
                        (pset_singleton
                        (shift
                        (select __anonstruct_Graph_4_edges_graph_2_16
                        graph_2) (Int32.to_int pos_2)))))
                       /\
                       (#"graph_1_c.jc" 455 10 145# "expl:Assigns clause"
                       (not_assigns __anonstruct_Edge_3_edges_36_alloc_table
                       __anonstruct_Edge_3_edges_36_alloc_table (old
                       !__anonstruct_Edge_3_to_edges_36)
                       !__anonstruct_Edge_3_to_edges_36
                       (pset_singleton
                       (shift
                       (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
                       (Int32.to_int pos_2))))))
                      /\
                      (#"graph_1_c.jc" 455 10 145# "expl:Assigns clause"
                      (not_assigns __anonstruct_Edge_3_edges_36_alloc_table
                      __anonstruct_Edge_3_edges_36_alloc_table (old
                      !__anonstruct_Edge_3_existent_0_edges_36)
                      !__anonstruct_Edge_3_existent_0_edges_36
                      (pset_singleton
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
                      (Int32.to_int pos_2))))))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
                     "expl:Ensures clause"
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
                      "expl:Ensures clause"
                      (valid_0 graph_2
                      __anonstruct_Vertex_2_vertices_37_alloc_table
                      __anonstruct_Edge_3_edges_36_alloc_table
                      __anonstruct_Graph_4_esize_graph_2_16
                      __anonstruct_Graph_4_ecnt_graph_2_16
                      __anonstruct_Graph_4_edges_graph_2_16
                      __anonstruct_Graph_4_vsize_graph_2_16
                      __anonstruct_Graph_4_vertices_graph_2_16
                      !__anonstruct_Edge_3_existent_0_edges_36
                      !__anonstruct_Edge_3_to_edges_36
                      !__anonstruct_Edge_3_from_edges_36
                      __anonstruct_Vertex_2_existent_vertices_37))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 176 12 38#
                      "expl:Ensures clause"
                      (not
                      ((=)
                      (Int32.to_int
                      (select !__anonstruct_Edge_3_existent_0_edges_36
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
                      (Int32.to_int pos_2)))) (0))))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 177 12 39#
                      "expl:Ensures clause"
                      (Int32.(=)
                      (select !__anonstruct_Edge_3_from_edges_36
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
                      (Int32.to_int pos_2))) f_2_0))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 178 12 37#
                     "expl:Ensures clause"
                     (Int32.(=)
                     (select !__anonstruct_Edge_3_to_edges_36
                     (shift
                     (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
                     (Int32.to_int pos_2))) t_2_0)))))))))) }
  
end

module Function_insert_double_edge_fixed_safety
#"/home/debian/mfsp/examples/regions/graph_1.c" 210 5 92#
"expl:insert_double_edge_fixed, safety"

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_insert_edge_fixed_safe 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  let insert_double_edge_fixed
  #"/home/debian/mfsp/examples/regions/graph_1.c" 210 5 92#
  "expl:Function insert_double_edge_fixed, safety" =
  fun
   (graph_0 : (pointer __anonstruct_Graph_4)) (pos_0 : Int32.t) (pos2_0 :
   Int32.t) (f_0_0 : Int32.t) (t_0_0 : Int32.t) (f2_0 : Int32.t) (t2_0 :
   Int32.t) (__anonstruct_Edge_3_from_edges_38 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_38 : ref
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_38 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_edges_38_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph_0_17_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_39_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_38_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_39 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph_0_17
   : (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_graph_0_17 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph_0_17 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_graph_0_17 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph_0_17 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 188 13 26#
    (#"graph_1_c.jc" 480 12 2212#
    ((#"graph_1_c.jc" 480 12 2212#
     ((<=) (offset_min __anonstruct_Graph_4_graph_0_17_alloc_table graph_0)
     (0)))
    /\
    (#"graph_1_c.jc" 480 12 2212#
    ((#"graph_1_c.jc" 480 12 2212#
     ((>=) (offset_max __anonstruct_Graph_4_graph_0_17_alloc_table graph_0)
     (0)))
    /\ (#"graph_1_c.jc" 480 12 2212# ((=) true true)))))))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 189 13 25#
    (valid_0 graph_0 __anonstruct_Vertex_2_vertices_39_alloc_table
    __anonstruct_Edge_3_edges_38_alloc_table
    __anonstruct_Graph_4_esize_graph_0_17
    __anonstruct_Graph_4_ecnt_graph_0_17
    __anonstruct_Graph_4_edges_graph_0_17
    __anonstruct_Graph_4_vsize_graph_0_17
    __anonstruct_Graph_4_vertices_graph_0_17
    !__anonstruct_Edge_3_existent_0_edges_38 !__anonstruct_Edge_3_to_edges_38
    !__anonstruct_Edge_3_from_edges_38
    __anonstruct_Vertex_2_existent_vertices_39))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 190 13 21#
    (Int32.(<=) (#"graph_1_c.jc" 484 38 50# "expl:Integer cast" (Int32.of_int
    (0))) pos_0))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 190 18 35#
    (Int32.(<) pos_0 (select __anonstruct_Graph_4_ecnt_graph_0_17 graph_0)))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 191 13 22#
    (Int32.(<=) (#"graph_1_c.jc" 486 40 52# "expl:Integer cast" (Int32.of_int
    (0))) pos2_0))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 191 18 36#
    (Int32.(<) pos2_0 (select __anonstruct_Graph_4_ecnt_graph_0_17 graph_0)))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 192 13 24#
    (not (Int32.(=) pos_0 pos2_0)))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 193 13 40#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_38
    (shift (select __anonstruct_Graph_4_edges_graph_0_17 graph_0)
    (Int32.to_int pos_0)))) (0)))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 194 13 41#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_38
    (shift (select __anonstruct_Graph_4_edges_graph_0_17 graph_0)
    (Int32.to_int pos2_0)))) (0)))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 195 13 32#
    (is_vertex graph_0 (Int32.to_int f_0_0)
    __anonstruct_Graph_4_vsize_graph_0_17))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 196 13 33#
    (is_vertex graph_0 (Int32.to_int f2_0)
    __anonstruct_Graph_4_vsize_graph_0_17))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 197 13 32#
    (is_vertex graph_0 (Int32.to_int t_0_0)
    __anonstruct_Graph_4_vsize_graph_0_17))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 198 13 33#
    (is_vertex graph_0 (Int32.to_int t2_0)
    __anonstruct_Graph_4_vsize_graph_0_17))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 199 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_39
    (shift (select __anonstruct_Graph_4_vertices_graph_0_17 graph_0)
    (Int32.to_int f_0_0)))) (0))))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 200 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_39
    (shift (select __anonstruct_Graph_4_vertices_graph_0_17 graph_0)
    (Int32.to_int t_0_0)))) (0))))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 201 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_39
    (shift (select __anonstruct_Graph_4_vertices_graph_0_17 graph_0)
    (Int32.to_int f2_0)))) (0))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_1.c" 202 13 41#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_39
   (shift (select __anonstruct_Graph_4_vertices_graph_0_17 graph_0)
   (Int32.to_int t2_0)))) (0)))))))))))))))))))))))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (let _jessie_103 = graph_0 in
    (let _jessie_102 = pos_0 in
    (let _jessie_101 = f_0_0 in
    (let _jessie_100 = t_0_0 in
    (#"/home/debian/mfsp/examples/regions/graph_1.c" 212 4 39#
    "expl:Precondition for insert_edge_fixed"
    (Function_insert_edge_fixed_safe.insert_edge_fixed  _jessie_103
     _jessie_102 _jessie_101 _jessie_100
     __anonstruct_Edge_3_existent_0_edges_38 __anonstruct_Edge_3_to_edges_38
     __anonstruct_Edge_3_from_edges_38
     __anonstruct_Vertex_2_vertices_39_alloc_table
     __anonstruct_Graph_4_graph_0_17_alloc_table
     __anonstruct_Edge_3_edges_38_alloc_table
     __anonstruct_Edge_3_edges_38_tag_table
     __anonstruct_Graph_4_esize_graph_0_17
     __anonstruct_Graph_4_ecnt_graph_0_17
     __anonstruct_Graph_4_edges_graph_0_17
     __anonstruct_Graph_4_vsize_graph_0_17
     __anonstruct_Graph_4_vertices_graph_0_17
     __anonstruct_Vertex_2_existent_vertices_39 ))))));
     begin
     any unit
     requires { true } reads { graph_0 }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_1.c" 213 15 28#
       (#"/home/debian/mfsp/examples/regions/graph_1.c" 213 15 28#
       ((#"/home/debian/mfsp/examples/regions/graph_1.c" 213 15 28#
        ((<=)
        (offset_min __anonstruct_Graph_4_graph_0_17_alloc_table graph_0) (0)))
       /\
       (#"/home/debian/mfsp/examples/regions/graph_1.c" 213 15 28#
       ((#"/home/debian/mfsp/examples/regions/graph_1.c" 213 15 28#
        ((>=)
        (offset_max __anonstruct_Graph_4_graph_0_17_alloc_table graph_0) (0)))
       /\
       (#"/home/debian/mfsp/examples/regions/graph_1.c" 213 15 28#
       ((=) true true))))))) } ; () end;
     begin
     any unit
     requires { true } reads { f2_0, graph_0 }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_1.c" 214 17 45#
       (not
       ((=)
       (Int32.to_int
       (select __anonstruct_Vertex_2_existent_vertices_39
       (shift (select __anonstruct_Graph_4_vertices_graph_0_17 graph_0)
       (Int32.to_int f2_0)))) (0)))) } ; () end;
     begin
     any unit
     requires { true } reads { __anonstruct_Edge_3_existent_0_edges_38,
     graph_0, pos2_0 }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_1.c" 215 17 45#
       ((=)
       (Int32.to_int
       (select !__anonstruct_Edge_3_existent_0_edges_38
       (shift (select __anonstruct_Graph_4_edges_graph_0_17 graph_0)
       (Int32.to_int pos2_0)))) (0))) } ; () end;
     begin
     (let _jessie_107 = graph_0 in
     (let _jessie_106 = pos2_0 in
     (let _jessie_105 = f2_0 in
     (let _jessie_104 = t2_0 in
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 216 6 44#
     "expl:Precondition for insert_edge_fixed"
     (Function_insert_edge_fixed_safe.insert_edge_fixed  _jessie_107
      _jessie_106 _jessie_105 _jessie_104
      __anonstruct_Edge_3_existent_0_edges_38 __anonstruct_Edge_3_to_edges_38
      __anonstruct_Edge_3_from_edges_38
      __anonstruct_Vertex_2_vertices_39_alloc_table
      __anonstruct_Graph_4_graph_0_17_alloc_table
      __anonstruct_Edge_3_edges_38_alloc_table
      __anonstruct_Edge_3_edges_38_tag_table
      __anonstruct_Graph_4_esize_graph_0_17
      __anonstruct_Graph_4_ecnt_graph_0_17
      __anonstruct_Graph_4_edges_graph_0_17
      __anonstruct_Graph_4_vsize_graph_0_17
      __anonstruct_Graph_4_vertices_graph_0_17
      __anonstruct_Vertex_2_existent_vertices_39 )))))); (raise Return) end;
     (raise Return) end with Return -> () end
  
end

module Function_insert_edge_fixed

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_edge_fixed
  (graph_2 : (pointer __anonstruct_Graph_4)) 
   (pos_2 : Int32.t) 
    (f_2_0 : Int32.t) 
     (t_2_0 : Int32.t) 
      (__anonstruct_Edge_3_existent_0_edges_36 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Edge_3_to_edges_36 : ref (memory __anonstruct_Edge_3
        Int32.t)) 
        (__anonstruct_Edge_3_from_edges_36 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Vertex_2_vertices_37_alloc_table : (alloc_table
          __anonstruct_Vertex_2)) 
          (__anonstruct_Graph_4_graph_2_16_alloc_table : (alloc_table
           __anonstruct_Graph_4)) 
           (__anonstruct_Edge_3_edges_36_alloc_table : (alloc_table
            __anonstruct_Edge_3)) 
            (__anonstruct_Edge_3_edges_36_tag_table : (tag_table
             __anonstruct_Edge_3)) 
             (__anonstruct_Graph_4_esize_graph_2_16 : (memory
              __anonstruct_Graph_4 Int32.t)) 
              (__anonstruct_Graph_4_ecnt_graph_2_16 : (memory
               __anonstruct_Graph_4 Int32.t)) 
               (__anonstruct_Graph_4_edges_graph_2_16 : (memory
                __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                (__anonstruct_Graph_4_vsize_graph_2_16 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_vertices_graph_2_16 : (memory
                  __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                  (__anonstruct_Vertex_2_existent_vertices_37 : (memory
                   __anonstruct_Vertex_2 Int32.t)) : unit
                   requires { true } reads {
                   __anonstruct_Edge_3_existent_0_edges_36,
                   __anonstruct_Edge_3_from_edges_36,
                   __anonstruct_Edge_3_to_edges_36 } writes {
                   __anonstruct_Edge_3_existent_0_edges_36,
                   __anonstruct_Edge_3_from_edges_36,
                   __anonstruct_Edge_3_to_edges_36 }
                   ensures {
                     ((((#"graph_1_c.jc" 455 10 145# "expl:Assigns clause"
                        (not_assigns __anonstruct_Edge_3_edges_36_alloc_table
                        __anonstruct_Edge_3_edges_36_alloc_table (old
                        !__anonstruct_Edge_3_from_edges_36)
                        !__anonstruct_Edge_3_from_edges_36
                        (pset_singleton
                        (shift
                        (select __anonstruct_Graph_4_edges_graph_2_16
                        graph_2) (Int32.to_int pos_2)))))
                       /\
                       (#"graph_1_c.jc" 455 10 145# "expl:Assigns clause"
                       (not_assigns __anonstruct_Edge_3_edges_36_alloc_table
                       __anonstruct_Edge_3_edges_36_alloc_table (old
                       !__anonstruct_Edge_3_to_edges_36)
                       !__anonstruct_Edge_3_to_edges_36
                       (pset_singleton
                       (shift
                       (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
                       (Int32.to_int pos_2))))))
                      /\
                      (#"graph_1_c.jc" 455 10 145# "expl:Assigns clause"
                      (not_assigns __anonstruct_Edge_3_edges_36_alloc_table
                      __anonstruct_Edge_3_edges_36_alloc_table (old
                      !__anonstruct_Edge_3_existent_0_edges_36)
                      !__anonstruct_Edge_3_existent_0_edges_36
                      (pset_singleton
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
                      (Int32.to_int pos_2))))))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
                     "expl:Ensures clause"
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
                      "expl:Ensures clause"
                      (valid_0 graph_2
                      __anonstruct_Vertex_2_vertices_37_alloc_table
                      __anonstruct_Edge_3_edges_36_alloc_table
                      __anonstruct_Graph_4_esize_graph_2_16
                      __anonstruct_Graph_4_ecnt_graph_2_16
                      __anonstruct_Graph_4_edges_graph_2_16
                      __anonstruct_Graph_4_vsize_graph_2_16
                      __anonstruct_Graph_4_vertices_graph_2_16
                      !__anonstruct_Edge_3_existent_0_edges_36
                      !__anonstruct_Edge_3_to_edges_36
                      !__anonstruct_Edge_3_from_edges_36
                      __anonstruct_Vertex_2_existent_vertices_37))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 176 12 38#
                      "expl:Ensures clause"
                      (not
                      ((=)
                      (Int32.to_int
                      (select !__anonstruct_Edge_3_existent_0_edges_36
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
                      (Int32.to_int pos_2)))) (0))))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 175 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 177 12 39#
                      "expl:Ensures clause"
                      (Int32.(=)
                      (select !__anonstruct_Edge_3_from_edges_36
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
                      (Int32.to_int pos_2))) f_2_0))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_1.c" 178 12 37#
                     "expl:Ensures clause"
                     (Int32.(=)
                     (select !__anonstruct_Edge_3_to_edges_36
                     (shift
                     (select __anonstruct_Graph_4_edges_graph_2_16 graph_2)
                     (Int32.to_int pos_2))) t_2_0)))))))))) }
  
end

module Function_insert_double_edge_fixed_behaviors
#"/home/debian/mfsp/examples/regions/graph_1.c" 210 5 92#
"expl:insert_double_edge_fixed, behaviors"

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_insert_edge_fixed 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  let insert_double_edge_fixed_ensures_default
  #"/home/debian/mfsp/examples/regions/graph_1.c" 210 5 92#
  "expl:Function insert_double_edge_fixed, default behavior" =
  fun
   (graph_0 : (pointer __anonstruct_Graph_4)) (pos_0 : Int32.t) (pos2_0 :
   Int32.t) (f_0_0 : Int32.t) (t_0_0 : Int32.t) (f2_0 : Int32.t) (t2_0 :
   Int32.t) (__anonstruct_Edge_3_from_edges_38 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_38 : ref
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_38 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_edges_38_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph_0_17_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_39_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_38_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_39 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph_0_17
   : (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_graph_0_17 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph_0_17 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_graph_0_17 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph_0_17 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 188 13 26#
    (#"graph_1_c.jc" 480 12 2212#
    ((#"graph_1_c.jc" 480 12 2212#
     ((<=) (offset_min __anonstruct_Graph_4_graph_0_17_alloc_table graph_0)
     (0)))
    /\
    (#"graph_1_c.jc" 480 12 2212#
    ((#"graph_1_c.jc" 480 12 2212#
     ((>=) (offset_max __anonstruct_Graph_4_graph_0_17_alloc_table graph_0)
     (0)))
    /\ (#"graph_1_c.jc" 480 12 2212# ((=) true true)))))))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 189 13 25#
    (valid_0 graph_0 __anonstruct_Vertex_2_vertices_39_alloc_table
    __anonstruct_Edge_3_edges_38_alloc_table
    __anonstruct_Graph_4_esize_graph_0_17
    __anonstruct_Graph_4_ecnt_graph_0_17
    __anonstruct_Graph_4_edges_graph_0_17
    __anonstruct_Graph_4_vsize_graph_0_17
    __anonstruct_Graph_4_vertices_graph_0_17
    !__anonstruct_Edge_3_existent_0_edges_38 !__anonstruct_Edge_3_to_edges_38
    !__anonstruct_Edge_3_from_edges_38
    __anonstruct_Vertex_2_existent_vertices_39))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 190 13 21#
    (Int32.(<=) (#"graph_1_c.jc" 484 38 50# "expl:Integer cast" (Int32.of_int
    (0))) pos_0))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 190 18 35#
    (Int32.(<) pos_0 (select __anonstruct_Graph_4_ecnt_graph_0_17 graph_0)))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 191 13 22#
    (Int32.(<=) (#"graph_1_c.jc" 486 40 52# "expl:Integer cast" (Int32.of_int
    (0))) pos2_0))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 191 18 36#
    (Int32.(<) pos2_0 (select __anonstruct_Graph_4_ecnt_graph_0_17 graph_0)))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 192 13 24#
    (not (Int32.(=) pos_0 pos2_0)))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 193 13 40#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_38
    (shift (select __anonstruct_Graph_4_edges_graph_0_17 graph_0)
    (Int32.to_int pos_0)))) (0)))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 194 13 41#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_38
    (shift (select __anonstruct_Graph_4_edges_graph_0_17 graph_0)
    (Int32.to_int pos2_0)))) (0)))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 195 13 32#
    (is_vertex graph_0 (Int32.to_int f_0_0)
    __anonstruct_Graph_4_vsize_graph_0_17))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 196 13 33#
    (is_vertex graph_0 (Int32.to_int f2_0)
    __anonstruct_Graph_4_vsize_graph_0_17))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 197 13 32#
    (is_vertex graph_0 (Int32.to_int t_0_0)
    __anonstruct_Graph_4_vsize_graph_0_17))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 198 13 33#
    (is_vertex graph_0 (Int32.to_int t2_0)
    __anonstruct_Graph_4_vsize_graph_0_17))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 199 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_39
    (shift (select __anonstruct_Graph_4_vertices_graph_0_17 graph_0)
    (Int32.to_int f_0_0)))) (0))))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 200 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_39
    (shift (select __anonstruct_Graph_4_vertices_graph_0_17 graph_0)
    (Int32.to_int t_0_0)))) (0))))
   /\
   (#"graph_1_c.jc" 480 12 2212#
   ((#"/home/debian/mfsp/examples/regions/graph_1.c" 201 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_39
    (shift (select __anonstruct_Graph_4_vertices_graph_0_17 graph_0)
    (Int32.to_int f2_0)))) (0))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_1.c" 202 13 41#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_39
   (shift (select __anonstruct_Graph_4_vertices_graph_0_17 graph_0)
   (Int32.to_int t2_0)))) (0)))))))))))))))))))))))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
     "expl:Ensures clause"
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
      "expl:Ensures clause"
      (not
      ((=)
      (Int32.to_int
      (select !__anonstruct_Edge_3_existent_0_edges_38
      (shift (select __anonstruct_Graph_4_edges_graph_0_17 graph_0)
      (Int32.to_int pos_0)))) (0))))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 204 12 39#
      "expl:Ensures clause"
      (not
      ((=)
      (Int32.to_int
      (select !__anonstruct_Edge_3_existent_0_edges_38
      (shift (select __anonstruct_Graph_4_edges_graph_0_17 graph_0)
      (Int32.to_int pos2_0)))) (0))))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 205 12 39#
      "expl:Ensures clause"
      (Int32.(=)
      (select !__anonstruct_Edge_3_from_edges_38
      (shift (select __anonstruct_Graph_4_edges_graph_0_17 graph_0)
      (Int32.to_int pos_0))) f_0_0))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 206 12 41#
      "expl:Ensures clause"
      (Int32.(=)
      (select !__anonstruct_Edge_3_from_edges_38
      (shift (select __anonstruct_Graph_4_edges_graph_0_17 graph_0)
      (Int32.to_int pos2_0))) f2_0))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 207 12 37#
      "expl:Ensures clause"
      (Int32.(=)
      (select !__anonstruct_Edge_3_to_edges_38
      (shift (select __anonstruct_Graph_4_edges_graph_0_17 graph_0)
      (Int32.to_int pos_0))) t_0_0))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 208 12 39#
     "expl:Ensures clause"
     (Int32.(=)
     (select !__anonstruct_Edge_3_to_edges_38
     (shift (select __anonstruct_Graph_4_edges_graph_0_17 graph_0)
     (Int32.to_int pos2_0))) t2_0)))))))))))))) }  ->
   'Init:
   try
    begin
    (let _jessie_95 = graph_0 in
    (let _jessie_94 = pos_0 in
    (let _jessie_93 = f_0_0 in
    (let _jessie_92 = t_0_0 in
    (#"/home/debian/mfsp/examples/regions/graph_1.c" 212 4 39#
    "expl:Precondition for insert_edge_fixed"
    (Function_insert_edge_fixed.insert_edge_fixed  _jessie_95 _jessie_94
     _jessie_93 _jessie_92 __anonstruct_Edge_3_existent_0_edges_38
     __anonstruct_Edge_3_to_edges_38 __anonstruct_Edge_3_from_edges_38
     __anonstruct_Vertex_2_vertices_39_alloc_table
     __anonstruct_Graph_4_graph_0_17_alloc_table
     __anonstruct_Edge_3_edges_38_alloc_table
     __anonstruct_Edge_3_edges_38_tag_table
     __anonstruct_Graph_4_esize_graph_0_17
     __anonstruct_Graph_4_ecnt_graph_0_17
     __anonstruct_Graph_4_edges_graph_0_17
     __anonstruct_Graph_4_vsize_graph_0_17
     __anonstruct_Graph_4_vertices_graph_0_17
     __anonstruct_Vertex_2_existent_vertices_39 ))))));
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 213 15 28#
     "expl:Assertion in line 213"
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 213 15 28#
     "expl:Assertion in line 213"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 213 15 28#
      "expl:Assertion in line 213"
      ((<=) (offset_min __anonstruct_Graph_4_graph_0_17_alloc_table graph_0)
      (0)))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 213 15 28#
     "expl:Assertion in line 213"
     ((#"/home/debian/mfsp/examples/regions/graph_1.c" 213 15 28#
      "expl:Assertion in line 213"
      ((>=) (offset_max __anonstruct_Graph_4_graph_0_17_alloc_table graph_0)
      (0)))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 213 15 28#
     "expl:Assertion in line 213" ((=) true true))))))) }); () end;
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 214 17 45#
     "expl:Assertion in line 214"
     (not
     ((=)
     (Int32.to_int
     (select __anonstruct_Vertex_2_existent_vertices_39
     (shift (select __anonstruct_Graph_4_vertices_graph_0_17 graph_0)
     (Int32.to_int f2_0)))) (0)))) }); () end;
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 215 17 45#
     "expl:Assertion in line 215"
     ((=)
     (Int32.to_int
     (select !__anonstruct_Edge_3_existent_0_edges_38
     (shift (select __anonstruct_Graph_4_edges_graph_0_17 graph_0)
     (Int32.to_int pos2_0)))) (0))) }); () end;
     begin
     (let _jessie_99 = graph_0 in
     (let _jessie_98 = pos2_0 in
     (let _jessie_97 = f2_0 in
     (let _jessie_96 = t2_0 in
     (#"/home/debian/mfsp/examples/regions/graph_1.c" 216 6 44#
     "expl:Precondition for insert_edge_fixed"
     (Function_insert_edge_fixed.insert_edge_fixed  _jessie_99 _jessie_98
      _jessie_97 _jessie_96 __anonstruct_Edge_3_existent_0_edges_38
      __anonstruct_Edge_3_to_edges_38 __anonstruct_Edge_3_from_edges_38
      __anonstruct_Vertex_2_vertices_39_alloc_table
      __anonstruct_Graph_4_graph_0_17_alloc_table
      __anonstruct_Edge_3_edges_38_alloc_table
      __anonstruct_Edge_3_edges_38_tag_table
      __anonstruct_Graph_4_esize_graph_0_17
      __anonstruct_Graph_4_ecnt_graph_0_17
      __anonstruct_Graph_4_edges_graph_0_17
      __anonstruct_Graph_4_vsize_graph_0_17
      __anonstruct_Graph_4_vertices_graph_0_17
      __anonstruct_Vertex_2_existent_vertices_39 )))))); (raise Return) end;
     (raise Return) end with Return -> () end
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct___anonstruct_Edge_3

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Edge_3_tag  : (tag_id
  __anonstruct_Edge_3)
  
  axiom U___anonstruct_Edge_3_parenttag_bottom  :
  (parenttag __anonstruct_Edge_3_tag bottom_tag)
  
  axiom U___anonstruct_Edge_3_is_final  :
  (forall __anonstruct_Edge_3_tag_table : (tag_table __anonstruct_Edge_3).
   (forall p : (pointer __anonstruct_Edge_3).
    ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) ->
     ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag))))
  
  predicate frame_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  =
     ((tag_extends old___anonstruct_Edge_3_tag_table
      __anonstruct_Edge_3_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Edge_3_tag_table
     __anonstruct_Edge_3_tag_table p))
  
  predicate frame_free_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3))
  =
     ((free_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (free_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (old___anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  =
     ((alloc_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (alloc_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (tag_fresh __anonstruct_Edge_3_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = (alloc_fresh __anonstruct_Edge_3_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) = true
  
  predicate container_of_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3)) = true
  
  predicate typeof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
  
  predicate typeof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     (((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Edge_3_tag_table (shift p i))
       __anonstruct_Edge_3_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag)
  
  predicate instanceof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Edge_3_tag_table (shift p i)
       __anonstruct_Edge_3_tag))))
  
  predicate right_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (b : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  axiom U___anonstruct_Edge_3_int  :
  ((=) (int_of_tag __anonstruct_Edge_3_tag) (4))
  
end

module Struct___anonstruct_Edge_3_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Edge_3_alloc_table p)) }
    writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3_requires
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { ((>=) n (0)) } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
end

module Struct___anonstruct_Edge_3_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires { true } writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { true } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Edge_3
  (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
    (pointer __anonstruct_Edge_3)
    requires { true } writes { __anonstruct_Edge_3_alloc_table,
    __anonstruct_Edge_3_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Edge_3 result (0) (0)
       !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Edge_3 result (1) (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Edge_3 result (old
       !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Edge_3 result
       !__anonstruct_Edge_3_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Edge_3 result
      !__anonstruct_Edge_3_tag_table))))))) }
  
end

theory Struct___anonstruct_Graph_4

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Graph_4_tag  : (tag_id
  __anonstruct_Graph_4)
  
  axiom U___anonstruct_Graph_4_parenttag_bottom  :
  (parenttag __anonstruct_Graph_4_tag bottom_tag)
  
  axiom U___anonstruct_Graph_4_is_final  :
  (forall __anonstruct_Graph_4_tag_table : (tag_table __anonstruct_Graph_4).
   (forall p : (pointer __anonstruct_Graph_4).
    ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     ->
     ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag))))
  
  predicate frame_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  =
     ((tag_extends old___anonstruct_Graph_4_tag_table
      __anonstruct_Graph_4_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Graph_4_tag_table
     __anonstruct_Graph_4_tag_table p))
  
  predicate frame_free_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4))
  =
     ((free_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (free_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (old___anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  =
     ((alloc_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (alloc_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_tag_table :
  (tag_table __anonstruct_Graph_4))
  = (tag_fresh __anonstruct_Graph_4_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = (alloc_fresh __anonstruct_Graph_4_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) = true
  
  predicate container_of_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4)) = true
  
  predicate typeof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
  
  predicate typeof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     (((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Graph_4_tag_table (shift p i))
       __anonstruct_Graph_4_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = (instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
  
  predicate instanceof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Graph_4_tag_table (shift p i)
       __anonstruct_Graph_4_tag))))
  
  predicate right_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (b : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  axiom U___anonstruct_Graph_4_int  :
  ((=) (int_of_tag __anonstruct_Graph_4_tag) (5))
  
end

module Struct___anonstruct_Graph_4_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Graph_4_alloc_table p)) }
    writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4_requires
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { ((>=) n (0)) } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
end

module Struct___anonstruct_Graph_4_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires { true } writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { true } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Graph_4
  (__anonstruct_Graph_4_alloc_table : ref (alloc_table
   __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
    (pointer __anonstruct_Graph_4)
    requires { true } writes { __anonstruct_Graph_4_alloc_table,
    __anonstruct_Graph_4_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Graph_4 result (0) (0)
       !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Graph_4 result (1) (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Graph_4 result (old
       !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Graph_4 result
       !__anonstruct_Graph_4_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Graph_4 result
      !__anonstruct_Graph_4_tag_table))))))) }
  
end

theory Struct___anonstruct_Vertex_2

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Vertex_2_tag  : (tag_id
  __anonstruct_Vertex_2)
  
  axiom U___anonstruct_Vertex_2_parenttag_bottom  :
  (parenttag __anonstruct_Vertex_2_tag bottom_tag)
  
  axiom U___anonstruct_Vertex_2_is_final  :
  (forall __anonstruct_Vertex_2_tag_table : (tag_table
   __anonstruct_Vertex_2).
   (forall p : (pointer __anonstruct_Vertex_2).
    ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     ->
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag))))
  
  predicate frame_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((tag_extends old___anonstruct_Vertex_2_tag_table
      __anonstruct_Vertex_2_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Vertex_2_tag_table
     __anonstruct_Vertex_2_tag_table p))
  
  predicate frame_free_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((free_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (free_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((alloc_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (alloc_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_tag_table :
  (tag_table __anonstruct_Vertex_2))
  = (tag_fresh __anonstruct_Vertex_2_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = (alloc_fresh __anonstruct_Vertex_2_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) = true
  
  predicate container_of_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  = true
  
  predicate typeof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag)
  
  predicate typeof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     (((=) (typeof __anonstruct_Vertex_2_tag_table p)
      __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Vertex_2_tag_table (shift p i))
       __anonstruct_Vertex_2_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  = (instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
  
  predicate instanceof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Vertex_2_tag_table (shift p i)
       __anonstruct_Vertex_2_tag))))
  
  predicate right_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (b : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  axiom U___anonstruct_Vertex_2_int  :
  ((=) (int_of_tag __anonstruct_Vertex_2_tag) (6))
  
end

module Struct___anonstruct_Vertex_2_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Vertex_2_alloc_table p)) }
    writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2_requires
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { ((>=) n (0)) } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
end

module Struct___anonstruct_Vertex_2_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires { true } writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { true } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Vertex_2
  (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
   __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_tag_table : ref (tag_table
    __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
    requires { true } writes { __anonstruct_Vertex_2_alloc_table,
    __anonstruct_Vertex_2_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Vertex_2 result (0) (0)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Vertex_2 result (1) (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Vertex_2 result (old
       !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Vertex_2 result
       !__anonstruct_Vertex_2_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Vertex_2 result
      !__anonstruct_Vertex_2_tag_table))))))) }
  
end

theory Struct_voidP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate strict_left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_charP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_struct___anonstruct_Graph_4_xP_unsafe

  use import core.Tag_table_type 
  
  use import Struct_struct___anonstruct_Graph_4_xP 
  
  use import Root_struct___anonstruct_Graph_4_xP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_struct___anonstruct_Graph_4_xP
  (p : (pointer struct___anonstruct_Graph_4_xP)) 
   (struct___anonstruct_Graph_4_xP_alloc_table : ref (alloc_table
    struct___anonstruct_Graph_4_xP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !struct___anonstruct_Graph_4_xP_alloc_table p)) }
    writes { struct___anonstruct_Graph_4_xP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !struct___anonstruct_Graph_4_xP_alloc_table (old
       !struct___anonstruct_Graph_4_xP_alloc_table)))
      \/
      ((frame_free_struct_struct___anonstruct_Graph_4_xP p (old
       !struct___anonstruct_Graph_4_xP_alloc_table)
       !struct___anonstruct_Graph_4_xP_alloc_table)
      /\
      (fresh_alloc_struct_struct___anonstruct_Graph_4_xP p
      (offset_max (old !struct___anonstruct_Graph_4_xP_alloc_table) p)
      !struct___anonstruct_Graph_4_xP_alloc_table))) }
  
  val allocate_struct_struct___anonstruct_Graph_4_xP_requires
  (n : int) 
   (struct___anonstruct_Graph_4_xP_alloc_table : ref (alloc_table
    struct___anonstruct_Graph_4_xP)) 
    (struct___anonstruct_Graph_4_xP_tag_table : ref (tag_table
     struct___anonstruct_Graph_4_xP)) : (pointer
     struct___anonstruct_Graph_4_xP)
     requires { ((>=) n (0)) } writes {
     struct___anonstruct_Graph_4_xP_alloc_table,
     struct___anonstruct_Graph_4_xP_tag_table }
     ensures {
       ((strict_valid_struct_struct___anonstruct_Graph_4_xP result (0)
        (Int.(-) n (1)) !struct___anonstruct_Graph_4_xP_alloc_table)
       /\
       ((frame_alloc_struct_struct___anonstruct_Graph_4_xP result n (old
        !struct___anonstruct_Graph_4_xP_alloc_table)
        !struct___anonstruct_Graph_4_xP_alloc_table)
       /\
       ((frame_tag_struct_struct___anonstruct_Graph_4_xP result (old
        !struct___anonstruct_Graph_4_xP_tag_table)
        !struct___anonstruct_Graph_4_xP_tag_table)
       /\
       ((fresh_alloc_struct_struct___anonstruct_Graph_4_xP result
        (Int.(-) n (1)) (old !struct___anonstruct_Graph_4_xP_alloc_table))
       /\
       ((fresh_tag_struct_struct___anonstruct_Graph_4_xP result
        (Int.(-) n (1)) (old !struct___anonstruct_Graph_4_xP_tag_table))
       /\
       ((typeof_struct_struct___anonstruct_Graph_4_xP result (0) n
        !struct___anonstruct_Graph_4_xP_tag_table)
       /\
       (container_of_struct_struct___anonstruct_Graph_4_xP result (0) n
       !struct___anonstruct_Graph_4_xP_tag_table))))))) }
  
end

module Struct_struct___anonstruct_Graph_4_xP_safe

  use import core.Tag_table_type 
  
  use import Struct_struct___anonstruct_Graph_4_xP 
  
  use import Root_struct___anonstruct_Graph_4_xP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_struct___anonstruct_Graph_4_xP
  (p : (pointer struct___anonstruct_Graph_4_xP)) 
   (struct___anonstruct_Graph_4_xP_alloc_table : ref (alloc_table
    struct___anonstruct_Graph_4_xP)) : unit
    requires { true } writes { struct___anonstruct_Graph_4_xP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !struct___anonstruct_Graph_4_xP_alloc_table (old
       !struct___anonstruct_Graph_4_xP_alloc_table)))
      \/
      ((frame_free_struct_struct___anonstruct_Graph_4_xP p (old
       !struct___anonstruct_Graph_4_xP_alloc_table)
       !struct___anonstruct_Graph_4_xP_alloc_table)
      /\
      (fresh_alloc_struct_struct___anonstruct_Graph_4_xP p
      (offset_max (old !struct___anonstruct_Graph_4_xP_alloc_table) p)
      !struct___anonstruct_Graph_4_xP_alloc_table))) }
  
  val allocate_struct_struct___anonstruct_Graph_4_xP
  (n : int) 
   (struct___anonstruct_Graph_4_xP_alloc_table : ref (alloc_table
    struct___anonstruct_Graph_4_xP)) 
    (struct___anonstruct_Graph_4_xP_tag_table : ref (tag_table
     struct___anonstruct_Graph_4_xP)) : (pointer
     struct___anonstruct_Graph_4_xP)
     requires { true } writes { struct___anonstruct_Graph_4_xP_alloc_table,
     struct___anonstruct_Graph_4_xP_tag_table }
     ensures {
       ((strict_valid_struct_struct___anonstruct_Graph_4_xP result (0)
        (Int.(-) n (1)) !struct___anonstruct_Graph_4_xP_alloc_table)
       /\
       ((frame_alloc_struct_struct___anonstruct_Graph_4_xP result n (old
        !struct___anonstruct_Graph_4_xP_alloc_table)
        !struct___anonstruct_Graph_4_xP_alloc_table)
       /\
       ((frame_tag_struct_struct___anonstruct_Graph_4_xP result (old
        !struct___anonstruct_Graph_4_xP_tag_table)
        !struct___anonstruct_Graph_4_xP_tag_table)
       /\
       ((fresh_alloc_struct_struct___anonstruct_Graph_4_xP result
        (Int.(-) n (1)) (old !struct___anonstruct_Graph_4_xP_alloc_table))
       /\
       ((fresh_tag_struct_struct___anonstruct_Graph_4_xP result
        (Int.(-) n (1)) (old !struct___anonstruct_Graph_4_xP_tag_table))
       /\
       ((typeof_struct_struct___anonstruct_Graph_4_xP result (0) n
        !struct___anonstruct_Graph_4_xP_tag_table)
       /\
       (container_of_struct_struct___anonstruct_Graph_4_xP result (0) n
       !struct___anonstruct_Graph_4_xP_tag_table))))))) }
  
  val allocate_singleton_struct_struct___anonstruct_Graph_4_xP
  (struct___anonstruct_Graph_4_xP_alloc_table : ref (alloc_table
   struct___anonstruct_Graph_4_xP)) 
   (struct___anonstruct_Graph_4_xP_tag_table : ref (tag_table
    struct___anonstruct_Graph_4_xP)) : (pointer
    struct___anonstruct_Graph_4_xP)
    requires { true } writes { struct___anonstruct_Graph_4_xP_alloc_table,
    struct___anonstruct_Graph_4_xP_tag_table }
    ensures {
      ((strict_valid_struct_struct___anonstruct_Graph_4_xP result (0) (0)
       !struct___anonstruct_Graph_4_xP_alloc_table)
      /\
      ((frame_alloc_struct_struct___anonstruct_Graph_4_xP result (1) (old
       !struct___anonstruct_Graph_4_xP_alloc_table)
       !struct___anonstruct_Graph_4_xP_alloc_table)
      /\
      ((frame_tag_struct_struct___anonstruct_Graph_4_xP result (old
       !struct___anonstruct_Graph_4_xP_tag_table)
       !struct___anonstruct_Graph_4_xP_tag_table)
      /\
      ((fresh_alloc_struct_struct___anonstruct_Graph_4_xP result (0) (old
       !struct___anonstruct_Graph_4_xP_alloc_table))
      /\
      ((fresh_tag_struct_struct___anonstruct_Graph_4_xP result (0) (old
       !struct___anonstruct_Graph_4_xP_tag_table))
      /\
      ((typeof_singleton_struct_struct___anonstruct_Graph_4_xP result
       !struct___anonstruct_Graph_4_xP_tag_table)
      /\
      (container_of_singleton_struct_struct___anonstruct_Graph_4_xP result
      !struct___anonstruct_Graph_4_xP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

theory Logic_range_existent

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate range_existent (g_6 : (pointer __anonstruct_Graph_4)) (m_0 : int)
  (n_3 : int) (__anonstruct_Graph_4_edges_g_6_9_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_23_at_L : (memory __anonstruct_Edge_3
  Int32.t))
  =
     (forall k_6 : int.
      ((((<=) m_0 k_6) /\ ((<) k_6 n_3)) ->
       (not
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_23_at_L
       (shift (select __anonstruct_Graph_4_edges_g_6_9_at_L g_6) k_6))) (0)))))
  
  
end

theory Logic_full

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_range_existent 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate full (g_5 : (pointer __anonstruct_Graph_4))
  (__anonstruct_Graph_4_esize_g_5_8_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_edges_g_5_8_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_60_at_L : (memory __anonstruct_Edge_3
  Int32.t))
  =
     (range_existent g_5 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_5_8_at_L g_5))
     __anonstruct_Graph_4_edges_g_5_8_at_L
     __anonstruct_Edge_3_existent_0_edges_60_at_L)
  
  
end

module Function_insert_double_edge

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_double_edge
  (graph : (pointer __anonstruct_Graph_4)) 
   (pos : Int32.t) 
    (pos2 : Int32.t) 
     (f_2 : Int32.t) 
      (t_2 : Int32.t) 
       (f2 : Int32.t) 
        (t2 : Int32.t) 
         (__anonstruct_Edge_3_existent_0_edges_31 : ref (memory
          __anonstruct_Edge_3 Int32.t)) 
          (__anonstruct_Edge_3_to_edges_31 : ref (memory __anonstruct_Edge_3
           Int32.t)) 
           (__anonstruct_Edge_3_from_edges_31 : ref (memory
            __anonstruct_Edge_3 Int32.t)) 
            (__anonstruct_Vertex_2_vertices_32_alloc_table : (alloc_table
             __anonstruct_Vertex_2)) 
             (__anonstruct_Graph_4_graph_14_alloc_table : (alloc_table
              __anonstruct_Graph_4)) 
              (__anonstruct_Edge_3_edges_31_alloc_table : (alloc_table
               __anonstruct_Edge_3)) 
               (__anonstruct_Edge_3_edges_31_tag_table : (tag_table
                __anonstruct_Edge_3)) 
                (__anonstruct_Graph_4_esize_graph_14 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_ecnt_graph_14 : (memory
                  __anonstruct_Graph_4 Int32.t)) 
                  (__anonstruct_Graph_4_edges_graph_14 : (memory
                   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                   (__anonstruct_Graph_4_vsize_graph_14 : (memory
                    __anonstruct_Graph_4 Int32.t)) 
                    (__anonstruct_Graph_4_vertices_graph_14 : (memory
                     __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                     (__anonstruct_Vertex_2_existent_vertices_32 : (memory
                      __anonstruct_Vertex_2 Int32.t)) : unit
                      requires { true } reads {
                      __anonstruct_Edge_3_existent_0_edges_31,
                      __anonstruct_Edge_3_from_edges_31,
                      __anonstruct_Edge_3_to_edges_31 } writes {
                      __anonstruct_Edge_3_existent_0_edges_31,
                      __anonstruct_Edge_3_from_edges_31,
                      __anonstruct_Edge_3_to_edges_31 }
                      ensures {
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                        "expl:Ensures clause"
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                         "expl:Ensures clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_31
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 111 12 39#
                         "expl:Ensures clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_31
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos2)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 112 12 39#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_31
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos))) f_2))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 113 12 41#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_31
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos2))) f2))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 114 12 37#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_to_edges_31
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos))) t_2))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 115 12 39#
                        "expl:Ensures clause"
                        (Int32.(=)
                        (select !__anonstruct_Edge_3_to_edges_31
                        (shift
                        (select __anonstruct_Graph_4_edges_graph_14 graph)
                        (Int32.to_int pos2))) t2))))))))))))) }
  
end

module Function_insert_double_edge_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_double_edge
  (graph : (pointer __anonstruct_Graph_4)) 
   (pos : Int32.t) 
    (pos2 : Int32.t) 
     (f_2 : Int32.t) 
      (t_2 : Int32.t) 
       (f2 : Int32.t) 
        (t2 : Int32.t) 
         (__anonstruct_Edge_3_existent_0_edges_31 : ref (memory
          __anonstruct_Edge_3 Int32.t)) 
          (__anonstruct_Edge_3_to_edges_31 : ref (memory __anonstruct_Edge_3
           Int32.t)) 
           (__anonstruct_Edge_3_from_edges_31 : ref (memory
            __anonstruct_Edge_3 Int32.t)) 
            (__anonstruct_Vertex_2_vertices_32_alloc_table : (alloc_table
             __anonstruct_Vertex_2)) 
             (__anonstruct_Graph_4_graph_14_alloc_table : (alloc_table
              __anonstruct_Graph_4)) 
              (__anonstruct_Edge_3_edges_31_alloc_table : (alloc_table
               __anonstruct_Edge_3)) 
               (__anonstruct_Edge_3_edges_31_tag_table : (tag_table
                __anonstruct_Edge_3)) 
                (__anonstruct_Graph_4_esize_graph_14 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_ecnt_graph_14 : (memory
                  __anonstruct_Graph_4 Int32.t)) 
                  (__anonstruct_Graph_4_edges_graph_14 : (memory
                   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                   (__anonstruct_Graph_4_vsize_graph_14 : (memory
                    __anonstruct_Graph_4 Int32.t)) 
                    (__anonstruct_Graph_4_vertices_graph_14 : (memory
                     __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                     (__anonstruct_Vertex_2_existent_vertices_32 : (memory
                      __anonstruct_Vertex_2 Int32.t)) : unit
                      requires {
                        ("expl:Internal"
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 95 13 26#
                         "expl:Requires clause"
                         (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                         ((#"graph_1_c.jc" 204 12 2006#
                          "expl:Requires clause"
                          ((<=)
                          (offset_min
                          __anonstruct_Graph_4_graph_14_alloc_table graph)
                          (0)))
                         /\
                         (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                         ((#"graph_1_c.jc" 204 12 2006#
                          "expl:Requires clause"
                          ((>=)
                          (offset_max
                          __anonstruct_Graph_4_graph_14_alloc_table graph)
                          (0)))
                         /\
                         (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                         ((=) true true)))))))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 96 13 25#
                         "expl:Requires clause"
                         (valid_0 graph
                         __anonstruct_Vertex_2_vertices_32_alloc_table
                         __anonstruct_Edge_3_edges_31_alloc_table
                         __anonstruct_Graph_4_esize_graph_14
                         __anonstruct_Graph_4_ecnt_graph_14
                         __anonstruct_Graph_4_edges_graph_14
                         __anonstruct_Graph_4_vsize_graph_14
                         __anonstruct_Graph_4_vertices_graph_14
                         !__anonstruct_Edge_3_existent_0_edges_31
                         !__anonstruct_Edge_3_to_edges_31
                         !__anonstruct_Edge_3_from_edges_31
                         __anonstruct_Vertex_2_existent_vertices_32))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 97 13 21#
                         "expl:Requires clause"
                         (Int32.(<=) (#"graph_1_c.jc" 208 36 48#
                         "expl:Integer cast" (Int32.of_int (0))) pos))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 97 18 35#
                         "expl:Requires clause"
                         (Int32.(<) pos
                         (select __anonstruct_Graph_4_ecnt_graph_14 graph)))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 98 13 22#
                         "expl:Requires clause"
                         (Int32.(<=) (#"graph_1_c.jc" 210 38 50#
                         "expl:Integer cast" (Int32.of_int (0))) pos2))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 98 18 36#
                         "expl:Requires clause"
                         (Int32.(<) pos2
                         (select __anonstruct_Graph_4_ecnt_graph_14 graph)))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 99 13 24#
                         "expl:Requires clause" (not (Int32.(=) pos pos2)))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 100 13 40#
                         "expl:Requires clause"
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_31
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos)))) (0)))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 101 13 41#
                         "expl:Requires clause"
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_31
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos2)))) (0)))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 102 13 32#
                         "expl:Requires clause"
                         (is_vertex graph (Int32.to_int f_2)
                         __anonstruct_Graph_4_vsize_graph_14))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 103 13 33#
                         "expl:Requires clause"
                         (is_vertex graph (Int32.to_int f2)
                         __anonstruct_Graph_4_vsize_graph_14))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 104 13 32#
                         "expl:Requires clause"
                         (is_vertex graph (Int32.to_int t_2)
                         __anonstruct_Graph_4_vsize_graph_14))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 105 13 33#
                         "expl:Requires clause"
                         (is_vertex graph (Int32.to_int t2)
                         __anonstruct_Graph_4_vsize_graph_14))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 106 13 40#
                         "expl:Requires clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select __anonstruct_Vertex_2_existent_vertices_32
                         (shift
                         (select __anonstruct_Graph_4_vertices_graph_14
                         graph) (Int32.to_int f_2)))) (0))))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 107 13 40#
                         "expl:Requires clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select __anonstruct_Vertex_2_existent_vertices_32
                         (shift
                         (select __anonstruct_Graph_4_vertices_graph_14
                         graph) (Int32.to_int t_2)))) (0))))
                        /\
                        (#"graph_1_c.jc" 204 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 108 13 41#
                         "expl:Requires clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select __anonstruct_Vertex_2_existent_vertices_32
                         (shift
                         (select __anonstruct_Graph_4_vertices_graph_14
                         graph) (Int32.to_int f2)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 109 13 41#
                        "expl:Requires clause"
                        (not
                        ((=)
                        (Int32.to_int
                        (select __anonstruct_Vertex_2_existent_vertices_32
                        (shift
                        (select __anonstruct_Graph_4_vertices_graph_14 graph)
                        (Int32.to_int t2)))) (0)))))))))))))))))))))))))))))))))))))
                        }
                      reads { __anonstruct_Edge_3_existent_0_edges_31,
                      __anonstruct_Edge_3_from_edges_31,
                      __anonstruct_Edge_3_to_edges_31 } writes {
                      __anonstruct_Edge_3_existent_0_edges_31,
                      __anonstruct_Edge_3_from_edges_31,
                      __anonstruct_Edge_3_to_edges_31 }
                      ensures {
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                        "expl:Ensures clause"
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                         "expl:Ensures clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_31
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 111 12 39#
                         "expl:Ensures clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_31
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos2)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 112 12 39#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_31
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos))) f_2))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 113 12 41#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_31
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos2))) f2))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 114 12 37#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_to_edges_31
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos))) t_2))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 115 12 39#
                        "expl:Ensures clause"
                        (Int32.(=)
                        (select !__anonstruct_Edge_3_to_edges_31
                        (shift
                        (select __anonstruct_Graph_4_edges_graph_14 graph)
                        (Int32.to_int pos2))) t2))))))))))))) }
  
end

module Function_insert_edge_to_graphs

  use import core.Tag_table_type 
  
  use import Root_struct___anonstruct_Graph_4_xP 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_edge_to_graphs
  (graphs : (pointer struct___anonstruct_Graph_4_xP)) 
   (n_1_0 : Int32.t) 
    (pos_3 : Int32.t) 
     (f_3 : Int32.t) 
      (t_3 : Int32.t) 
       (__anonstruct_Edge_3_existent_0_edges_34 : ref (memory
        __anonstruct_Edge_3 Int32.t)) 
        (__anonstruct_Edge_3_to_edges_34 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Edge_3_from_edges_34 : ref (memory __anonstruct_Edge_3
          Int32.t)) 
          (struct___anonstruct_Graph_4_xP_graphs_15_alloc_table :
           (alloc_table struct___anonstruct_Graph_4_xP)) 
           (__anonstruct_Vertex_2_vertices_35_alloc_table : (alloc_table
            __anonstruct_Vertex_2)) 
            (__anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
             : (alloc_table __anonstruct_Graph_4)) 
             (__anonstruct_Edge_3_edges_34_alloc_table : (alloc_table
              __anonstruct_Edge_3)) 
              (struct___anonstruct_Graph_4_xP_graphs_15_tag_table :
               (tag_table struct___anonstruct_Graph_4_xP)) 
               (__anonstruct_Edge_3_edges_34_tag_table : (tag_table
                __anonstruct_Edge_3)) 
                (__anonstruct_Graph_4_esize_struct___anonstruct_Graph_4_xM_33
                 : (memory __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_ecnt_struct___anonstruct_Graph_4_xM_33
                  : (memory __anonstruct_Graph_4 Int32.t)) 
                  (__anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
                   : (memory __anonstruct_Graph_4 (pointer
                   __anonstruct_Edge_3))) 
                   (__anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33
                    : (memory __anonstruct_Graph_4 Int32.t)) 
                    (__anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
                     : (memory __anonstruct_Graph_4 (pointer
                     __anonstruct_Vertex_2))) 
                     (__anonstruct_Vertex_2_existent_vertices_35 : (memory
                      __anonstruct_Vertex_2 Int32.t)) 
                      (struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                       : (memory struct___anonstruct_Graph_4_xP (pointer
                       __anonstruct_Graph_4))) : unit
                       requires { true } reads {
                       __anonstruct_Edge_3_existent_0_edges_34,
                       __anonstruct_Edge_3_from_edges_34,
                       __anonstruct_Edge_3_to_edges_34 } writes {
                       __anonstruct_Edge_3_existent_0_edges_34,
                       __anonstruct_Edge_3_from_edges_34,
                       __anonstruct_Edge_3_to_edges_34 }
                       ensures {
                         (#"/home/debian/mfsp/examples/regions/graph_1.c" 142 12 168#
                         "expl:Ensures clause"
                         (forall k_12 : int.
                          ((((<=) (0) k_12) /\
                           ((<) k_12 (Int32.to_int n_1_0))) ->
                           ((not
                            ((=)
                            (Int32.to_int
                            (select !__anonstruct_Edge_3_existent_0_edges_34
                            (shift
                            (select
                            __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
                            (select
                            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                            (shift graphs k_12))) (Int32.to_int pos_3))))
                            (0)))
                           /\
                           ((Int32.(=)
                            (select !__anonstruct_Edge_3_from_edges_34
                            (shift
                            (select
                            __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
                            (select
                            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                            (shift graphs k_12))) (Int32.to_int pos_3))) f_3)
                           /\
                           (Int32.(=)
                           (select !__anonstruct_Edge_3_to_edges_34
                           (shift
                           (select
                           __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
                           (select
                           struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                           (shift graphs k_12))) (Int32.to_int pos_3))) t_3))))))
                         }
  
end

module Function_insert_edge_to_graphs_safe

  use import core.Tag_table_type 
  
  use import Root_struct___anonstruct_Graph_4_xP 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_edge_to_graphs
  (graphs : (pointer struct___anonstruct_Graph_4_xP)) 
   (n_1_0 : Int32.t) 
    (pos_3 : Int32.t) 
     (f_3 : Int32.t) 
      (t_3 : Int32.t) 
       (__anonstruct_Edge_3_existent_0_edges_34 : ref (memory
        __anonstruct_Edge_3 Int32.t)) 
        (__anonstruct_Edge_3_to_edges_34 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Edge_3_from_edges_34 : ref (memory __anonstruct_Edge_3
          Int32.t)) 
          (struct___anonstruct_Graph_4_xP_graphs_15_alloc_table :
           (alloc_table struct___anonstruct_Graph_4_xP)) 
           (__anonstruct_Vertex_2_vertices_35_alloc_table : (alloc_table
            __anonstruct_Vertex_2)) 
            (__anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
             : (alloc_table __anonstruct_Graph_4)) 
             (__anonstruct_Edge_3_edges_34_alloc_table : (alloc_table
              __anonstruct_Edge_3)) 
              (struct___anonstruct_Graph_4_xP_graphs_15_tag_table :
               (tag_table struct___anonstruct_Graph_4_xP)) 
               (__anonstruct_Edge_3_edges_34_tag_table : (tag_table
                __anonstruct_Edge_3)) 
                (__anonstruct_Graph_4_esize_struct___anonstruct_Graph_4_xM_33
                 : (memory __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_ecnt_struct___anonstruct_Graph_4_xM_33
                  : (memory __anonstruct_Graph_4 Int32.t)) 
                  (__anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
                   : (memory __anonstruct_Graph_4 (pointer
                   __anonstruct_Edge_3))) 
                   (__anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33
                    : (memory __anonstruct_Graph_4 Int32.t)) 
                    (__anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
                     : (memory __anonstruct_Graph_4 (pointer
                     __anonstruct_Vertex_2))) 
                     (__anonstruct_Vertex_2_existent_vertices_35 : (memory
                      __anonstruct_Vertex_2 Int32.t)) 
                      (struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                       : (memory struct___anonstruct_Graph_4_xP (pointer
                       __anonstruct_Graph_4))) : unit
                       requires {
                         ("expl:Internal"
                         (#"graph_1_c.jc" 288 12 3239# "expl:Requires clause"
                         ((#"/home/debian/mfsp/examples/regions/graph_1.c" 129 13 19#
                          "expl:Requires clause"
                          (Int32.(>=) n_1_0 (#"graph_1_c.jc" 288 29 41#
                          "expl:Integer cast" (Int32.of_int (0)))))
                         /\
                         (#"graph_1_c.jc" 288 12 3239# "expl:Requires clause"
                         ((#"/home/debian/mfsp/examples/regions/graph_1.c" 130 13 42#
                          "expl:Requires clause"
                          (if ((<=) (0) (Int.(-) (Int32.to_int n_1_0) (1)))
                           then
                           (((<=)
                            (offset_min
                            struct___anonstruct_Graph_4_xP_graphs_15_alloc_table
                            graphs) (0))
                           /\
                           (((>=)
                            (offset_max
                            struct___anonstruct_Graph_4_xP_graphs_15_alloc_table
                            graphs) (Int.(-) (Int32.to_int n_1_0) (1)))
                           /\
                           (forall __framac_tmp7 : int.
                            ((((<=) (0) __framac_tmp7) /\
                             ((<=) __framac_tmp7
                             (Int.(-) (Int32.to_int n_1_0) (1)))) ->
                             ((=) true true))))) else ((=) true true)))
                         /\
                         (#"/home/debian/mfsp/examples/regions/graph_1.c" 131 13 565#
                         "expl:Requires clause"
                         (forall k_11 : int.
                          ((((<=) (0) k_11) /\
                           ((<) k_11 (Int32.to_int n_1_0))) ->
                           ((((<=)
                             (offset_min
                             __anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
                             (select
                             struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                             (shift graphs k_11))) (0))
                            /\
                            (((>=)
                             (offset_max
                             __anonstruct_Graph_4_struct___anonstruct_Graph_4_xM_33_alloc_table
                             (select
                             struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                             (shift graphs k_11))) (0))
                            /\ ((=) true true)))
                           /\
                           ((valid_0
                            (select
                            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                            (shift graphs k_11))
                            __anonstruct_Vertex_2_vertices_35_alloc_table
                            __anonstruct_Edge_3_edges_34_alloc_table
                            __anonstruct_Graph_4_esize_struct___anonstruct_Graph_4_xM_33
                            __anonstruct_Graph_4_ecnt_struct___anonstruct_Graph_4_xM_33
                            __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
                            __anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33
                            __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
                            !__anonstruct_Edge_3_existent_0_edges_34
                            !__anonstruct_Edge_3_to_edges_34
                            !__anonstruct_Edge_3_from_edges_34
                            __anonstruct_Vertex_2_existent_vertices_35)
                           /\
                           ((Int32.(<=) (#"graph_1_c.jc" 307 39 51#
                            "expl:Integer cast" (Int32.of_int (0))) pos_3)
                           /\
                           ((Int32.(<) pos_3
                            (select
                            __anonstruct_Graph_4_ecnt_struct___anonstruct_Graph_4_xM_33
                            (select
                            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                            (shift graphs k_11))))
                           /\
                           (((=)
                            (Int32.to_int
                            (select !__anonstruct_Edge_3_existent_0_edges_34
                            (shift
                            (select
                            __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
                            (select
                            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                            (shift graphs k_11))) (Int32.to_int pos_3))))
                            (0))
                           /\
                           ((is_vertex
                            (select
                            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                            (shift graphs k_11)) (Int32.to_int f_3)
                            __anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33)
                           /\
                           ((is_vertex
                            (select
                            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                            (shift graphs k_11)) (Int32.to_int t_3)
                            __anonstruct_Graph_4_vsize_struct___anonstruct_Graph_4_xM_33)
                           /\
                           ((not
                            ((=)
                            (Int32.to_int
                            (select
                            __anonstruct_Vertex_2_existent_vertices_35
                            (shift
                            (select
                            __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
                            (select
                            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                            (shift graphs k_11))) (Int32.to_int f_3)))) (0)))
                           /\
                           ((not
                            ((=)
                            (Int32.to_int
                            (select
                            __anonstruct_Vertex_2_existent_vertices_35
                            (shift
                            (select
                            __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
                            (select
                            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                            (shift graphs k_11))) (Int32.to_int t_3)))) (0)))
                           /\
                           ((forall k2_1 : int.
                             ((((<=) (0) k2_1) /\
                              ((<) k2_1 (Int32.to_int n_1_0))) ->
                              (not
                              (same_block
                              (select
                              __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
                              (select
                              struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                              (shift graphs k_11)))
                              (select
                              __anonstruct_Graph_4_vertices_struct___anonstruct_Graph_4_xM_33
                              (select
                              struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                              (shift graphs k2_1)))))))
                           /\
                           (forall k2_2 : int.
                            ((((<=) (0) k2_2) /\
                             ((<) k2_2 (Int32.to_int n_1_0))) ->
                             (not
                             (same_block
                             (select
                             __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
                             (select
                             struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                             (shift graphs k_11)))
                             (select
                             __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
                             (select
                             struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                             (shift graphs k2_2))))))))))))))))))))))))) }
                       reads { __anonstruct_Edge_3_existent_0_edges_34,
                       __anonstruct_Edge_3_from_edges_34,
                       __anonstruct_Edge_3_to_edges_34 } writes {
                       __anonstruct_Edge_3_existent_0_edges_34,
                       __anonstruct_Edge_3_from_edges_34,
                       __anonstruct_Edge_3_to_edges_34 }
                       ensures {
                         (#"/home/debian/mfsp/examples/regions/graph_1.c" 142 12 168#
                         "expl:Ensures clause"
                         (forall k_12 : int.
                          ((((<=) (0) k_12) /\
                           ((<) k_12 (Int32.to_int n_1_0))) ->
                           ((not
                            ((=)
                            (Int32.to_int
                            (select !__anonstruct_Edge_3_existent_0_edges_34
                            (shift
                            (select
                            __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
                            (select
                            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                            (shift graphs k_12))) (Int32.to_int pos_3))))
                            (0)))
                           /\
                           ((Int32.(=)
                            (select !__anonstruct_Edge_3_from_edges_34
                            (shift
                            (select
                            __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
                            (select
                            struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                            (shift graphs k_12))) (Int32.to_int pos_3))) f_3)
                           /\
                           (Int32.(=)
                           (select !__anonstruct_Edge_3_to_edges_34
                           (shift
                           (select
                           __anonstruct_Graph_4_edges_struct___anonstruct_Graph_4_xM_33
                           (select
                           struct___anonstruct_Graph_4_xP_struct___anonstruct_Graph_4_xM_graphs_15
                           (shift graphs k_12))) (Int32.to_int pos_3))) t_3))))))
                         }
  
end

module Function_insert_double_edge_fixed

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_double_edge_fixed
  (graph_0 : (pointer __anonstruct_Graph_4)) 
   (pos_0 : Int32.t) 
    (pos2_0 : Int32.t) 
     (f_0_0 : Int32.t) 
      (t_0_0 : Int32.t) 
       (f2_0 : Int32.t) 
        (t2_0 : Int32.t) 
         (__anonstruct_Edge_3_existent_0_edges_38 : ref (memory
          __anonstruct_Edge_3 Int32.t)) 
          (__anonstruct_Edge_3_to_edges_38 : ref (memory __anonstruct_Edge_3
           Int32.t)) 
           (__anonstruct_Edge_3_from_edges_38 : ref (memory
            __anonstruct_Edge_3 Int32.t)) 
            (__anonstruct_Vertex_2_vertices_39_alloc_table : (alloc_table
             __anonstruct_Vertex_2)) 
             (__anonstruct_Graph_4_graph_0_17_alloc_table : (alloc_table
              __anonstruct_Graph_4)) 
              (__anonstruct_Edge_3_edges_38_alloc_table : (alloc_table
               __anonstruct_Edge_3)) 
               (__anonstruct_Edge_3_edges_38_tag_table : (tag_table
                __anonstruct_Edge_3)) 
                (__anonstruct_Graph_4_esize_graph_0_17 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_ecnt_graph_0_17 : (memory
                  __anonstruct_Graph_4 Int32.t)) 
                  (__anonstruct_Graph_4_edges_graph_0_17 : (memory
                   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                   (__anonstruct_Graph_4_vsize_graph_0_17 : (memory
                    __anonstruct_Graph_4 Int32.t)) 
                    (__anonstruct_Graph_4_vertices_graph_0_17 : (memory
                     __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                     (__anonstruct_Vertex_2_existent_vertices_39 : (memory
                      __anonstruct_Vertex_2 Int32.t)) : unit
                      requires { true } reads {
                      __anonstruct_Edge_3_existent_0_edges_38,
                      __anonstruct_Edge_3_from_edges_38,
                      __anonstruct_Edge_3_to_edges_38 } writes {
                      __anonstruct_Edge_3_existent_0_edges_38,
                      __anonstruct_Edge_3_from_edges_38,
                      __anonstruct_Edge_3_to_edges_38 }
                      ensures {
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                        "expl:Ensures clause"
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                         "expl:Ensures clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_38
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_0_17
                         graph_0) (Int32.to_int pos_0)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 204 12 39#
                         "expl:Ensures clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_38
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_0_17
                         graph_0) (Int32.to_int pos2_0)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 205 12 39#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_38
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_0_17
                         graph_0) (Int32.to_int pos_0))) f_0_0))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 206 12 41#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_38
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_0_17
                         graph_0) (Int32.to_int pos2_0))) f2_0))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 207 12 37#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_to_edges_38
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_0_17
                         graph_0) (Int32.to_int pos_0))) t_0_0))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 208 12 39#
                        "expl:Ensures clause"
                        (Int32.(=)
                        (select !__anonstruct_Edge_3_to_edges_38
                        (shift
                        (select __anonstruct_Graph_4_edges_graph_0_17
                        graph_0) (Int32.to_int pos2_0))) t2_0))))))))))))) }
  
end

module Function_insert_double_edge_fixed_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_double_edge_fixed
  (graph_0 : (pointer __anonstruct_Graph_4)) 
   (pos_0 : Int32.t) 
    (pos2_0 : Int32.t) 
     (f_0_0 : Int32.t) 
      (t_0_0 : Int32.t) 
       (f2_0 : Int32.t) 
        (t2_0 : Int32.t) 
         (__anonstruct_Edge_3_existent_0_edges_38 : ref (memory
          __anonstruct_Edge_3 Int32.t)) 
          (__anonstruct_Edge_3_to_edges_38 : ref (memory __anonstruct_Edge_3
           Int32.t)) 
           (__anonstruct_Edge_3_from_edges_38 : ref (memory
            __anonstruct_Edge_3 Int32.t)) 
            (__anonstruct_Vertex_2_vertices_39_alloc_table : (alloc_table
             __anonstruct_Vertex_2)) 
             (__anonstruct_Graph_4_graph_0_17_alloc_table : (alloc_table
              __anonstruct_Graph_4)) 
              (__anonstruct_Edge_3_edges_38_alloc_table : (alloc_table
               __anonstruct_Edge_3)) 
               (__anonstruct_Edge_3_edges_38_tag_table : (tag_table
                __anonstruct_Edge_3)) 
                (__anonstruct_Graph_4_esize_graph_0_17 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_ecnt_graph_0_17 : (memory
                  __anonstruct_Graph_4 Int32.t)) 
                  (__anonstruct_Graph_4_edges_graph_0_17 : (memory
                   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                   (__anonstruct_Graph_4_vsize_graph_0_17 : (memory
                    __anonstruct_Graph_4 Int32.t)) 
                    (__anonstruct_Graph_4_vertices_graph_0_17 : (memory
                     __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                     (__anonstruct_Vertex_2_existent_vertices_39 : (memory
                      __anonstruct_Vertex_2 Int32.t)) : unit
                      requires {
                        ("expl:Internal"
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 188 13 26#
                         "expl:Requires clause"
                         (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                         ((#"graph_1_c.jc" 480 12 2212#
                          "expl:Requires clause"
                          ((<=)
                          (offset_min
                          __anonstruct_Graph_4_graph_0_17_alloc_table
                          graph_0) (0)))
                         /\
                         (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                         ((#"graph_1_c.jc" 480 12 2212#
                          "expl:Requires clause"
                          ((>=)
                          (offset_max
                          __anonstruct_Graph_4_graph_0_17_alloc_table
                          graph_0) (0)))
                         /\
                         (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                         ((=) true true)))))))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 189 13 25#
                         "expl:Requires clause"
                         (valid_0 graph_0
                         __anonstruct_Vertex_2_vertices_39_alloc_table
                         __anonstruct_Edge_3_edges_38_alloc_table
                         __anonstruct_Graph_4_esize_graph_0_17
                         __anonstruct_Graph_4_ecnt_graph_0_17
                         __anonstruct_Graph_4_edges_graph_0_17
                         __anonstruct_Graph_4_vsize_graph_0_17
                         __anonstruct_Graph_4_vertices_graph_0_17
                         !__anonstruct_Edge_3_existent_0_edges_38
                         !__anonstruct_Edge_3_to_edges_38
                         !__anonstruct_Edge_3_from_edges_38
                         __anonstruct_Vertex_2_existent_vertices_39))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 190 13 21#
                         "expl:Requires clause"
                         (Int32.(<=) (#"graph_1_c.jc" 484 38 50#
                         "expl:Integer cast" (Int32.of_int (0))) pos_0))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 190 18 35#
                         "expl:Requires clause"
                         (Int32.(<) pos_0
                         (select __anonstruct_Graph_4_ecnt_graph_0_17
                         graph_0)))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 191 13 22#
                         "expl:Requires clause"
                         (Int32.(<=) (#"graph_1_c.jc" 486 40 52#
                         "expl:Integer cast" (Int32.of_int (0))) pos2_0))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 191 18 36#
                         "expl:Requires clause"
                         (Int32.(<) pos2_0
                         (select __anonstruct_Graph_4_ecnt_graph_0_17
                         graph_0)))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 192 13 24#
                         "expl:Requires clause"
                         (not (Int32.(=) pos_0 pos2_0)))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 193 13 40#
                         "expl:Requires clause"
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_38
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_0_17
                         graph_0) (Int32.to_int pos_0)))) (0)))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 194 13 41#
                         "expl:Requires clause"
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_38
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_0_17
                         graph_0) (Int32.to_int pos2_0)))) (0)))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 195 13 32#
                         "expl:Requires clause"
                         (is_vertex graph_0 (Int32.to_int f_0_0)
                         __anonstruct_Graph_4_vsize_graph_0_17))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 196 13 33#
                         "expl:Requires clause"
                         (is_vertex graph_0 (Int32.to_int f2_0)
                         __anonstruct_Graph_4_vsize_graph_0_17))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 197 13 32#
                         "expl:Requires clause"
                         (is_vertex graph_0 (Int32.to_int t_0_0)
                         __anonstruct_Graph_4_vsize_graph_0_17))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 198 13 33#
                         "expl:Requires clause"
                         (is_vertex graph_0 (Int32.to_int t2_0)
                         __anonstruct_Graph_4_vsize_graph_0_17))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 199 13 40#
                         "expl:Requires clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select __anonstruct_Vertex_2_existent_vertices_39
                         (shift
                         (select __anonstruct_Graph_4_vertices_graph_0_17
                         graph_0) (Int32.to_int f_0_0)))) (0))))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 200 13 40#
                         "expl:Requires clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select __anonstruct_Vertex_2_existent_vertices_39
                         (shift
                         (select __anonstruct_Graph_4_vertices_graph_0_17
                         graph_0) (Int32.to_int t_0_0)))) (0))))
                        /\
                        (#"graph_1_c.jc" 480 12 2212# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 201 13 41#
                         "expl:Requires clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select __anonstruct_Vertex_2_existent_vertices_39
                         (shift
                         (select __anonstruct_Graph_4_vertices_graph_0_17
                         graph_0) (Int32.to_int f2_0)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 202 13 41#
                        "expl:Requires clause"
                        (not
                        ((=)
                        (Int32.to_int
                        (select __anonstruct_Vertex_2_existent_vertices_39
                        (shift
                        (select __anonstruct_Graph_4_vertices_graph_0_17
                        graph_0) (Int32.to_int t2_0)))) (0)))))))))))))))))))))))))))))))))))))
                        }
                      reads { __anonstruct_Edge_3_existent_0_edges_38,
                      __anonstruct_Edge_3_from_edges_38,
                      __anonstruct_Edge_3_to_edges_38 } writes {
                      __anonstruct_Edge_3_existent_0_edges_38,
                      __anonstruct_Edge_3_from_edges_38,
                      __anonstruct_Edge_3_to_edges_38 }
                      ensures {
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                        "expl:Ensures clause"
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                         "expl:Ensures clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_38
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_0_17
                         graph_0) (Int32.to_int pos_0)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 204 12 39#
                         "expl:Ensures clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_38
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_0_17
                         graph_0) (Int32.to_int pos2_0)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 205 12 39#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_38
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_0_17
                         graph_0) (Int32.to_int pos_0))) f_0_0))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 206 12 41#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_38
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_0_17
                         graph_0) (Int32.to_int pos2_0))) f2_0))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 203 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_1.c" 207 12 37#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_to_edges_38
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_0_17
                         graph_0) (Int32.to_int pos_0))) t_0_0))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_1.c" 208 12 39#
                        "expl:Ensures clause"
                        (Int32.(=)
                        (select !__anonstruct_Edge_3_to_edges_38
                        (shift
                        (select __anonstruct_Graph_4_edges_graph_0_17
                        graph_0) (Int32.to_int pos2_0))) t2_0))))))))))))) }
  
end
