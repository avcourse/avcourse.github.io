
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag struct___anonstruct_Graph_4_xP = {
  __anonstruct_Graph_4[..] struct___anonstruct_Graph_4_xM: 64;
}

type struct___anonstruct_Graph_4_xP = [struct___anonstruct_Graph_4_xP]

tag __anonstruct_Vertex_2 = {
  padding padding_1: 32; 
  int32 existent: 32;
}

type __anonstruct_Vertex_2 = [__anonstruct_Vertex_2]

tag __anonstruct_Edge_3 = {
  int32 from: 32; 
  int32 to: 32; 
  int32 existent_0: 32;
}

type __anonstruct_Edge_3 = [__anonstruct_Edge_3]

tag __anonstruct_Graph_4 = {
  __anonstruct_Vertex_2[..] vertices: 64; 
  int32 vsize: 32; 
  padding padding_2: 32; 
  __anonstruct_Edge_3[..] edges: 64; 
  int32 ecnt: 32; 
  int32 esize: 32;
}

type __anonstruct_Graph_4 = [__anonstruct_Graph_4]

predicate is_vertex{L}(__anonstruct_Graph_4[..] g, integer v) =
\at(((0 <= v) && (v < (g.vsize :> integer))),L)

predicate edge_valid{L}(__anonstruct_Graph_4[..] g_0, integer k_1) =
\at(((! ((g_0.edges + k_1).existent_0 == 0)) ==>
      (((is_vertex{L}(g_0, ((g_0.edges + k_1).from :> integer)) &&
          is_vertex{L}(g_0, ((g_0.edges + k_1).to :> integer))) &&
         (! ((g_0.vertices + ((g_0.edges + k_1).from :> integer)).existent ==
              0))) &&
        (! ((g_0.vertices + ((g_0.edges + k_1).to :> integer)).existent == 0)))),L)

predicate edges_valid{L}(__anonstruct_Graph_4[..] g_1, integer n_1) =
\at((\forall integer k_2;
      (((0 <= k_2) && (k_2 < n_1)) ==> edge_valid{L}(g_1, k_2))),L)

predicate valid{L}(__anonstruct_Graph_4[..] g_2) =
\at(((((((((g_2.vsize > (0 :> int32)) && (g_2.esize > (0 :> int32))) &&
           (g_2.esize >= g_2.ecnt)) &&
          (g_2.ecnt >= (0 :> int32))) &&
         \at((if (\at(0,L) <= \at(((g_2.vsize :> integer) - 1),L)) then 
             (((\offset_min(\at(g_2.vertices,L)) <= \at(0,L)) &&
                (\offset_max(\at(g_2.vertices,L)) >=
                  \at(((g_2.vsize :> integer) - 1),L))) &&
               (\forall integer __framac_tmp2;
                 (((\at(0,L) <= __framac_tmp2) &&
                    (__framac_tmp2 <= \at(((g_2.vsize :> integer) - 1),L))) ==>
                   true))) else true),L)) &&
        \at((if (\at(0,L) <= \at(((g_2.esize :> integer) - 1),L)) then 
            (((\offset_min(\at(g_2.edges,L)) <= \at(0,L)) &&
               (\offset_max(\at(g_2.edges,L)) >=
                 \at(((g_2.esize :> integer) - 1),L))) &&
              (\forall integer __framac_tmp1;
                (((\at(0,L) <= __framac_tmp1) &&
                   (__framac_tmp1 <= \at(((g_2.esize :> integer) - 1),L))) ==>
                  true))) else true),L)) &&
       edges_valid{L}(g_2, (g_2.ecnt :> integer))) &&
      (\forall integer k_3;
        ((((g_2.ecnt :> integer) <= k_3) && (k_3 < (g_2.esize :> integer))) ==>
          ((g_2.edges + k_3).existent_0 == 0)))),L)

predicate edge_saved{L1, L2}(__anonstruct_Graph_4[..] g_3, integer k_4) =
((\at((g_3.edges + k_4).from,L1) == \at((g_3.edges + k_4).from,L2)) &&
  ((\at((g_3.edges + k_4).to,L1) == \at((g_3.edges + k_4).to,L2)) &&
    (\at((g_3.edges + k_4).existent_0,L1) ==
      \at((g_3.edges + k_4).existent_0,L2))))

predicate edges_saved{L1, L2}(__anonstruct_Graph_4[..] g_4, integer m,
                              integer n_2) =
(\forall integer k_5;
  (((m <= k_5) && (k_5 < n_2)) ==> edge_saved{L1, L2}(g_4, k_5)))

predicate full{L}(__anonstruct_Graph_4[..] g_5) =
\at(range_existent(g_5, 0, (g_5.esize :> integer)),L)

predicate range_existent{L}(__anonstruct_Graph_4[..] g_6, integer m_0,
                            integer n_3) =
\at((\forall integer k_6;
      (((m_0 <= k_6) && (k_6 < n_3)) ==>
        (! ((g_6.edges + k_6).existent_0 == 0)))),L)

axiomatic EdgesCount {

  logic integer count{L}(__anonstruct_Graph_4[..] g_7, integer f, integer t,
                         integer m_1, integer n_4)
   
  logic integer all_count{L}(__anonstruct_Graph_4[..] g_8, integer f_0,
                             integer t_0) =
  \at(count{L}(g_8, f_0, t_0, 0, (g_8.esize :> integer)),L)
   
  predicate count_saved{L1, L2}(__anonstruct_Graph_4[..] g_9, integer f_1,
                                integer t_1, integer m_2, integer n_5) =
  (count{L1}(g_9, f_1, t_1, m_2, n_5) == count{L2}(g_9, f_1, t_1, m_2, n_5))
   
  axiom count_zero{L} :
  (_C_1 : (\forall __anonstruct_Graph_4[..] g_10;
            (\forall integer f_2;
              (\forall integer t_2;
                (\forall integer m_3;
                  (\forall integer n_6;
                    ((m_3 >= n_6) ==>
                      (count{L}(g_10, f_2, t_2, m_3, n_6) == 0))))))))
   
  axiom count_one{L} :
  (_C_2 : (\forall __anonstruct_Graph_4[..] g_11;
            (\forall integer f_3;
              (\forall integer t_3;
                (\forall integer m_4;
                  (count{L}(g_11, f_3, t_3, m_4, (m_4 + 1)) ==
                    (if (((((g_11.edges + m_4).existent_0 :> integer) != 0) &&
                           (((g_11.edges + m_4).from :> integer) == f_3)) &&
                          (((g_11.edges + m_4).to :> integer) == t_3)) then 1 else 0)))))))
   
  axiom count_split{L} :
  (_C_3 : (\forall __anonstruct_Graph_4[..] g_12;
            (\forall integer f_4;
              (\forall integer t_4;
                (\forall integer m_5;
                  (\forall integer n_7;
                    (\forall integer k_7;
                      (((m_5 <= n_7) && (n_7 <= k_7)) ==>
                        (count{L}(g_12, f_4, t_4, m_5, k_7) ==
                          (count{L}(g_12, f_4, t_4, m_5, n_7) +
                            count{L}(g_12, f_4, t_4, n_7, k_7)))))))))))
   
  axiom count_saved_ax{L1, L2} :
  (_C_4 : (\forall __anonstruct_Graph_4[..] g_13;
            (\forall integer f_5;
              (\forall integer t_5;
                (\forall integer m_6;
                  (\forall integer n_8;
                    (edges_saved{L1,
                      L2}(g_13, m_6, n_8) ==>
                      count_saved{L1,
                      L2}(g_13, f_5, t_5, m_6, n_8))))))))
  
}

unit insert_edge(__anonstruct_Graph_4[..] graph_1, int32 pos_1, int32 f_1,
                 int32 t_1)
  requires ((_C_24 : \at((((\offset_min(\at(graph_1,Here)) <= \at(0,Here)) &&
                            (\offset_max(\at(graph_1,Here)) >= \at(0,Here))) &&
                           true),Here)) &&
             ((_C_25 : valid{Here}(graph_1)) &&
               ((_C_26 : ((_C_27 : ((0 :> int32) <= pos_1)) &&
                           (_C_28 : (pos_1 < graph_1.ecnt)))) &&
                 ((_C_29 : ((graph_1.edges + (pos_1 :> integer)).existent_0 ==
                             0)) &&
                   ((_C_30 : is_vertex{Here}(graph_1, (f_1 :> integer))) &&
                     ((_C_31 : is_vertex{Here}(graph_1, (t_1 :> integer))) &&
                       ((_C_32 : (! ((graph_1.vertices + (f_1 :> integer)).existent ==
                                      0))) &&
                         (_C_33 : (! ((graph_1.vertices + (t_1 :> integer)).existent ==
                                       0))))))))));
behavior default:
  ensures (_C_17 : ((_C_18 : valid{Here}(\at(graph_1,Old))) &&
                     ((_C_20 : (! ((\at(graph_1,Old).edges +
                                     (\at(pos_1,Old) :> integer)).existent_0 ==
                                    0))) &&
                       ((_C_22 : ((\at(graph_1,Old).edges +
                                    (\at(pos_1,Old) :> integer)).from ==
                                   \at(f_1,Old))) &&
                         (_C_23 : ((\at(graph_1,Old).edges +
                                     (\at(pos_1,Old) :> integer)).to ==
                                    \at(t_1,Old)))))));
{  
   {  (_C_8 : ((_C_7 : (_C_6 : ((_C_5 : graph_1.edges) + pos_1)).existent_0) = (1 :> int32)));
      (_C_12 : ((_C_11 : (_C_10 : ((_C_9 : graph_1.edges) + pos_1)).from) = f_1));
      (_C_16 : ((_C_15 : (_C_14 : ((_C_13 : graph_1.edges) + pos_1)).to) = t_1));
      
      (return ())
   }
}

unit insert_double_edge(__anonstruct_Graph_4[..] graph, int32 pos,
                        int32 pos2, int32 f, int32 t, int32 f2, int32 t2)
  requires ((_C_50 : \at((((\offset_min(\at(graph,Here)) <= \at(0,Here)) &&
                            (\offset_max(\at(graph,Here)) >= \at(0,Here))) &&
                           true),Here)) &&
             ((_C_51 : valid{Here}(graph)) &&
               ((_C_52 : ((_C_53 : ((0 :> int32) <= pos)) &&
                           (_C_54 : (pos < graph.ecnt)))) &&
                 ((_C_55 : ((_C_56 : ((0 :> int32) <= pos2)) &&
                             (_C_57 : (pos2 < graph.ecnt)))) &&
                   ((_C_58 : (! (pos == pos2))) &&
                     ((_C_59 : ((graph.edges + (pos :> integer)).existent_0 ==
                                 0)) &&
                       ((_C_60 : ((graph.edges + (pos2 :> integer)).existent_0 ==
                                   0)) &&
                         ((_C_61 : is_vertex{Here}(graph, (f :> integer))) &&
                           ((_C_62 : is_vertex{Here}(graph, (f2 :> integer))) &&
                             ((_C_63 : is_vertex{Here}(graph, (t :> integer))) &&
                               ((_C_64 : is_vertex{Here}(graph,
                                                         (t2 :> integer))) &&
                                 ((_C_65 : (! ((graph.vertices +
                                                 (f :> integer)).existent ==
                                                0))) &&
                                   ((_C_66 : (! ((graph.vertices +
                                                   (t :> integer)).existent ==
                                                  0))) &&
                                     ((_C_67 : (! ((graph.vertices +
                                                     (f2 :> integer)).existent ==
                                                    0))) &&
                                       (_C_68 : (! ((graph.vertices +
                                                      (t2 :> integer)).existent ==
                                                     0)))))))))))))))));
behavior default:
  ensures (_C_39 : ((_C_40 : (! ((\at(graph,Old).edges +
                                   (\at(pos,Old) :> integer)).existent_0 ==
                                  0))) &&
                     ((_C_42 : (! ((\at(graph,Old).edges +
                                     (\at(pos2,Old) :> integer)).existent_0 ==
                                    0))) &&
                       ((_C_44 : ((\at(graph,Old).edges +
                                    (\at(pos,Old) :> integer)).from ==
                                   \at(f,Old))) &&
                         ((_C_46 : ((\at(graph,Old).edges +
                                      (\at(pos2,Old) :> integer)).from ==
                                     \at(f2,Old))) &&
                           ((_C_48 : ((\at(graph,Old).edges +
                                        (\at(pos,Old) :> integer)).to ==
                                       \at(t,Old))) &&
                             (_C_49 : ((\at(graph,Old).edges +
                                         (\at(pos2,Old) :> integer)).to ==
                                        \at(t2,Old)))))))));
{  
   {  (_C_34 : insert_edge(graph, pos, f, t));
      
      {  
         (assert for default: (_C_35 : (astraver : \at((((\offset_min(
                                                           \at(graph,Here)) <=
                                                           \at(0,Here)) &&
                                                          (\offset_max(
                                                            \at(graph,Here)) >=
                                                            \at(0,Here))) &&
                                                         true),Here))));
         ()
      };
      
      {  
         (assert for default: (_C_36 : (astraver : (! ((graph.vertices +
                                                         (f2 :> integer)).existent ==
                                                        0)))));
         ()
      };
      
      {  
         (assert for default: (_C_37 : (astraver : ((graph.edges +
                                                      (pos2 :> integer)).existent_0 ==
                                                     0))));
         ()
      };
      (_C_38 : insert_edge(graph, pos2, f2, t2));
      
      (return ())
   }
}

unit insert_edge_to_graphs(struct___anonstruct_Graph_4_xP[..] graphs,
                           int32 n_1, int32 pos_3, int32 f_3, int32 t_3)
  requires ((_C_88 : (n_1 >= (0 :> int32))) &&
             ((_C_89 : \at((if (\at(0,Here) <=
                                 \at(((n_1 :> integer) - 1),Here)) then 
                           (((\offset_min(\at(graphs,Here)) <= \at(0,Here)) &&
                              (\offset_max(\at(graphs,Here)) >=
                                \at(((n_1 :> integer) - 1),Here))) &&
                             (\forall integer __framac_tmp7;
                               (((\at(0,Here) <= __framac_tmp7) &&
                                  (__framac_tmp7 <=
                                    \at(((n_1 :> integer) - 1),Here))) ==>
                                 true))) else true),Here)) &&
               (_C_90 : (\forall integer k_11;
                          (((0 <= k_11) && (k_11 < (n_1 :> integer))) ==>
                            ((((((((((\at((((\offset_min(\at((graphs + k_11).struct___anonstruct_Graph_4_xM,Here)) <=
                                              \at(0,Here)) &&
                                             (\offset_max(\at((graphs + k_11).struct___anonstruct_Graph_4_xM,Here)) >=
                                               \at(0,Here))) &&
                                            true),Here) &&
                                       valid{Here}((graphs + k_11).struct___anonstruct_Graph_4_xM)) &&
                                      ((0 :> int32) <= pos_3)) &&
                                     (pos_3 <
                                       (graphs + k_11).struct___anonstruct_Graph_4_xM.ecnt)) &&
                                    (((graphs + k_11).struct___anonstruct_Graph_4_xM.edges +
                                       (pos_3 :> integer)).existent_0 ==
                                      0)) &&
                                   is_vertex{Here}((graphs + k_11).struct___anonstruct_Graph_4_xM,
                                                   (f_3 :> integer))) &&
                                  is_vertex{Here}((graphs + k_11).struct___anonstruct_Graph_4_xM,
                                                  (t_3 :> integer))) &&
                                 (! (((graphs + k_11).struct___anonstruct_Graph_4_xM.vertices +
                                       (f_3 :> integer)).existent ==
                                      0))) &&
                                (! (((graphs + k_11).struct___anonstruct_Graph_4_xM.vertices +
                                      (t_3 :> integer)).existent ==
                                     0))) &&
                               (\forall integer k2_1;
                                 (((0 <= k2_1) && (k2_1 < (n_1 :> integer))) ==>
                                   (! (\base_block((graphs + k_11).struct___anonstruct_Graph_4_xM.vertices) ==
                                        \base_block((graphs + k2_1).struct___anonstruct_Graph_4_xM.vertices)))))) &&
                              (\forall integer k2_2;
                                (((0 <= k2_2) && (k2_2 < (n_1 :> integer))) ==>
                                  (! (\base_block((graphs + k_11).struct___anonstruct_Graph_4_xM.edges) ==
                                       \base_block((graphs + k2_2).struct___anonstruct_Graph_4_xM.edges)))))))))));
behavior default:
  ensures (_C_87 : (\forall integer k_12;
                     (((0 <= k_12) && (k_12 < (\at(n_1,Old) :> integer))) ==>
                       (((! (((\at(graphs,Old) + k_12).struct___anonstruct_Graph_4_xM.edges +
                               (\at(pos_3,Old) :> integer)).existent_0 ==
                              0)) &&
                          (((\at(graphs,Old) + k_12).struct___anonstruct_Graph_4_xM.edges +
                             (\at(pos_3,Old) :> integer)).from ==
                            \at(f_3,Old))) &&
                         (((\at(graphs,Old) + k_12).struct___anonstruct_Graph_4_xM.edges +
                            (\at(pos_3,Old) :> integer)).to ==
                           \at(t_3,Old))))));
{  
   (var int32 i);
   
   {  (_C_69 : (i = (0 :> int32)));
      (LoopEntry : 
      loop 
      behavior default:
        invariant (_C_76 : (\forall integer k_8;
                             (((0 <= k_8) && (k_8 < (n_1 :> integer))) ==>
                               (\forall integer k2;
                                 (((0 <= k2) && (k2 < (n_1 :> integer))) ==>
                                   (! (\base_block((graphs + k_8).struct___anonstruct_Graph_4_xM.vertices) ==
                                        \base_block((graphs + k2).struct___anonstruct_Graph_4_xM.vertices))))))));
      behavior default:
        invariant (_C_75 : (\forall integer k_9;
                             (((0 <= k_9) && (k_9 < (n_1 :> integer))) ==>
                               (\forall integer k2_0;
                                 (((0 <= k2_0) && (k2_0 < (n_1 :> integer))) ==>
                                   (! (\base_block((graphs + k_9).struct___anonstruct_Graph_4_xM.edges) ==
                                        \base_block((graphs + k2_0).struct___anonstruct_Graph_4_xM.edges))))))));
      behavior default:
        invariant (_C_74 : (\forall integer k_10;
                             (((0 <= k_10) && (k_10 < (i :> integer))) ==>
                               (((! (((graphs + k_10).struct___anonstruct_Graph_4_xM.edges +
                                       (pos_3 :> integer)).existent_0 ==
                                      0)) &&
                                  (((graphs + k_10).struct___anonstruct_Graph_4_xM.edges +
                                     (pos_3 :> integer)).from ==
                                    f_3)) &&
                                 (((graphs + k_10).struct___anonstruct_Graph_4_xM.edges +
                                    (pos_3 :> integer)).to ==
                                   t_3)))));
      behavior default:
        invariant (_C_71 : ((_C_72 : ((0 :> int32) <= i)) &&
                             (_C_73 : (i <= n_1))));
      variant (_C_70 : ((n_1 :> integer) - (i :> integer)));
      while (true)
      {  
         {  (LoopCurrent : (if (_C_77 : (i < n_1)) then () else 
                           (goto while_0_break)));
            
            {  (_C_80 : insert_edge((_C_79 : (_C_78 : (graphs + i)).struct___anonstruct_Graph_4_xM),
                                    pos_3, f_3, t_3));
               
               {  
                  (assert for default: (_C_81 : (astraver : (((n_1 >=
                                                                (2 :> int32)) &&
                                                               (i ==
                                                                 (0 :> int32))) ==>
                                                              \at((((\offset_min(
                                                                    \at(
                                                                    (graphs +
                                                                    1).struct___anonstruct_Graph_4_xM,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(
                                                                    (graphs +
                                                                    1).struct___anonstruct_Graph_4_xM,Here)) >=
                                                                    \at(0,Here))) &&
                                                                    true),Here)))));
                  ()
               };
               
               {  
                  (assert for default: (_C_82 : (astraver : (((n_1 >=
                                                                (2 :> int32)) &&
                                                               (i ==
                                                                 (0 :> int32))) ==>
                                                              (! (((graphs +
                                                                    1).struct___anonstruct_Graph_4_xM.vertices +
                                                                    (f_3 :> integer)).existent ==
                                                                   0))))));
                  ()
               };
               
               {  
                  (assert for default: (_C_83 : (astraver : (((n_1 >=
                                                                (2 :> int32)) &&
                                                               (i ==
                                                                 (0 :> int32))) ==>
                                                              (((graphs + 1).struct___anonstruct_Graph_4_xM.edges +
                                                                 (pos_3 :> integer)).existent_0 ==
                                                                0)))));
                  ()
               }
            };
            (_C_86 : (i = (_C_85 : ((_C_84 : (i + (1 :> int32))) :> int32))))
         }
      });
      (while_0_break : ());
      
      (return ())
   }
}

unit insert_edge_fixed(__anonstruct_Graph_4[..] graph_2, int32 pos_2,
                       int32 f_2, int32 t_2)
  requires ((_C_110 : \at((((\offset_min(\at(graph_2,Here)) <= \at(0,Here)) &&
                             (\offset_max(\at(graph_2,Here)) >= \at(0,Here))) &&
                            true),Here)) &&
             ((_C_111 : valid{Here}(graph_2)) &&
               ((_C_112 : ((_C_113 : ((0 :> int32) <= pos_2)) &&
                            (_C_114 : (pos_2 < graph_2.ecnt)))) &&
                 ((_C_115 : ((graph_2.edges + (pos_2 :> integer)).existent_0 ==
                              0)) &&
                   ((_C_116 : is_vertex{Here}(graph_2, (f_2 :> integer))) &&
                     ((_C_117 : is_vertex{Here}(graph_2, (t_2 :> integer))) &&
                       ((_C_118 : (! ((graph_2.vertices + (f_2 :> integer)).existent ==
                                       0))) &&
                         (_C_119 : (! ((graph_2.vertices + (t_2 :> integer)).existent ==
                                        0))))))))));
behavior default:
  assigns (graph_2.edges + (pos_2 :> integer)).from,
  (graph_2.edges + (pos_2 :> integer)).to,
  (graph_2.edges + (pos_2 :> integer)).existent_0;
  ensures (_C_103 : ((_C_104 : valid{Here}(\at(graph_2,Old))) &&
                      ((_C_106 : (! ((\at(graph_2,Old).edges +
                                       (\at(pos_2,Old) :> integer)).existent_0 ==
                                      0))) &&
                        ((_C_108 : ((\at(graph_2,Old).edges +
                                      (\at(pos_2,Old) :> integer)).from ==
                                     \at(f_2,Old))) &&
                          (_C_109 : ((\at(graph_2,Old).edges +
                                       (\at(pos_2,Old) :> integer)).to ==
                                      \at(t_2,Old)))))));
{  
   {  (_C_94 : ((_C_93 : (_C_92 : ((_C_91 : graph_2.edges) + pos_2)).existent_0) = (1 :> int32)));
      (_C_98 : ((_C_97 : (_C_96 : ((_C_95 : graph_2.edges) + pos_2)).from) = f_2));
      (_C_102 : ((_C_101 : (_C_100 : ((_C_99 : graph_2.edges) + pos_2)).to) = t_2));
      
      (return ())
   }
}

unit insert_double_edge_fixed(__anonstruct_Graph_4[..] graph_0, int32 pos_0,
                              int32 pos2_0, int32 f_0, int32 t_0, int32 f2_0,
                              int32 t2_0)
  requires ((_C_136 : \at((((\offset_min(\at(graph_0,Here)) <= \at(0,Here)) &&
                             (\offset_max(\at(graph_0,Here)) >= \at(0,Here))) &&
                            true),Here)) &&
             ((_C_137 : valid{Here}(graph_0)) &&
               ((_C_138 : ((_C_139 : ((0 :> int32) <= pos_0)) &&
                            (_C_140 : (pos_0 < graph_0.ecnt)))) &&
                 ((_C_141 : ((_C_142 : ((0 :> int32) <= pos2_0)) &&
                              (_C_143 : (pos2_0 < graph_0.ecnt)))) &&
                   ((_C_144 : (! (pos_0 == pos2_0))) &&
                     ((_C_145 : ((graph_0.edges + (pos_0 :> integer)).existent_0 ==
                                  0)) &&
                       ((_C_146 : ((graph_0.edges + (pos2_0 :> integer)).existent_0 ==
                                    0)) &&
                         ((_C_147 : is_vertex{Here}(graph_0, (f_0 :> integer))) &&
                           ((_C_148 : is_vertex{Here}(graph_0,
                                                      (f2_0 :> integer))) &&
                             ((_C_149 : is_vertex{Here}(graph_0,
                                                        (t_0 :> integer))) &&
                               ((_C_150 : is_vertex{Here}(graph_0,
                                                          (t2_0 :> integer))) &&
                                 ((_C_151 : (! ((graph_0.vertices +
                                                  (f_0 :> integer)).existent ==
                                                 0))) &&
                                   ((_C_152 : (! ((graph_0.vertices +
                                                    (t_0 :> integer)).existent ==
                                                   0))) &&
                                     ((_C_153 : (! ((graph_0.vertices +
                                                      (f2_0 :> integer)).existent ==
                                                     0))) &&
                                       (_C_154 : (! ((graph_0.vertices +
                                                       (t2_0 :> integer)).existent ==
                                                      0)))))))))))))))));
behavior default:
  ensures (_C_125 : ((_C_126 : (! ((\at(graph_0,Old).edges +
                                     (\at(pos_0,Old) :> integer)).existent_0 ==
                                    0))) &&
                      ((_C_128 : (! ((\at(graph_0,Old).edges +
                                       (\at(pos2_0,Old) :> integer)).existent_0 ==
                                      0))) &&
                        ((_C_130 : ((\at(graph_0,Old).edges +
                                      (\at(pos_0,Old) :> integer)).from ==
                                     \at(f_0,Old))) &&
                          ((_C_132 : ((\at(graph_0,Old).edges +
                                        (\at(pos2_0,Old) :> integer)).from ==
                                       \at(f2_0,Old))) &&
                            ((_C_134 : ((\at(graph_0,Old).edges +
                                          (\at(pos_0,Old) :> integer)).to ==
                                         \at(t_0,Old))) &&
                              (_C_135 : ((\at(graph_0,Old).edges +
                                           (\at(pos2_0,Old) :> integer)).to ==
                                          \at(t2_0,Old)))))))));
{  
   {  (_C_120 : insert_edge_fixed(graph_0, pos_0, f_0, t_0));
      
      {  
         (assert for default: (_C_121 : (astraver : \at((((\offset_min(
                                                            \at(graph_0,Here)) <=
                                                            \at(0,Here)) &&
                                                           (\offset_max(
                                                             \at(graph_0,Here)) >=
                                                             \at(0,Here))) &&
                                                          true),Here))));
         ()
      };
      
      {  
         (assert for default: (_C_122 : (astraver : (! ((graph_0.vertices +
                                                          (f2_0 :> integer)).existent ==
                                                         0)))));
         ()
      };
      
      {  
         (assert for default: (_C_123 : (astraver : ((graph_0.edges +
                                                       (pos2_0 :> integer)).existent_0 ==
                                                      0))));
         ()
      };
      (_C_124 : insert_edge_fixed(graph_0, pos2_0, f2_0, t2_0));
      
      (return ())
   }
}
