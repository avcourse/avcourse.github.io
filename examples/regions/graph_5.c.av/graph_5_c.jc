
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag __anonstruct_Vertex_2 = {
  padding padding_1: 32; 
  int32 existent: 32;
}

type __anonstruct_Vertex_2 = [__anonstruct_Vertex_2]

tag __anonstruct_Edge_3 = {
  int32 from: 32; 
  int32 to: 32; 
  int32 existent_0: 32;
}

type __anonstruct_Edge_3 = [__anonstruct_Edge_3]

tag __anonstruct_Graph_4 = {
  __anonstruct_Vertex_2[..] vertices: 64; 
  int32 vsize: 32; 
  padding padding_2: 32; 
  __anonstruct_Edge_3[..] edges: 64; 
  int32 ecnt: 32; 
  int32 esize: 32;
}

type __anonstruct_Graph_4 = [__anonstruct_Graph_4]

predicate is_vertex{L}(__anonstruct_Graph_4[..] g, integer v) =
\at(((0 <= v) && (v < (g.vsize :> integer))),L)

predicate edge_valid{L}(__anonstruct_Graph_4[..] g_0, integer k_1) =
\at(((! ((g_0.edges + k_1).existent_0 == 0)) ==>
      (((is_vertex{L}(g_0, ((g_0.edges + k_1).from :> integer)) &&
          is_vertex{L}(g_0, ((g_0.edges + k_1).to :> integer))) &&
         (! ((g_0.vertices + ((g_0.edges + k_1).from :> integer)).existent ==
              0))) &&
        (! ((g_0.vertices + ((g_0.edges + k_1).to :> integer)).existent == 0)))),L)

predicate edges_valid{L}(__anonstruct_Graph_4[..] g_1, integer n_1) =
\at((\forall integer k_2;
      (((0 <= k_2) && (k_2 < n_1)) ==> edge_valid{L}(g_1, k_2))),L)

predicate valid{L}(__anonstruct_Graph_4[..] g_2) =
\at(((((((((g_2.vsize > (0 :> int32)) && (g_2.esize > (0 :> int32))) &&
           (g_2.esize >= g_2.ecnt)) &&
          (g_2.ecnt >= (0 :> int32))) &&
         \at((if (\at(0,L) <= \at(((g_2.vsize :> integer) - 1),L)) then 
             (((\offset_min(\at(g_2.vertices,L)) <= \at(0,L)) &&
                (\offset_max(\at(g_2.vertices,L)) >=
                  \at(((g_2.vsize :> integer) - 1),L))) &&
               (\forall integer __framac_tmp2;
                 (((\at(0,L) <= __framac_tmp2) &&
                    (__framac_tmp2 <= \at(((g_2.vsize :> integer) - 1),L))) ==>
                   true))) else true),L)) &&
        \at((if (\at(0,L) <= \at(((g_2.esize :> integer) - 1),L)) then 
            (((\offset_min(\at(g_2.edges,L)) <= \at(0,L)) &&
               (\offset_max(\at(g_2.edges,L)) >=
                 \at(((g_2.esize :> integer) - 1),L))) &&
              (\forall integer __framac_tmp1;
                (((\at(0,L) <= __framac_tmp1) &&
                   (__framac_tmp1 <= \at(((g_2.esize :> integer) - 1),L))) ==>
                  true))) else true),L)) &&
       edges_valid{L}(g_2, (g_2.ecnt :> integer))) &&
      (\forall integer k_3;
        ((((g_2.ecnt :> integer) <= k_3) && (k_3 < (g_2.esize :> integer))) ==>
          ((g_2.edges + k_3).existent_0 == 0)))),L)

predicate edge_saved{L1, L2}(__anonstruct_Graph_4[..] g_3, integer k_4) =
((\at((g_3.edges + k_4).from,L1) == \at((g_3.edges + k_4).from,L2)) &&
  ((\at((g_3.edges + k_4).to,L1) == \at((g_3.edges + k_4).to,L2)) &&
    (\at((g_3.edges + k_4).existent_0,L1) ==
      \at((g_3.edges + k_4).existent_0,L2))))

predicate edges_saved{L1, L2}(__anonstruct_Graph_4[..] g_4, integer m,
                              integer n_2) =
(\forall integer k_5;
  (((m <= k_5) && (k_5 < n_2)) ==> edge_saved{L1, L2}(g_4, k_5)))

predicate full{L}(__anonstruct_Graph_4[..] g_5) =
\at(range_existent(g_5, 0, (g_5.esize :> integer)),L)

predicate range_existent{L}(__anonstruct_Graph_4[..] g_6, integer m_0,
                            integer n_3) =
\at((\forall integer k_6;
      (((m_0 <= k_6) && (k_6 < n_3)) ==>
        (! ((g_6.edges + k_6).existent_0 == 0)))),L)

axiomatic EdgesCount {

  logic integer count{L}(__anonstruct_Graph_4[..] g_7, integer f, integer t,
                         integer m_1, integer n_4)
   
  logic integer all_count{L}(__anonstruct_Graph_4[..] g_8, integer f_0,
                             integer t_0) =
  \at(count{L}(g_8, f_0, t_0, 0, (g_8.esize :> integer)),L)
   
  predicate count_saved{L1, L2}(__anonstruct_Graph_4[..] g_9, integer f_1,
                                integer t_1, integer m_2, integer n_5) =
  (count{L1}(g_9, f_1, t_1, m_2, n_5) == count{L2}(g_9, f_1, t_1, m_2, n_5))
   
  axiom count_zero{L} :
  (_C_1 : (\forall __anonstruct_Graph_4[..] g_10;
            (\forall integer f_2;
              (\forall integer t_2;
                (\forall integer m_3;
                  (\forall integer n_6;
                    ((m_3 >= n_6) ==>
                      (count{L}(g_10, f_2, t_2, m_3, n_6) == 0))))))))
   
  axiom count_one{L} :
  (_C_2 : (\forall __anonstruct_Graph_4[..] g_11;
            (\forall integer f_3;
              (\forall integer t_3;
                (\forall integer m_4;
                  (count{L}(g_11, f_3, t_3, m_4, (m_4 + 1)) ==
                    (if (((((g_11.edges + m_4).existent_0 :> integer) != 0) &&
                           (((g_11.edges + m_4).from :> integer) == f_3)) &&
                          (((g_11.edges + m_4).to :> integer) == t_3)) then 1 else 0)))))))
   
  axiom count_split{L} :
  (_C_3 : (\forall __anonstruct_Graph_4[..] g_12;
            (\forall integer f_4;
              (\forall integer t_4;
                (\forall integer m_5;
                  (\forall integer n_7;
                    (\forall integer k_7;
                      (((m_5 <= n_7) && (n_7 <= k_7)) ==>
                        (count{L}(g_12, f_4, t_4, m_5, k_7) ==
                          (count{L}(g_12, f_4, t_4, m_5, n_7) +
                            count{L}(g_12, f_4, t_4, n_7, k_7)))))))))))
   
  axiom count_saved_ax{L1, L2} :
  (_C_4 : (\forall __anonstruct_Graph_4[..] g_13;
            (\forall integer f_5;
              (\forall integer t_5;
                (\forall integer m_6;
                  (\forall integer n_8;
                    (edges_saved{L1,
                      L2}(g_13, m_6, n_8) ==>
                      count_saved{L1,
                      L2}(g_13, f_5, t_5, m_6, n_8))))))))
  
}

unit insert_edge(__anonstruct_Graph_4[..] graph, int32 pos, int32 f, int32 t)
  requires ((_C_26 : \at((((\offset_min(\at(graph,Here)) <= \at(0,Here)) &&
                            (\offset_max(\at(graph,Here)) >= \at(0,Here))) &&
                           true),Here)) &&
             ((_C_27 : valid{Here}(graph)) &&
               ((_C_28 : ((_C_29 : ((0 :> int32) <= pos)) &&
                           (_C_30 : (pos < graph.ecnt)))) &&
                 ((_C_31 : ((graph.edges + (pos :> integer)).existent_0 == 0)) &&
                   ((_C_32 : is_vertex{Here}(graph, (f :> integer))) &&
                     ((_C_33 : is_vertex{Here}(graph, (t :> integer))) &&
                       ((_C_34 : (! ((graph.vertices + (f :> integer)).existent ==
                                      0))) &&
                         (_C_35 : (! ((graph.vertices + (t :> integer)).existent ==
                                       0))))))))));
behavior default:
  assigns (graph.edges + (pos :> integer)).from,
  (graph.edges + (pos :> integer)).to,
  (graph.edges + (pos :> integer)).existent_0;
  allocates \nothing;
  ensures (_C_17 : ((_C_18 : valid{Here}(\at(graph,Old))) &&
                     ((_C_20 : (! ((\at(graph,Old).edges +
                                     (\at(pos,Old) :> integer)).existent_0 ==
                                    0))) &&
                       ((_C_22 : ((\at(graph,Old).edges +
                                    (\at(pos,Old) :> integer)).from ==
                                   \at(f,Old))) &&
                         ((_C_24 : ((\at(graph,Old).edges +
                                      (\at(pos,Old) :> integer)).to ==
                                     \at(t,Old))) &&
                           (_C_25 : (\forall integer p;
                                      (((0 <= p) &&
                                         (p <
                                           (\at(graph,Old).esize :> integer))) ==>
                                        ((! (p == (\at(pos,Old) :> integer))) ==>
                                          (((\at(graph,Old).edges + p).from ==
                                             \at((graph.edges + p).from,Old)) &&
                                            (((\at(graph,Old).edges + p).to ==
                                               \at((graph.edges + p).to,Old)) &&
                                              ((\at(graph,Old).edges + p).existent_0 ==
                                                \at((graph.edges + p).existent_0,Old)))))))))))));
{  
   {  (_C_8 : ((_C_7 : (_C_6 : ((_C_5 : graph.edges) + pos)).existent_0) = (1 :> int32)));
      (_C_12 : ((_C_11 : (_C_10 : ((_C_9 : graph.edges) + pos)).from) = f));
      (_C_16 : ((_C_15 : (_C_14 : ((_C_13 : graph.edges) + pos)).to) = t));
      
      (return ())
   }
}

unit insert_edge_to_graphs(__anonstruct_Graph_4[..] graphs, int32 n_1,
                           int32 pos_0, int32 f_0, int32 t_0)
  requires ((_C_50 : (n_1 >= (0 :> int32))) &&
             ((_C_51 : \at((if (\at(0,Here) <=
                                 \at(((n_1 :> integer) - 1),Here)) then 
                           (((\offset_min(\at(graphs,Here)) <= \at(0,Here)) &&
                              (\offset_max(\at(graphs,Here)) >=
                                \at(((n_1 :> integer) - 1),Here))) &&
                             (\forall integer __framac_tmp4;
                               (((\at(0,Here) <= __framac_tmp4) &&
                                  (__framac_tmp4 <=
                                    \at(((n_1 :> integer) - 1),Here))) ==>
                                 true))) else true),Here)) &&
               ((_C_52 : ((0 :> int32) <= pos_0)) &&
                 (_C_53 : (\forall integer k_9;
                            (((0 <= k_9) && (k_9 < (n_1 :> integer))) ==>
                              (((((((valid{Here}((graphs + k_9)) &&
                                      ((0 :> int32) <= pos_0)) &&
                                     (pos_0 < (graphs + k_9).ecnt)) &&
                                    (((graphs + k_9).edges +
                                       (pos_0 :> integer)).existent_0 ==
                                      0)) &&
                                   is_vertex{Here}((graphs + k_9),
                                                   (f_0 :> integer))) &&
                                  is_vertex{Here}((graphs + k_9),
                                                  (t_0 :> integer))) &&
                                 (! (((graphs + k_9).vertices +
                                       (f_0 :> integer)).existent ==
                                      0))) &&
                                (! (((graphs + k_9).vertices +
                                      (t_0 :> integer)).existent ==
                                     0)))))))));
behavior default:
  ensures true;
{  
   (var int32 i);
   
   {  (_C_36 : (i = (0 :> int32)));
      (LoopEntry : 
      loop 
      behavior default:
        invariant (_C_41 : (\forall integer k_8;
                             (((0 <= k_8) && (k_8 < (i :> integer))) ==>
                               (((! (((graphs + k_8).edges +
                                       (pos_0 :> integer)).existent_0 ==
                                      0)) &&
                                  (((graphs + k_8).edges +
                                     (pos_0 :> integer)).from ==
                                    f_0)) &&
                                 (((graphs + k_8).edges + (pos_0 :> integer)).to ==
                                   t_0)))));
      behavior default:
        invariant (_C_38 : ((_C_39 : ((0 :> int32) <= i)) &&
                             (_C_40 : (i <= n_1))));
      variant (_C_37 : ((n_1 :> integer) - (i :> integer)));
      while (true)
      {  
         {  (LoopCurrent : (if (_C_42 : (i < n_1)) then () else 
                           (goto while_0_break)));
            
            {  
               {  
                  (assert for default: (_C_43 : (astraver : valid{Here}(
                                                (graphs + (i :> integer))))));
                  ()
               };
               
               {  
                  (assert for default: (_C_44 : (astraver : (((graphs +
                                                                (i :> integer)).edges +
                                                               (pos_0 :> integer)).existent_0 ==
                                                              0))));
                  ()
               };
               (_C_46 : insert_edge((_C_45 : (graphs + i)), pos_0, f_0, t_0))
            };
            (_C_49 : (i = (_C_48 : ((_C_47 : (i + (1 :> int32))) :> int32))))
         }
      });
      (while_0_break : ());
      
      (return ())
   }
}
