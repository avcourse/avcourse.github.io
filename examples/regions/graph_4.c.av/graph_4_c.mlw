
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_unsafe

  use why3.Bool.Bool 
  
end

theory Root___anonstruct_Graph_4

  use why3.Bool.Bool 
  
  type __anonstruct_Graph_4 
  
end

theory Root___anonstruct_Edge_3

  use why3.Bool.Bool 
  
  type __anonstruct_Edge_3 
  
end

theory Logic_edge_saved

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate edge_saved (g_3 : (pointer __anonstruct_Graph_4)) (k_4 : int)
  (__anonstruct_Graph_4_edges_g_3_6_at_L2 : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_edges_g_3_6_at_L1 :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_21_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_21_at_L1 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_21_at_L2 :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_to_edges_21_at_L1 : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_from_edges_21_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_21_at_L1 :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((Int32.(=)
      (select __anonstruct_Edge_3_from_edges_21_at_L1
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L1 g_3) k_4))
      (select __anonstruct_Edge_3_from_edges_21_at_L2
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L2 g_3) k_4)))
     /\
     ((Int32.(=)
      (select __anonstruct_Edge_3_to_edges_21_at_L1
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L1 g_3) k_4))
      (select __anonstruct_Edge_3_to_edges_21_at_L2
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L2 g_3) k_4)))
     /\
     (Int32.(=)
     (select __anonstruct_Edge_3_existent_0_edges_21_at_L1
     (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L1 g_3) k_4))
     (select __anonstruct_Edge_3_existent_0_edges_21_at_L2
     (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L2 g_3) k_4)))))
  
  
end

theory Logic_edges_saved

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edge_saved 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edges_saved (g_4 : (pointer __anonstruct_Graph_4)) (m : int) (n_2
  : int) (__anonstruct_Graph_4_edges_g_4_7_at_L2 : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Graph_4_edges_g_4_7_at_L1 : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_52_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_52_at_L1 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_52_at_L2 :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_to_edges_52_at_L1 : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_from_edges_52_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_52_at_L1 :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     (forall k_5 : int.
      ((((<=) m k_5) /\ ((<) k_5 n_2)) ->
       (edge_saved g_4 k_5 __anonstruct_Graph_4_edges_g_4_7_at_L2
       __anonstruct_Graph_4_edges_g_4_7_at_L1
       __anonstruct_Edge_3_existent_0_edges_52_at_L2
       __anonstruct_Edge_3_existent_0_edges_52_at_L1
       __anonstruct_Edge_3_to_edges_52_at_L2
       __anonstruct_Edge_3_to_edges_52_at_L1
       __anonstruct_Edge_3_from_edges_52_at_L2
       __anonstruct_Edge_3_from_edges_52_at_L1)))
  
  
end

theory Axiomatic_EdgesCount

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edges_saved 
  
  use enum.Int32 
  
  use import int.Int 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  function count (pointer __anonstruct_Graph_4) int int int int (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)) (memory
  __anonstruct_Edge_3 Int32.t) (memory __anonstruct_Edge_3 Int32.t) (memory
  __anonstruct_Edge_3 Int32.t) : int
  
  
  axiom Count_zero #"/home/debian/mfsp/examples/regions/graph_4.c" 55 65 180#
  "expl:Axiom count_zero"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_25_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_25_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_25_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/debian/mfsp/examples/regions/graph_4.c" 57 26 112#
      (forall g_10 : (pointer __anonstruct_Graph_4).
       (forall f_2_0 : int.
        (forall t_2_0 : int.
         (forall m_3 : int.
          (forall n_6 : int.
           (((>=) m_3 n_6) ->
            ((=)
            (count g_10 f_2_0 t_2_0 m_3 n_6
            __anonstruct_Graph_4_edges_g_7_10_at_L
            __anonstruct_Edge_3_existent_0_edges_25_at_L
            __anonstruct_Edge_3_to_edges_25_at_L
            __anonstruct_Edge_3_from_edges_25_at_L) (0)))))))))))))
  
  axiom Count_one #"/home/debian/mfsp/examples/regions/graph_4.c" 58 38 219#
  "expl:Axiom count_one"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_25_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_25_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_25_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/debian/mfsp/examples/regions/graph_4.c" 60 25 178#
      (forall g_11 : (pointer __anonstruct_Graph_4).
       (forall f_3 : int.
        (forall t_3 : int.
         (forall m_4 : int.
          ((=)
          (count g_11 f_3 t_3 m_4 (Int.(+) m_4 (1))
          __anonstruct_Graph_4_edges_g_7_10_at_L
          __anonstruct_Edge_3_existent_0_edges_25_at_L
          __anonstruct_Edge_3_to_edges_25_at_L
          __anonstruct_Edge_3_from_edges_25_at_L)
          (if
           (Bool.andb
           (Bool.andb
           ((<>)
           (Int32.to_int
           (select __anonstruct_Edge_3_existent_0_edges_25_at_L
           (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4)))
           (0))
           ((=)
           (Int32.to_int
           (select __anonstruct_Edge_3_from_edges_25_at_L
           (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4)))
           f_3))
           ((=)
           (Int32.to_int
           (select __anonstruct_Edge_3_to_edges_25_at_L
           (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4)))
           t_3)) then (1) else (0))))))))))))
  
  axiom Count_split
  #"/home/debian/mfsp/examples/regions/graph_4.c" 61 119 285#
  "expl:Axiom count_split"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_25_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_25_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_25_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/debian/mfsp/examples/regions/graph_4.c" 63 27 163#
      (forall g_12 : (pointer __anonstruct_Graph_4).
       (forall f_4 : int.
        (forall t_4 : int.
         (forall m_5 : int.
          (forall n_7 : int.
           (forall k_7 : int.
            ((((<=) m_5 n_7) /\ ((<=) n_7 k_7)) ->
             ((=)
             (count g_12 f_4 t_4 m_5 k_7
             __anonstruct_Graph_4_edges_g_7_10_at_L
             __anonstruct_Edge_3_existent_0_edges_25_at_L
             __anonstruct_Edge_3_to_edges_25_at_L
             __anonstruct_Edge_3_from_edges_25_at_L)
             (Int.(+)
             (count g_12 f_4 t_4 m_5 n_7
             __anonstruct_Graph_4_edges_g_7_10_at_L
             __anonstruct_Edge_3_existent_0_edges_25_at_L
             __anonstruct_Edge_3_to_edges_25_at_L
             __anonstruct_Edge_3_from_edges_25_at_L)
             (count g_12 f_4 t_4 n_7 k_7
             __anonstruct_Graph_4_edges_g_7_10_at_L
             __anonstruct_Edge_3_existent_0_edges_25_at_L
             __anonstruct_Edge_3_to_edges_25_at_L
             __anonstruct_Edge_3_from_edges_25_at_L)))))))))))))))
  
  predicate count_saved (g_9 : (pointer __anonstruct_Graph_4)) (f_1 : int)
  (t_1 : int) (m_2 : int) (n_5 : int)
  (__anonstruct_Graph_4_edges_g_7_10_at_L2 : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_edges_g_7_10_at_L1 :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_25_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_25_at_L1 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_25_at_L2 :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_to_edges_25_at_L1 : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_from_edges_25_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_25_at_L1 :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((=)
     (count g_9 f_1 t_1 m_2 n_5 __anonstruct_Graph_4_edges_g_7_10_at_L1
     __anonstruct_Edge_3_existent_0_edges_25_at_L1
     __anonstruct_Edge_3_to_edges_25_at_L1
     __anonstruct_Edge_3_from_edges_25_at_L1)
     (count g_9 f_1 t_1 m_2 n_5 __anonstruct_Graph_4_edges_g_7_10_at_L2
     __anonstruct_Edge_3_existent_0_edges_25_at_L2
     __anonstruct_Edge_3_to_edges_25_at_L2
     __anonstruct_Edge_3_from_edges_25_at_L2))
  
  
  axiom Count_saved_ax
  #"/home/debian/mfsp/examples/regions/graph_4.c" 64 80 238#
  "expl:Axiom count_saved_ax"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L2 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Graph_4_edges_g_7_10_at_L1 : (memory
    __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
    (forall __anonstruct_Edge_3_existent_0_edges_25_at_L2 : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_existent_0_edges_25_at_L1 : (memory
      __anonstruct_Edge_3 Int32.t).
      (forall __anonstruct_Edge_3_to_edges_25_at_L2 : (memory
       __anonstruct_Edge_3 Int32.t).
       (forall __anonstruct_Edge_3_to_edges_25_at_L1 : (memory
        __anonstruct_Edge_3 Int32.t).
        (forall __anonstruct_Edge_3_from_edges_25_at_L2 : (memory
         __anonstruct_Edge_3 Int32.t).
         (forall __anonstruct_Edge_3_from_edges_25_at_L1 : (memory
          __anonstruct_Edge_3 Int32.t).
          (#"/home/debian/mfsp/examples/regions/graph_4.c" 66 38 155#
          (forall g_13 : (pointer __anonstruct_Graph_4).
           (forall f_5 : int.
            (forall t_5 : int.
             (forall m_6 : int.
              (forall n_8 : int.
               ((edges_saved g_13 m_6 n_8
                __anonstruct_Graph_4_edges_g_7_10_at_L2
                __anonstruct_Graph_4_edges_g_7_10_at_L1
                __anonstruct_Edge_3_existent_0_edges_25_at_L2
                __anonstruct_Edge_3_existent_0_edges_25_at_L1
                __anonstruct_Edge_3_to_edges_25_at_L2
                __anonstruct_Edge_3_to_edges_25_at_L1
                __anonstruct_Edge_3_from_edges_25_at_L2
                __anonstruct_Edge_3_from_edges_25_at_L1) ->
                (count_saved g_13 f_5 t_5 m_6 n_8
                __anonstruct_Graph_4_edges_g_7_10_at_L2
                __anonstruct_Graph_4_edges_g_7_10_at_L1
                __anonstruct_Edge_3_existent_0_edges_25_at_L2
                __anonstruct_Edge_3_existent_0_edges_25_at_L1
                __anonstruct_Edge_3_to_edges_25_at_L2
                __anonstruct_Edge_3_to_edges_25_at_L1
                __anonstruct_Edge_3_from_edges_25_at_L2
                __anonstruct_Edge_3_from_edges_25_at_L1))))))))))))))))
  
  function all_count (g_8 : (pointer __anonstruct_Graph_4)) (f_0 : int) (t_0
  : int) (__anonstruct_Graph_4_esize_g_8_11_at_L : (memory
  __anonstruct_Graph_4 Int32.t)) (__anonstruct_Graph_4_edges_g_8_11_at_L :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_80_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_80_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_80_at_L :
  (memory __anonstruct_Edge_3 Int32.t)) : int
  =
     (count g_8 f_0 t_0 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_8_11_at_L g_8))
     __anonstruct_Graph_4_edges_g_8_11_at_L
     __anonstruct_Edge_3_existent_0_edges_80_at_L
     __anonstruct_Edge_3_to_edges_80_at_L
     __anonstruct_Edge_3_from_edges_80_at_L)
  
  
end

theory Root___anonstruct_Vertex_2

  use why3.Bool.Bool 
  
  type __anonstruct_Vertex_2 
  
end

theory Logic_is_vertex

  use import Root___anonstruct_Graph_4 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate is_vertex (g : (pointer __anonstruct_Graph_4)) (v : int)
  (__anonstruct_Graph_4_vsize_g_2_at_L : (memory __anonstruct_Graph_4
  Int32.t))
  =
     (((<=) (0) v) /\
     ((<) v (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_at_L g))))
  
  
end

theory Logic_edge_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edge_valid (g_0 : (pointer __anonstruct_Graph_4)) (k_1 : int)
  (__anonstruct_Graph_4_edges_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_0_3_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_17_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_17_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_17_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_18_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((not
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_existent_0_edges_17_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))) (0)))
      ->
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_17_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_to_edges_17_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((not
       ((=)
       (Int32.to_int
       (select __anonstruct_Vertex_2_existent_vertices_18_at_L
       (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_17_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
       (0)))
      /\
      (not
      ((=)
      (Int32.to_int
      (select __anonstruct_Vertex_2_existent_vertices_18_at_L
      (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
      (Int32.to_int
      (select __anonstruct_Edge_3_to_edges_17_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
      (0)))))))
  
  
end

theory Logic_edges_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edge_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edges_valid (g_1 : (pointer __anonstruct_Graph_4)) (n_1 : int)
  (__anonstruct_Graph_4_edges_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_1_4_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_40_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_40_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_40_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_41_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     (forall k_2 : int.
      ((((<=) (0) k_2) /\ ((<) k_2 n_1)) ->
       (edge_valid g_1 k_2 __anonstruct_Graph_4_edges_g_1_4_at_L
       __anonstruct_Graph_4_vsize_g_1_4_at_L
       __anonstruct_Graph_4_vertices_g_1_4_at_L
       __anonstruct_Edge_3_existent_0_edges_40_at_L
       __anonstruct_Edge_3_to_edges_40_at_L
       __anonstruct_Edge_3_from_edges_40_at_L
       __anonstruct_Vertex_2_existent_vertices_41_at_L)))
  
  
end

theory Logic_valid_0

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edges_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  predicate valid_0 (g_2 : (pointer __anonstruct_Graph_4))
  (__anonstruct_Vertex_2_vertices_19_alloc_table_at_L : (alloc_table
  __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_20_alloc_table_at_L :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Graph_4_esize_g_2_5_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_ecnt_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_edges_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Graph_4_vsize_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_vertices_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_20_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_20_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_20_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_19_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((Int32.(>) (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)
      (#"graph_4_c.jc" 59 24 36# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (#"graph_4_c.jc" 59 54 66# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)
      (#"graph_4_c.jc" 61 23 35# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Vertex_2_vertices_19_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Vertex_2_vertices_19_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp2 : int.
        ((((<=) (0) __framac_tmp2) /\
         ((<=) __framac_tmp2
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Edge_3_edges_20_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Edge_3_edges_20_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp1 : int.
        ((((<=) (0) __framac_tmp1) /\
         ((<=) __framac_tmp1
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((edges_valid g_2
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
      __anonstruct_Graph_4_edges_g_2_5_at_L
      __anonstruct_Graph_4_vsize_g_2_5_at_L
      __anonstruct_Graph_4_vertices_g_2_5_at_L
      __anonstruct_Edge_3_existent_0_edges_20_at_L
      __anonstruct_Edge_3_to_edges_20_at_L
      __anonstruct_Edge_3_from_edges_20_at_L
      __anonstruct_Vertex_2_existent_vertices_19_at_L)
     /\
     (forall k_3 : int.
      ((((<=)
        (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)) k_3)
       /\
       ((<) k_3
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)))) ->
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_20_at_L
       (shift (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2) k_3))) (0)))))))))))
  
  
end

module Function_insert_edge_safety
#"/home/debian/mfsp/examples/regions/graph_4.c" 87 5 53#
"expl:insert_edge, safety"

  use import core.Upd_offset_safe 
  
  use import core.Tag_table_type 
  
  use import core.Shift_safe 
  
  use Safe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use why3.Bool.Bool 
  
  let insert_edge #"/home/debian/mfsp/examples/regions/graph_4.c" 87 5 53#
  "expl:Function insert_edge, safety" =
  fun
   (graph_0 : (pointer __anonstruct_Graph_4)) (pos_0 : Int32.t) (f_0_0 :
   Int32.t) (t_0_0 : Int32.t) (__anonstruct_Edge_3_from_edges_28 : ref
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_28 :
   ref (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_28 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_edges_28_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph_0_13_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_29_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_28_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_29 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph_0_13
   : (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_graph_0_13 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph_0_13 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_graph_0_13 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph_0_13 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 72 13 26#
    (#"graph_4_c.jc" 162 12 916#
    ((#"graph_4_c.jc" 162 12 916#
     ((<=) (offset_min __anonstruct_Graph_4_graph_0_13_alloc_table graph_0)
     (0)))
    /\
    (#"graph_4_c.jc" 162 12 916#
    ((#"graph_4_c.jc" 162 12 916#
     ((>=) (offset_max __anonstruct_Graph_4_graph_0_13_alloc_table graph_0)
     (0)))
    /\ (#"graph_4_c.jc" 162 12 916# ((=) true true)))))))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 73 13 25#
    (valid_0 graph_0 __anonstruct_Vertex_2_vertices_29_alloc_table
    __anonstruct_Edge_3_edges_28_alloc_table
    __anonstruct_Graph_4_esize_graph_0_13
    __anonstruct_Graph_4_ecnt_graph_0_13
    __anonstruct_Graph_4_edges_graph_0_13
    __anonstruct_Graph_4_vsize_graph_0_13
    __anonstruct_Graph_4_vertices_graph_0_13
    !__anonstruct_Edge_3_existent_0_edges_28 !__anonstruct_Edge_3_to_edges_28
    !__anonstruct_Edge_3_from_edges_28
    __anonstruct_Vertex_2_existent_vertices_29))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 74 13 21#
    (Int32.(<=) (#"graph_4_c.jc" 166 36 48# "expl:Integer cast" (Int32.of_int
    (0))) pos_0))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 74 18 35#
    (Int32.(<) pos_0 (select __anonstruct_Graph_4_ecnt_graph_0_13 graph_0)))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 75 13 40#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_28
    (shift (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
    (Int32.to_int pos_0)))) (0)))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 76 13 32#
    (is_vertex graph_0 (Int32.to_int f_0_0)
    __anonstruct_Graph_4_vsize_graph_0_13))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 77 13 32#
    (is_vertex graph_0 (Int32.to_int t_0_0)
    __anonstruct_Graph_4_vsize_graph_0_13))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 78 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_29
    (shift (select __anonstruct_Graph_4_vertices_graph_0_13 graph_0)
    (Int32.to_int f_0_0)))) (0))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_4.c" 79 13 40#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_29
   (shift (select __anonstruct_Graph_4_vertices_graph_0_13 graph_0)
   (Int32.to_int t_0_0)))) (0)))))))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (let _jessie_17 =
    (let _jessie_16 =
    (#"graph_4_c.jc" 191 79 91# "expl:Integer cast" (Safe_int32.of_int (1)))
    in
    begin
    (assert {
    (#"/home/debian/mfsp/examples/regions/graph_4.c" 89 4 34#
    "expl:Pointer index bounds" true) }); _jessie_16 end) in
    (let _jessie_18 =
    (#"/home/debian/mfsp/examples/regions/graph_4.c" 89 4 16#
    "expl:Pointer dereference"
    (acc  __anonstruct_Graph_4_graph_0_13_alloc_table
     __anonstruct_Graph_4_edges_graph_0_13 graph_0 )) in
    (let _jessie_19 = (Safe_int32.to_int  pos_0 ) in
    (let _jessie_20 = (shift_typesafe  _jessie_18 _jessie_19 ) in
    (#"/home/debian/mfsp/examples/regions/graph_4.c" 89 4 34#
    "expl:Pointer dereference"
    (upd_offset_typesafe  __anonstruct_Edge_3_edges_28_alloc_table
     __anonstruct_Edge_3_existent_0_edges_28 _jessie_18 _jessie_19 _jessie_17
     ))))));
     begin
     (let _jessie_22 =
     (let _jessie_21 = f_0_0 in
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 90 4 30#
     "expl:Pointer index bounds" true) }); _jessie_21 end) in
     (let _jessie_23 =
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 90 4 16#
     "expl:Pointer dereference"
     (acc  __anonstruct_Graph_4_graph_0_13_alloc_table
      __anonstruct_Graph_4_edges_graph_0_13 graph_0 )) in
     (let _jessie_24 = (Safe_int32.to_int  pos_0 ) in
     (let _jessie_25 = (shift_typesafe  _jessie_23 _jessie_24 ) in
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 90 4 30#
     "expl:Pointer dereference"
     (upd_offset_typesafe  __anonstruct_Edge_3_edges_28_alloc_table
      __anonstruct_Edge_3_from_edges_28 _jessie_23 _jessie_24 _jessie_22 ))))));
      begin
      (let _jessie_27 =
      (let _jessie_26 = t_0_0 in
      begin
      (assert {
      (#"/home/debian/mfsp/examples/regions/graph_4.c" 91 4 28#
      "expl:Pointer index bounds" true) }); _jessie_26 end) in
      (let _jessie_28 =
      (#"/home/debian/mfsp/examples/regions/graph_4.c" 91 4 16#
      "expl:Pointer dereference"
      (acc  __anonstruct_Graph_4_graph_0_13_alloc_table
       __anonstruct_Graph_4_edges_graph_0_13 graph_0 )) in
      (let _jessie_29 = (Safe_int32.to_int  pos_0 ) in
      (let _jessie_30 = (shift_typesafe  _jessie_28 _jessie_29 ) in
      (#"/home/debian/mfsp/examples/regions/graph_4.c" 91 4 28#
      "expl:Pointer dereference"
      (upd_offset_typesafe  __anonstruct_Edge_3_edges_28_alloc_table
       __anonstruct_Edge_3_to_edges_28 _jessie_28 _jessie_29 _jessie_27 ))))));
       (raise Return) end end; (raise Return) end with Return -> () end
  
end

module Function_insert_edge_behaviors
#"/home/debian/mfsp/examples/regions/graph_4.c" 87 5 53#
"expl:insert_edge, behaviors"

  use import core.Upd_unsafe 
  
  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import core.Shift_unsafe 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let insert_edge_ensures_default
  #"/home/debian/mfsp/examples/regions/graph_4.c" 87 5 53#
  "expl:Function insert_edge, default behavior" =
  fun
   (graph_0 : (pointer __anonstruct_Graph_4)) (pos_0 : Int32.t) (f_0_0 :
   Int32.t) (t_0_0 : Int32.t) (__anonstruct_Edge_3_from_edges_28 : ref
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_28 :
   ref (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_28 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_edges_28_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph_0_13_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_29_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_28_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_29 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph_0_13
   : (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_graph_0_13 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph_0_13 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_graph_0_13 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph_0_13 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 72 13 26#
    (#"graph_4_c.jc" 162 12 916#
    ((#"graph_4_c.jc" 162 12 916#
     ((<=) (offset_min __anonstruct_Graph_4_graph_0_13_alloc_table graph_0)
     (0)))
    /\
    (#"graph_4_c.jc" 162 12 916#
    ((#"graph_4_c.jc" 162 12 916#
     ((>=) (offset_max __anonstruct_Graph_4_graph_0_13_alloc_table graph_0)
     (0)))
    /\ (#"graph_4_c.jc" 162 12 916# ((=) true true)))))))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 73 13 25#
    (valid_0 graph_0 __anonstruct_Vertex_2_vertices_29_alloc_table
    __anonstruct_Edge_3_edges_28_alloc_table
    __anonstruct_Graph_4_esize_graph_0_13
    __anonstruct_Graph_4_ecnt_graph_0_13
    __anonstruct_Graph_4_edges_graph_0_13
    __anonstruct_Graph_4_vsize_graph_0_13
    __anonstruct_Graph_4_vertices_graph_0_13
    !__anonstruct_Edge_3_existent_0_edges_28 !__anonstruct_Edge_3_to_edges_28
    !__anonstruct_Edge_3_from_edges_28
    __anonstruct_Vertex_2_existent_vertices_29))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 74 13 21#
    (Int32.(<=) (#"graph_4_c.jc" 166 36 48# "expl:Integer cast" (Int32.of_int
    (0))) pos_0))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 74 18 35#
    (Int32.(<) pos_0 (select __anonstruct_Graph_4_ecnt_graph_0_13 graph_0)))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 75 13 40#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_28
    (shift (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
    (Int32.to_int pos_0)))) (0)))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 76 13 32#
    (is_vertex graph_0 (Int32.to_int f_0_0)
    __anonstruct_Graph_4_vsize_graph_0_13))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 77 13 32#
    (is_vertex graph_0 (Int32.to_int t_0_0)
    __anonstruct_Graph_4_vsize_graph_0_13))
   /\
   (#"graph_4_c.jc" 162 12 916#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 78 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_29
    (shift (select __anonstruct_Graph_4_vertices_graph_0_13 graph_0)
    (Int32.to_int f_0_0)))) (0))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_4.c" 79 13 40#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_29
   (shift (select __anonstruct_Graph_4_vertices_graph_0_13 graph_0)
   (Int32.to_int t_0_0)))) (0)))))))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     ((((#"graph_4_c.jc" 177 10 145# "expl:Assigns clause"
        (not_assigns __anonstruct_Edge_3_edges_28_alloc_table
        __anonstruct_Edge_3_edges_28_alloc_table (old
        !__anonstruct_Edge_3_from_edges_28)
        !__anonstruct_Edge_3_from_edges_28
        (pset_singleton
        (shift (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
        (Int32.to_int pos_0)))))
       /\
       (#"graph_4_c.jc" 177 10 145# "expl:Assigns clause"
       (not_assigns __anonstruct_Edge_3_edges_28_alloc_table
       __anonstruct_Edge_3_edges_28_alloc_table (old
       !__anonstruct_Edge_3_to_edges_28) !__anonstruct_Edge_3_to_edges_28
       (pset_singleton
       (shift (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
       (Int32.to_int pos_0))))))
      /\
      (#"graph_4_c.jc" 177 10 145# "expl:Assigns clause"
      (not_assigns __anonstruct_Edge_3_edges_28_alloc_table
      __anonstruct_Edge_3_edges_28_alloc_table (old
      !__anonstruct_Edge_3_existent_0_edges_28)
      !__anonstruct_Edge_3_existent_0_edges_28
      (pset_singleton
      (shift (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
      (Int32.to_int pos_0))))))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
     "expl:Ensures clause"
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
      "expl:Ensures clause"
      (valid_0 graph_0 __anonstruct_Vertex_2_vertices_29_alloc_table
      __anonstruct_Edge_3_edges_28_alloc_table
      __anonstruct_Graph_4_esize_graph_0_13
      __anonstruct_Graph_4_ecnt_graph_0_13
      __anonstruct_Graph_4_edges_graph_0_13
      __anonstruct_Graph_4_vsize_graph_0_13
      __anonstruct_Graph_4_vertices_graph_0_13
      !__anonstruct_Edge_3_existent_0_edges_28
      !__anonstruct_Edge_3_to_edges_28 !__anonstruct_Edge_3_from_edges_28
      __anonstruct_Vertex_2_existent_vertices_29))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 83 12 38#
      "expl:Ensures clause"
      (not
      ((=)
      (Int32.to_int
      (select !__anonstruct_Edge_3_existent_0_edges_28
      (shift (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
      (Int32.to_int pos_0)))) (0))))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 84 12 39#
      "expl:Ensures clause"
      (Int32.(=)
      (select !__anonstruct_Edge_3_from_edges_28
      (shift (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
      (Int32.to_int pos_0))) f_0_0))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 85 12 37#
     "expl:Ensures clause"
     (Int32.(=)
     (select !__anonstruct_Edge_3_to_edges_28
     (shift (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
     (Int32.to_int pos_0))) t_0_0))))))))))) }  ->
   'Init:
   try
    begin
    (let _jessie_2 =
    (#"graph_4_c.jc" 191 79 91# "expl:Integer cast"
    (Unsafe_int32.of_int (1))) in
    (let _jessie_3 = (acc  __anonstruct_Graph_4_edges_graph_0_13 graph_0 ) in
    (let _jessie_4 = (Unsafe_int32.to_int  pos_0 ) in
    (let _jessie_5 = (shift_  _jessie_3 _jessie_4 ) in
    (upd  __anonstruct_Edge_3_existent_0_edges_28 _jessie_5 _jessie_2 )))));
     begin
     (let _jessie_7 = f_0_0 in
     (let _jessie_8 = (acc  __anonstruct_Graph_4_edges_graph_0_13 graph_0 )
     in
     (let _jessie_9 = (Unsafe_int32.to_int  pos_0 ) in
     (let _jessie_10 = (shift_  _jessie_8 _jessie_9 ) in
     (upd  __anonstruct_Edge_3_from_edges_28 _jessie_10 _jessie_7 )))));
      begin
      (let _jessie_12 = t_0_0 in
      (let _jessie_13 = (acc  __anonstruct_Graph_4_edges_graph_0_13 graph_0 )
      in
      (let _jessie_14 = (Unsafe_int32.to_int  pos_0 ) in
      (let _jessie_15 = (shift_  _jessie_13 _jessie_14 ) in
      (upd  __anonstruct_Edge_3_to_edges_28 _jessie_15 _jessie_12 )))));
       (raise Return) end end; (raise Return) end with Return -> () end
  
end

module Function_insert_edge_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_edge
  (graph_0 : (pointer __anonstruct_Graph_4)) 
   (pos_0 : Int32.t) 
    (f_0_0 : Int32.t) 
     (t_0_0 : Int32.t) 
      (__anonstruct_Edge_3_existent_0_edges_28 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Edge_3_to_edges_28 : ref (memory __anonstruct_Edge_3
        Int32.t)) 
        (__anonstruct_Edge_3_from_edges_28 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Vertex_2_vertices_29_alloc_table : (alloc_table
          __anonstruct_Vertex_2)) 
          (__anonstruct_Graph_4_graph_0_13_alloc_table : (alloc_table
           __anonstruct_Graph_4)) 
           (__anonstruct_Edge_3_edges_28_alloc_table : (alloc_table
            __anonstruct_Edge_3)) 
            (__anonstruct_Edge_3_edges_28_tag_table : (tag_table
             __anonstruct_Edge_3)) 
             (__anonstruct_Graph_4_esize_graph_0_13 : (memory
              __anonstruct_Graph_4 Int32.t)) 
              (__anonstruct_Graph_4_ecnt_graph_0_13 : (memory
               __anonstruct_Graph_4 Int32.t)) 
               (__anonstruct_Graph_4_edges_graph_0_13 : (memory
                __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                (__anonstruct_Graph_4_vsize_graph_0_13 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_vertices_graph_0_13 : (memory
                  __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                  (__anonstruct_Vertex_2_existent_vertices_29 : (memory
                   __anonstruct_Vertex_2 Int32.t)) : unit
                   requires {
                     ("expl:Internal"
                     (#"graph_4_c.jc" 162 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 72 13 26#
                      "expl:Requires clause"
                      (#"graph_4_c.jc" 162 12 916# "expl:Requires clause"
                      ((#"graph_4_c.jc" 162 12 916# "expl:Requires clause"
                       ((<=)
                       (offset_min
                       __anonstruct_Graph_4_graph_0_13_alloc_table graph_0)
                       (0)))
                      /\
                      (#"graph_4_c.jc" 162 12 916# "expl:Requires clause"
                      ((#"graph_4_c.jc" 162 12 916# "expl:Requires clause"
                       ((>=)
                       (offset_max
                       __anonstruct_Graph_4_graph_0_13_alloc_table graph_0)
                       (0)))
                      /\
                      (#"graph_4_c.jc" 162 12 916# "expl:Requires clause"
                      ((=) true true)))))))
                     /\
                     (#"graph_4_c.jc" 162 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 73 13 25#
                      "expl:Requires clause"
                      (valid_0 graph_0
                      __anonstruct_Vertex_2_vertices_29_alloc_table
                      __anonstruct_Edge_3_edges_28_alloc_table
                      __anonstruct_Graph_4_esize_graph_0_13
                      __anonstruct_Graph_4_ecnt_graph_0_13
                      __anonstruct_Graph_4_edges_graph_0_13
                      __anonstruct_Graph_4_vsize_graph_0_13
                      __anonstruct_Graph_4_vertices_graph_0_13
                      !__anonstruct_Edge_3_existent_0_edges_28
                      !__anonstruct_Edge_3_to_edges_28
                      !__anonstruct_Edge_3_from_edges_28
                      __anonstruct_Vertex_2_existent_vertices_29))
                     /\
                     (#"graph_4_c.jc" 162 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 74 13 21#
                      "expl:Requires clause"
                      (Int32.(<=) (#"graph_4_c.jc" 166 36 48#
                      "expl:Integer cast" (Int32.of_int (0))) pos_0))
                     /\
                     (#"graph_4_c.jc" 162 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 74 18 35#
                      "expl:Requires clause"
                      (Int32.(<) pos_0
                      (select __anonstruct_Graph_4_ecnt_graph_0_13 graph_0)))
                     /\
                     (#"graph_4_c.jc" 162 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 75 13 40#
                      "expl:Requires clause"
                      ((=)
                      (Int32.to_int
                      (select !__anonstruct_Edge_3_existent_0_edges_28
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
                      (Int32.to_int pos_0)))) (0)))
                     /\
                     (#"graph_4_c.jc" 162 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 76 13 32#
                      "expl:Requires clause"
                      (is_vertex graph_0 (Int32.to_int f_0_0)
                      __anonstruct_Graph_4_vsize_graph_0_13))
                     /\
                     (#"graph_4_c.jc" 162 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 77 13 32#
                      "expl:Requires clause"
                      (is_vertex graph_0 (Int32.to_int t_0_0)
                      __anonstruct_Graph_4_vsize_graph_0_13))
                     /\
                     (#"graph_4_c.jc" 162 12 916# "expl:Requires clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 78 13 40#
                      "expl:Requires clause"
                      (not
                      ((=)
                      (Int32.to_int
                      (select __anonstruct_Vertex_2_existent_vertices_29
                      (shift
                      (select __anonstruct_Graph_4_vertices_graph_0_13
                      graph_0) (Int32.to_int f_0_0)))) (0))))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_4.c" 79 13 40#
                     "expl:Requires clause"
                     (not
                     ((=)
                     (Int32.to_int
                     (select __anonstruct_Vertex_2_existent_vertices_29
                     (shift
                     (select __anonstruct_Graph_4_vertices_graph_0_13
                     graph_0) (Int32.to_int t_0_0)))) (0)))))))))))))))))))))
                     }
                   reads { __anonstruct_Edge_3_existent_0_edges_28,
                   __anonstruct_Edge_3_from_edges_28,
                   __anonstruct_Edge_3_to_edges_28 } writes {
                   __anonstruct_Edge_3_existent_0_edges_28,
                   __anonstruct_Edge_3_from_edges_28,
                   __anonstruct_Edge_3_to_edges_28 }
                   ensures {
                     ((((#"graph_4_c.jc" 177 10 145# "expl:Assigns clause"
                        (not_assigns __anonstruct_Edge_3_edges_28_alloc_table
                        __anonstruct_Edge_3_edges_28_alloc_table (old
                        !__anonstruct_Edge_3_from_edges_28)
                        !__anonstruct_Edge_3_from_edges_28
                        (pset_singleton
                        (shift
                        (select __anonstruct_Graph_4_edges_graph_0_13
                        graph_0) (Int32.to_int pos_0)))))
                       /\
                       (#"graph_4_c.jc" 177 10 145# "expl:Assigns clause"
                       (not_assigns __anonstruct_Edge_3_edges_28_alloc_table
                       __anonstruct_Edge_3_edges_28_alloc_table (old
                       !__anonstruct_Edge_3_to_edges_28)
                       !__anonstruct_Edge_3_to_edges_28
                       (pset_singleton
                       (shift
                       (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
                       (Int32.to_int pos_0))))))
                      /\
                      (#"graph_4_c.jc" 177 10 145# "expl:Assigns clause"
                      (not_assigns __anonstruct_Edge_3_edges_28_alloc_table
                      __anonstruct_Edge_3_edges_28_alloc_table (old
                      !__anonstruct_Edge_3_existent_0_edges_28)
                      !__anonstruct_Edge_3_existent_0_edges_28
                      (pset_singleton
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
                      (Int32.to_int pos_0))))))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
                     "expl:Ensures clause"
                     (#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
                      "expl:Ensures clause"
                      (valid_0 graph_0
                      __anonstruct_Vertex_2_vertices_29_alloc_table
                      __anonstruct_Edge_3_edges_28_alloc_table
                      __anonstruct_Graph_4_esize_graph_0_13
                      __anonstruct_Graph_4_ecnt_graph_0_13
                      __anonstruct_Graph_4_edges_graph_0_13
                      __anonstruct_Graph_4_vsize_graph_0_13
                      __anonstruct_Graph_4_vertices_graph_0_13
                      !__anonstruct_Edge_3_existent_0_edges_28
                      !__anonstruct_Edge_3_to_edges_28
                      !__anonstruct_Edge_3_from_edges_28
                      __anonstruct_Vertex_2_existent_vertices_29))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 83 12 38#
                      "expl:Ensures clause"
                      (not
                      ((=)
                      (Int32.to_int
                      (select !__anonstruct_Edge_3_existent_0_edges_28
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
                      (Int32.to_int pos_0)))) (0))))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 84 12 39#
                      "expl:Ensures clause"
                      (Int32.(=)
                      (select !__anonstruct_Edge_3_from_edges_28
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
                      (Int32.to_int pos_0))) f_0_0))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_4.c" 85 12 37#
                     "expl:Ensures clause"
                     (Int32.(=)
                     (select !__anonstruct_Edge_3_to_edges_28
                     (shift
                     (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
                     (Int32.to_int pos_0))) t_0_0)))))))))) }
  
end

module Function_insert_double_edge_safety
#"/home/debian/mfsp/examples/regions/graph_4.c" 117 5 86#
"expl:insert_double_edge, safety"

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_insert_edge_safe 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  let insert_double_edge
  #"/home/debian/mfsp/examples/regions/graph_4.c" 117 5 86#
  "expl:Function insert_double_edge, safety" =
  fun
   (graph : (pointer __anonstruct_Graph_4)) (pos : Int32.t) (pos2 : Int32.t)
   (f_2 : Int32.t) (t_2 : Int32.t) (f2 : Int32.t) (t2 : Int32.t)
   (__anonstruct_Edge_3_from_edges_30 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_30 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_existent_0_edges_30 :
   ref (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_edges_30_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph_14_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_30_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_31 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph_14 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_graph_14 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph_14 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_graph_14 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph_14 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 95 13 26#
    (#"graph_4_c.jc" 201 12 2006#
    ((#"graph_4_c.jc" 201 12 2006#
     ((<=) (offset_min __anonstruct_Graph_4_graph_14_alloc_table graph) (0)))
    /\
    (#"graph_4_c.jc" 201 12 2006#
    ((#"graph_4_c.jc" 201 12 2006#
     ((>=) (offset_max __anonstruct_Graph_4_graph_14_alloc_table graph) (0)))
    /\ (#"graph_4_c.jc" 201 12 2006# ((=) true true)))))))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 96 13 25#
    (valid_0 graph __anonstruct_Vertex_2_vertices_31_alloc_table
    __anonstruct_Edge_3_edges_30_alloc_table
    __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
    __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
    __anonstruct_Graph_4_vertices_graph_14
    !__anonstruct_Edge_3_existent_0_edges_30 !__anonstruct_Edge_3_to_edges_30
    !__anonstruct_Edge_3_from_edges_30
    __anonstruct_Vertex_2_existent_vertices_31))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 97 13 21#
    (Int32.(<=) (#"graph_4_c.jc" 205 36 48# "expl:Integer cast" (Int32.of_int
    (0))) pos))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 97 18 35#
    (Int32.(<) pos (select __anonstruct_Graph_4_ecnt_graph_14 graph)))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 98 13 22#
    (Int32.(<=) (#"graph_4_c.jc" 207 38 50# "expl:Integer cast" (Int32.of_int
    (0))) pos2))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 98 18 36#
    (Int32.(<) pos2 (select __anonstruct_Graph_4_ecnt_graph_14 graph)))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 99 13 24#
    (not (Int32.(=) pos pos2)))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 100 13 40#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_30
    (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
    (Int32.to_int pos)))) (0)))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 101 13 41#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_30
    (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
    (Int32.to_int pos2)))) (0)))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 102 13 32#
    (is_vertex graph (Int32.to_int f_2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 103 13 33#
    (is_vertex graph (Int32.to_int f2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 104 13 32#
    (is_vertex graph (Int32.to_int t_2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 105 13 33#
    (is_vertex graph (Int32.to_int t2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 106 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
    (Int32.to_int f_2)))) (0))))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 107 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
    (Int32.to_int t_2)))) (0))))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 108 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
    (Int32.to_int f2)))) (0))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_4.c" 109 13 41#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_31
   (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
   (Int32.to_int t2)))) (0)))))))))))))))))))))))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (let _jessie_42 = graph in
    (let _jessie_41 = pos in
    (let _jessie_40 = f_2 in
    (let _jessie_39 = t_2 in
    (#"/home/debian/mfsp/examples/regions/graph_4.c" 119 4 33#
    "expl:Precondition for insert_edge"
    (Function_insert_edge_safe.insert_edge  _jessie_42 _jessie_41 _jessie_40
     _jessie_39 __anonstruct_Edge_3_existent_0_edges_30
     __anonstruct_Edge_3_to_edges_30 __anonstruct_Edge_3_from_edges_30
     __anonstruct_Vertex_2_vertices_31_alloc_table
     __anonstruct_Graph_4_graph_14_alloc_table
     __anonstruct_Edge_3_edges_30_alloc_table
     __anonstruct_Edge_3_edges_30_tag_table
     __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
     __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
     __anonstruct_Graph_4_vertices_graph_14
     __anonstruct_Vertex_2_existent_vertices_31 ))))));
     begin
     any unit
     requires { true } reads { graph }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 120 15 28#
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 120 15 28#
       ((#"/home/debian/mfsp/examples/regions/graph_4.c" 120 15 28#
        ((<=) (offset_min __anonstruct_Graph_4_graph_14_alloc_table graph)
        (0)))
       /\
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 120 15 28#
       ((#"/home/debian/mfsp/examples/regions/graph_4.c" 120 15 28#
        ((>=) (offset_max __anonstruct_Graph_4_graph_14_alloc_table graph)
        (0)))
       /\
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 120 15 28#
       ((=) true true))))))) } ; () end;
     begin
     any unit
     requires { true } reads { f2, graph }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 121 17 45#
       (not
       ((=)
       (Int32.to_int
       (select __anonstruct_Vertex_2_existent_vertices_31
       (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
       (Int32.to_int f2)))) (0)))) } ; () end;
     begin
     any unit
     requires { true } reads { __anonstruct_Edge_3_existent_0_edges_30,
     graph, pos2 }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 122 17 45#
       ((=)
       (Int32.to_int
       (select !__anonstruct_Edge_3_existent_0_edges_30
       (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
       (Int32.to_int pos2)))) (0))) } ; () end;
     begin
     (let _jessie_46 = graph in
     (let _jessie_45 = pos2 in
     (let _jessie_44 = f2 in
     (let _jessie_43 = t2 in
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 123 6 38#
     "expl:Precondition for insert_edge"
     (Function_insert_edge_safe.insert_edge  _jessie_46 _jessie_45 _jessie_44
      _jessie_43 __anonstruct_Edge_3_existent_0_edges_30
      __anonstruct_Edge_3_to_edges_30 __anonstruct_Edge_3_from_edges_30
      __anonstruct_Vertex_2_vertices_31_alloc_table
      __anonstruct_Graph_4_graph_14_alloc_table
      __anonstruct_Edge_3_edges_30_alloc_table
      __anonstruct_Edge_3_edges_30_tag_table
      __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
      __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
      __anonstruct_Graph_4_vertices_graph_14
      __anonstruct_Vertex_2_existent_vertices_31 )))))); (raise Return) end;
     (raise Return) end with Return -> () end
  
end

module Function_insert_edge

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_edge
  (graph_0 : (pointer __anonstruct_Graph_4)) 
   (pos_0 : Int32.t) 
    (f_0_0 : Int32.t) 
     (t_0_0 : Int32.t) 
      (__anonstruct_Edge_3_existent_0_edges_28 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Edge_3_to_edges_28 : ref (memory __anonstruct_Edge_3
        Int32.t)) 
        (__anonstruct_Edge_3_from_edges_28 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Vertex_2_vertices_29_alloc_table : (alloc_table
          __anonstruct_Vertex_2)) 
          (__anonstruct_Graph_4_graph_0_13_alloc_table : (alloc_table
           __anonstruct_Graph_4)) 
           (__anonstruct_Edge_3_edges_28_alloc_table : (alloc_table
            __anonstruct_Edge_3)) 
            (__anonstruct_Edge_3_edges_28_tag_table : (tag_table
             __anonstruct_Edge_3)) 
             (__anonstruct_Graph_4_esize_graph_0_13 : (memory
              __anonstruct_Graph_4 Int32.t)) 
              (__anonstruct_Graph_4_ecnt_graph_0_13 : (memory
               __anonstruct_Graph_4 Int32.t)) 
               (__anonstruct_Graph_4_edges_graph_0_13 : (memory
                __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                (__anonstruct_Graph_4_vsize_graph_0_13 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_vertices_graph_0_13 : (memory
                  __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                  (__anonstruct_Vertex_2_existent_vertices_29 : (memory
                   __anonstruct_Vertex_2 Int32.t)) : unit
                   requires { true } reads {
                   __anonstruct_Edge_3_existent_0_edges_28,
                   __anonstruct_Edge_3_from_edges_28,
                   __anonstruct_Edge_3_to_edges_28 } writes {
                   __anonstruct_Edge_3_existent_0_edges_28,
                   __anonstruct_Edge_3_from_edges_28,
                   __anonstruct_Edge_3_to_edges_28 }
                   ensures {
                     ((((#"graph_4_c.jc" 177 10 145# "expl:Assigns clause"
                        (not_assigns __anonstruct_Edge_3_edges_28_alloc_table
                        __anonstruct_Edge_3_edges_28_alloc_table (old
                        !__anonstruct_Edge_3_from_edges_28)
                        !__anonstruct_Edge_3_from_edges_28
                        (pset_singleton
                        (shift
                        (select __anonstruct_Graph_4_edges_graph_0_13
                        graph_0) (Int32.to_int pos_0)))))
                       /\
                       (#"graph_4_c.jc" 177 10 145# "expl:Assigns clause"
                       (not_assigns __anonstruct_Edge_3_edges_28_alloc_table
                       __anonstruct_Edge_3_edges_28_alloc_table (old
                       !__anonstruct_Edge_3_to_edges_28)
                       !__anonstruct_Edge_3_to_edges_28
                       (pset_singleton
                       (shift
                       (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
                       (Int32.to_int pos_0))))))
                      /\
                      (#"graph_4_c.jc" 177 10 145# "expl:Assigns clause"
                      (not_assigns __anonstruct_Edge_3_edges_28_alloc_table
                      __anonstruct_Edge_3_edges_28_alloc_table (old
                      !__anonstruct_Edge_3_existent_0_edges_28)
                      !__anonstruct_Edge_3_existent_0_edges_28
                      (pset_singleton
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
                      (Int32.to_int pos_0))))))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
                     "expl:Ensures clause"
                     (#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
                      "expl:Ensures clause"
                      (valid_0 graph_0
                      __anonstruct_Vertex_2_vertices_29_alloc_table
                      __anonstruct_Edge_3_edges_28_alloc_table
                      __anonstruct_Graph_4_esize_graph_0_13
                      __anonstruct_Graph_4_ecnt_graph_0_13
                      __anonstruct_Graph_4_edges_graph_0_13
                      __anonstruct_Graph_4_vsize_graph_0_13
                      __anonstruct_Graph_4_vertices_graph_0_13
                      !__anonstruct_Edge_3_existent_0_edges_28
                      !__anonstruct_Edge_3_to_edges_28
                      !__anonstruct_Edge_3_from_edges_28
                      __anonstruct_Vertex_2_existent_vertices_29))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 83 12 38#
                      "expl:Ensures clause"
                      (not
                      ((=)
                      (Int32.to_int
                      (select !__anonstruct_Edge_3_existent_0_edges_28
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
                      (Int32.to_int pos_0)))) (0))))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_4.c" 82 12 24#
                     "expl:Ensures clause"
                     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 84 12 39#
                      "expl:Ensures clause"
                      (Int32.(=)
                      (select !__anonstruct_Edge_3_from_edges_28
                      (shift
                      (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
                      (Int32.to_int pos_0))) f_0_0))
                     /\
                     (#"/home/debian/mfsp/examples/regions/graph_4.c" 85 12 37#
                     "expl:Ensures clause"
                     (Int32.(=)
                     (select !__anonstruct_Edge_3_to_edges_28
                     (shift
                     (select __anonstruct_Graph_4_edges_graph_0_13 graph_0)
                     (Int32.to_int pos_0))) t_0_0)))))))))) }
  
end

module Function_insert_double_edge_behaviors
#"/home/debian/mfsp/examples/regions/graph_4.c" 117 5 86#
"expl:insert_double_edge, behaviors"

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_insert_edge 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  let insert_double_edge_ensures_default
  #"/home/debian/mfsp/examples/regions/graph_4.c" 117 5 86#
  "expl:Function insert_double_edge, default behavior" =
  fun
   (graph : (pointer __anonstruct_Graph_4)) (pos : Int32.t) (pos2 : Int32.t)
   (f_2 : Int32.t) (t_2 : Int32.t) (f2 : Int32.t) (t2 : Int32.t)
   (__anonstruct_Edge_3_from_edges_30 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_30 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_existent_0_edges_30 :
   ref (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_edges_30_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph_14_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_30_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_31 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph_14 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_graph_14 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph_14 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_graph_14 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph_14 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 95 13 26#
    (#"graph_4_c.jc" 201 12 2006#
    ((#"graph_4_c.jc" 201 12 2006#
     ((<=) (offset_min __anonstruct_Graph_4_graph_14_alloc_table graph) (0)))
    /\
    (#"graph_4_c.jc" 201 12 2006#
    ((#"graph_4_c.jc" 201 12 2006#
     ((>=) (offset_max __anonstruct_Graph_4_graph_14_alloc_table graph) (0)))
    /\ (#"graph_4_c.jc" 201 12 2006# ((=) true true)))))))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 96 13 25#
    (valid_0 graph __anonstruct_Vertex_2_vertices_31_alloc_table
    __anonstruct_Edge_3_edges_30_alloc_table
    __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
    __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
    __anonstruct_Graph_4_vertices_graph_14
    !__anonstruct_Edge_3_existent_0_edges_30 !__anonstruct_Edge_3_to_edges_30
    !__anonstruct_Edge_3_from_edges_30
    __anonstruct_Vertex_2_existent_vertices_31))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 97 13 21#
    (Int32.(<=) (#"graph_4_c.jc" 205 36 48# "expl:Integer cast" (Int32.of_int
    (0))) pos))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 97 18 35#
    (Int32.(<) pos (select __anonstruct_Graph_4_ecnt_graph_14 graph)))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 98 13 22#
    (Int32.(<=) (#"graph_4_c.jc" 207 38 50# "expl:Integer cast" (Int32.of_int
    (0))) pos2))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 98 18 36#
    (Int32.(<) pos2 (select __anonstruct_Graph_4_ecnt_graph_14 graph)))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 99 13 24#
    (not (Int32.(=) pos pos2)))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 100 13 40#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_30
    (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
    (Int32.to_int pos)))) (0)))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 101 13 41#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_30
    (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
    (Int32.to_int pos2)))) (0)))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 102 13 32#
    (is_vertex graph (Int32.to_int f_2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 103 13 33#
    (is_vertex graph (Int32.to_int f2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 104 13 32#
    (is_vertex graph (Int32.to_int t_2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 105 13 33#
    (is_vertex graph (Int32.to_int t2) __anonstruct_Graph_4_vsize_graph_14))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 106 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
    (Int32.to_int f_2)))) (0))))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 107 13 40#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
    (Int32.to_int t_2)))) (0))))
   /\
   (#"graph_4_c.jc" 201 12 2006#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 108 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
    (Int32.to_int f2)))) (0))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_4.c" 109 13 41#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_31
   (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
   (Int32.to_int t2)))) (0)))))))))))))))))))))))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
     "expl:Ensures clause"
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
      "expl:Ensures clause"
      (not
      ((=)
      (Int32.to_int
      (select !__anonstruct_Edge_3_existent_0_edges_30
      (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
      (Int32.to_int pos)))) (0))))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 111 12 39#
      "expl:Ensures clause"
      (not
      ((=)
      (Int32.to_int
      (select !__anonstruct_Edge_3_existent_0_edges_30
      (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
      (Int32.to_int pos2)))) (0))))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 112 12 39#
      "expl:Ensures clause"
      (Int32.(=)
      (select !__anonstruct_Edge_3_from_edges_30
      (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
      (Int32.to_int pos))) f_2))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 113 12 41#
      "expl:Ensures clause"
      (Int32.(=)
      (select !__anonstruct_Edge_3_from_edges_30
      (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
      (Int32.to_int pos2))) f2))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
     "expl:Ensures clause"
     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 114 12 37#
      "expl:Ensures clause"
      (Int32.(=)
      (select !__anonstruct_Edge_3_to_edges_30
      (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
      (Int32.to_int pos))) t_2))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 115 12 39#
     "expl:Ensures clause"
     (Int32.(=)
     (select !__anonstruct_Edge_3_to_edges_30
     (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
     (Int32.to_int pos2))) t2)))))))))))))) }  ->
   'Init:
   try
    begin
    (let _jessie_34 = graph in
    (let _jessie_33 = pos in
    (let _jessie_32 = f_2 in
    (let _jessie_31 = t_2 in
    (#"/home/debian/mfsp/examples/regions/graph_4.c" 119 4 33#
    "expl:Precondition for insert_edge"
    (Function_insert_edge.insert_edge  _jessie_34 _jessie_33 _jessie_32
     _jessie_31 __anonstruct_Edge_3_existent_0_edges_30
     __anonstruct_Edge_3_to_edges_30 __anonstruct_Edge_3_from_edges_30
     __anonstruct_Vertex_2_vertices_31_alloc_table
     __anonstruct_Graph_4_graph_14_alloc_table
     __anonstruct_Edge_3_edges_30_alloc_table
     __anonstruct_Edge_3_edges_30_tag_table
     __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
     __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
     __anonstruct_Graph_4_vertices_graph_14
     __anonstruct_Vertex_2_existent_vertices_31 ))))));
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 120 15 28#
     "expl:Assertion in line 120"
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 120 15 28#
     "expl:Assertion in line 120"
     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 120 15 28#
      "expl:Assertion in line 120"
      ((<=) (offset_min __anonstruct_Graph_4_graph_14_alloc_table graph) (0)))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 120 15 28#
     "expl:Assertion in line 120"
     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 120 15 28#
      "expl:Assertion in line 120"
      ((>=) (offset_max __anonstruct_Graph_4_graph_14_alloc_table graph) (0)))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 120 15 28#
     "expl:Assertion in line 120" ((=) true true))))))) }); () end;
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 121 17 45#
     "expl:Assertion in line 121"
     (not
     ((=)
     (Int32.to_int
     (select __anonstruct_Vertex_2_existent_vertices_31
     (shift (select __anonstruct_Graph_4_vertices_graph_14 graph)
     (Int32.to_int f2)))) (0)))) }); () end;
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 122 17 45#
     "expl:Assertion in line 122"
     ((=)
     (Int32.to_int
     (select !__anonstruct_Edge_3_existent_0_edges_30
     (shift (select __anonstruct_Graph_4_edges_graph_14 graph)
     (Int32.to_int pos2)))) (0))) }); () end;
     begin
     (let _jessie_38 = graph in
     (let _jessie_37 = pos2 in
     (let _jessie_36 = f2 in
     (let _jessie_35 = t2 in
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 123 6 38#
     "expl:Precondition for insert_edge"
     (Function_insert_edge.insert_edge  _jessie_38 _jessie_37 _jessie_36
      _jessie_35 __anonstruct_Edge_3_existent_0_edges_30
      __anonstruct_Edge_3_to_edges_30 __anonstruct_Edge_3_from_edges_30
      __anonstruct_Vertex_2_vertices_31_alloc_table
      __anonstruct_Graph_4_graph_14_alloc_table
      __anonstruct_Edge_3_edges_30_alloc_table
      __anonstruct_Edge_3_edges_30_tag_table
      __anonstruct_Graph_4_esize_graph_14 __anonstruct_Graph_4_ecnt_graph_14
      __anonstruct_Graph_4_edges_graph_14 __anonstruct_Graph_4_vsize_graph_14
      __anonstruct_Graph_4_vertices_graph_14
      __anonstruct_Vertex_2_existent_vertices_31 )))))); (raise Return) end;
     (raise Return) end with Return -> () end
  
end

module Function_insert_edge_to_2graphs_safety
#"/home/debian/mfsp/examples/regions/graph_4.c" 148 5 80#
"expl:insert_edge_to_2graphs, safety"

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use import Logic_edges_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_insert_edge_safe 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  let insert_edge_to_2graphs
  #"/home/debian/mfsp/examples/regions/graph_4.c" 148 5 80#
  "expl:Function insert_edge_to_2graphs, safety" =
  fun
   (graph1 : (pointer __anonstruct_Graph_4)) (graph2 : (pointer
   __anonstruct_Graph_4)) (pos_1 : Int32.t) (f_1_0 : Int32.t) (t_1_0 :
   Int32.t) (__anonstruct_Edge_3_from_edges_32 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_32 : ref
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_32 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph1_15_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Graph_4_graph2_16_alloc_table : (alloc_table
   __anonstruct_Graph_4)) (__anonstruct_Vertex_2_vertices_33_alloc_table :
   (alloc_table __anonstruct_Vertex_2))
   (__anonstruct_Vertex_2_vertices_35_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_32_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_33 : (memory
   __anonstruct_Vertex_2 Int32.t))
   (__anonstruct_Vertex_2_existent_vertices_35 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph1_15 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vertices_graph2_16 : (memory __anonstruct_Graph_4
   (pointer __anonstruct_Vertex_2))) (__anonstruct_Graph_4_vsize_graph1_15 :
   (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_vsize_graph2_16 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph1_15 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_edges_graph2_16 : (memory __anonstruct_Graph_4
   (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_ecnt_graph1_15 :
   (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_ecnt_graph2_16 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph1_15 : (memory
   __anonstruct_Graph_4 Int32.t)) (__anonstruct_Graph_4_esize_graph2_16 :
   (memory __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 127 13 27#
    (#"graph_4_c.jc" 286 12 2751#
    ((#"graph_4_c.jc" 286 12 2751#
     ((<=) (offset_min __anonstruct_Graph_4_graph1_15_alloc_table graph1)
     (0)))
    /\
    (#"graph_4_c.jc" 286 12 2751#
    ((#"graph_4_c.jc" 286 12 2751#
     ((>=) (offset_max __anonstruct_Graph_4_graph1_15_alloc_table graph1)
     (0)))
    /\ (#"graph_4_c.jc" 286 12 2751# ((=) true true)))))))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 128 13 26#
    (valid_0 graph1 __anonstruct_Vertex_2_vertices_33_alloc_table
    __anonstruct_Edge_3_edges_32_alloc_table
    __anonstruct_Graph_4_esize_graph1_15 __anonstruct_Graph_4_ecnt_graph1_15
    __anonstruct_Graph_4_edges_graph1_15 __anonstruct_Graph_4_vsize_graph1_15
    __anonstruct_Graph_4_vertices_graph1_15
    !__anonstruct_Edge_3_existent_0_edges_32 !__anonstruct_Edge_3_to_edges_32
    !__anonstruct_Edge_3_from_edges_32
    __anonstruct_Vertex_2_existent_vertices_33))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 129 13 21#
    (Int32.(<=) (#"graph_4_c.jc" 290 36 48# "expl:Integer cast" (Int32.of_int
    (0))) pos_1))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 129 18 36#
    (Int32.(<) pos_1 (select __anonstruct_Graph_4_ecnt_graph1_15 graph1)))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 130 13 41#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_32
    (shift (select __anonstruct_Graph_4_edges_graph1_15 graph1)
    (Int32.to_int pos_1)))) (0)))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 131 13 33#
    (is_vertex graph1 (Int32.to_int f_1_0)
    __anonstruct_Graph_4_vsize_graph1_15))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 132 13 33#
    (is_vertex graph1 (Int32.to_int t_1_0)
    __anonstruct_Graph_4_vsize_graph1_15))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 133 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_33
    (shift (select __anonstruct_Graph_4_vertices_graph1_15 graph1)
    (Int32.to_int f_1_0)))) (0))))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 134 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_33
    (shift (select __anonstruct_Graph_4_vertices_graph1_15 graph1)
    (Int32.to_int t_1_0)))) (0))))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 136 13 27#
    (#"graph_4_c.jc" 286 12 2751#
    ((#"graph_4_c.jc" 286 12 2751#
     ((<=) (offset_min __anonstruct_Graph_4_graph2_16_alloc_table graph2)
     (0)))
    /\
    (#"graph_4_c.jc" 286 12 2751#
    ((#"graph_4_c.jc" 286 12 2751#
     ((>=) (offset_max __anonstruct_Graph_4_graph2_16_alloc_table graph2)
     (0)))
    /\ (#"graph_4_c.jc" 286 12 2751# ((=) true true)))))))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 137 13 26#
    (valid_0 graph2 __anonstruct_Vertex_2_vertices_35_alloc_table
    __anonstruct_Edge_3_edges_32_alloc_table
    __anonstruct_Graph_4_esize_graph2_16 __anonstruct_Graph_4_ecnt_graph2_16
    __anonstruct_Graph_4_edges_graph2_16 __anonstruct_Graph_4_vsize_graph2_16
    __anonstruct_Graph_4_vertices_graph2_16
    !__anonstruct_Edge_3_existent_0_edges_32 !__anonstruct_Edge_3_to_edges_32
    !__anonstruct_Edge_3_from_edges_32
    __anonstruct_Vertex_2_existent_vertices_35))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 138 13 21#
    (Int32.(<=) (#"graph_4_c.jc" 306 52 64# "expl:Integer cast" (Int32.of_int
    (0))) pos_1))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 138 18 36#
    (Int32.(<) pos_1 (select __anonstruct_Graph_4_ecnt_graph2_16 graph2)))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 139 13 41#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_32
    (shift (select __anonstruct_Graph_4_edges_graph2_16 graph2)
    (Int32.to_int pos_1)))) (0)))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 140 13 33#
    (is_vertex graph2 (Int32.to_int f_1_0)
    __anonstruct_Graph_4_vsize_graph2_16))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 141 13 33#
    (is_vertex graph2 (Int32.to_int t_1_0)
    __anonstruct_Graph_4_vsize_graph2_16))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 142 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_35
    (shift (select __anonstruct_Graph_4_vertices_graph2_16 graph2)
    (Int32.to_int f_1_0)))) (0))))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 143 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_35
    (shift (select __anonstruct_Graph_4_vertices_graph2_16 graph2)
    (Int32.to_int t_1_0)))) (0))))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 145 13 43#
    (not
    ((=) (select __anonstruct_Graph_4_edges_graph1_15 graph1)
    (select __anonstruct_Graph_4_edges_graph2_16 graph2))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_4.c" 146 13 67#
   (not
   (same_block (select __anonstruct_Graph_4_edges_graph1_15 graph1)
   (select __anonstruct_Graph_4_edges_graph2_16 graph2))))))))))))))))))))))))))))))))))))))))))
   } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (let _jessie_58 = graph1 in
    (let _jessie_57 = pos_1 in
    (let _jessie_56 = f_1_0 in
    (let _jessie_55 = t_1_0 in
    (#"/home/debian/mfsp/examples/regions/graph_4.c" 150 4 34#
    "expl:Precondition for insert_edge"
    (Function_insert_edge_safe.insert_edge  _jessie_58 _jessie_57 _jessie_56
     _jessie_55 __anonstruct_Edge_3_existent_0_edges_32
     __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
     __anonstruct_Vertex_2_vertices_33_alloc_table
     __anonstruct_Graph_4_graph1_15_alloc_table
     __anonstruct_Edge_3_edges_32_alloc_table
     __anonstruct_Edge_3_edges_32_tag_table
     __anonstruct_Graph_4_esize_graph1_15 __anonstruct_Graph_4_ecnt_graph1_15
     __anonstruct_Graph_4_edges_graph1_15
     __anonstruct_Graph_4_vsize_graph1_15
     __anonstruct_Graph_4_vertices_graph1_15
     __anonstruct_Vertex_2_existent_vertices_33 ))))));
     begin
     any unit
     requires { true } reads { graph2 }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 151 15 29#
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 151 15 29#
       ((#"/home/debian/mfsp/examples/regions/graph_4.c" 151 15 29#
        ((<=) (offset_min __anonstruct_Graph_4_graph2_16_alloc_table graph2)
        (0)))
       /\
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 151 15 29#
       ((#"/home/debian/mfsp/examples/regions/graph_4.c" 151 15 29#
        ((>=) (offset_max __anonstruct_Graph_4_graph2_16_alloc_table graph2)
        (0)))
       /\
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 151 15 29#
       ((=) true true))))))) } ; () end;
     begin
     any unit
     requires { true } reads { f_1_0, graph2 }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 152 17 45#
       (not
       ((=)
       (Int32.to_int
       (select __anonstruct_Vertex_2_existent_vertices_35
       (shift (select __anonstruct_Graph_4_vertices_graph2_16 graph2)
       (Int32.to_int f_1_0)))) (0)))) } ; () end;
     begin
     any unit
     requires { true } reads { __anonstruct_Edge_3_existent_0_edges_32,
     graph2, pos_1 }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 153 17 45#
       ((=)
       (Int32.to_int
       (select !__anonstruct_Edge_3_existent_0_edges_32
       (shift (select __anonstruct_Graph_4_edges_graph2_16 graph2)
       (Int32.to_int pos_1)))) (0))) } ; () end;
     begin
     any unit
     requires { true } reads { __anonstruct_Edge_3_existent_0_edges_32,
     __anonstruct_Edge_3_from_edges_32, __anonstruct_Edge_3_to_edges_32,
     graph2 }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 154 17 50#
       (edges_valid graph2
       (Int32.to_int (select __anonstruct_Graph_4_ecnt_graph2_16 graph2))
       __anonstruct_Graph_4_edges_graph2_16
       __anonstruct_Graph_4_vsize_graph2_16
       __anonstruct_Graph_4_vertices_graph2_16
       !__anonstruct_Edge_3_existent_0_edges_32
       !__anonstruct_Edge_3_to_edges_32 !__anonstruct_Edge_3_from_edges_32
       __anonstruct_Vertex_2_existent_vertices_35)) } ; () end;
     begin
     any unit
     requires { true } reads { __anonstruct_Edge_3_existent_0_edges_32,
     graph2 }
     ensures {
       (#"/home/debian/mfsp/examples/regions/graph_4.c" 155 17 100#
       (forall k_8 : int.
        ((((<=)
          (Int32.to_int (select __anonstruct_Graph_4_ecnt_graph2_16 graph2))
          k_8)
         /\
         ((<) k_8
         (Int32.to_int (select __anonstruct_Graph_4_esize_graph2_16 graph2))))
         ->
         ((=)
         (Int32.to_int
         (select !__anonstruct_Edge_3_existent_0_edges_32
         (shift (select __anonstruct_Graph_4_edges_graph2_16 graph2) k_8)))
         (0))))) } ; () end;
     begin
     (let _jessie_62 = graph2 in
     (let _jessie_61 = pos_1 in
     (let _jessie_60 = f_1_0 in
     (let _jessie_59 = t_1_0 in
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 156 6 36#
     "expl:Precondition for insert_edge"
     (Function_insert_edge_safe.insert_edge  _jessie_62 _jessie_61 _jessie_60
      _jessie_59 __anonstruct_Edge_3_existent_0_edges_32
      __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
      __anonstruct_Vertex_2_vertices_35_alloc_table
      __anonstruct_Graph_4_graph2_16_alloc_table
      __anonstruct_Edge_3_edges_32_alloc_table
      __anonstruct_Edge_3_edges_32_tag_table
      __anonstruct_Graph_4_esize_graph2_16
      __anonstruct_Graph_4_ecnt_graph2_16
      __anonstruct_Graph_4_edges_graph2_16
      __anonstruct_Graph_4_vsize_graph2_16
      __anonstruct_Graph_4_vertices_graph2_16
      __anonstruct_Vertex_2_existent_vertices_35 )))))); (raise Return) end;
     (raise Return) end with Return -> () end
  
end

module Function_insert_edge_to_2graphs_behaviors
#"/home/debian/mfsp/examples/regions/graph_4.c" 148 5 80#
"expl:insert_edge_to_2graphs, behaviors"

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use import Logic_edges_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_insert_edge 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  let insert_edge_to_2graphs_ensures_default
  #"/home/debian/mfsp/examples/regions/graph_4.c" 148 5 80#
  "expl:Function insert_edge_to_2graphs, default behavior" =
  fun
   (graph1 : (pointer __anonstruct_Graph_4)) (graph2 : (pointer
   __anonstruct_Graph_4)) (pos_1 : Int32.t) (f_1_0 : Int32.t) (t_1_0 :
   Int32.t) (__anonstruct_Edge_3_from_edges_32 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_32 : ref
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_32 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_graph1_15_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Graph_4_graph2_16_alloc_table : (alloc_table
   __anonstruct_Graph_4)) (__anonstruct_Vertex_2_vertices_33_alloc_table :
   (alloc_table __anonstruct_Vertex_2))
   (__anonstruct_Vertex_2_vertices_35_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_32_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_33 : (memory
   __anonstruct_Vertex_2 Int32.t))
   (__anonstruct_Vertex_2_existent_vertices_35 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_graph1_15 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vertices_graph2_16 : (memory __anonstruct_Graph_4
   (pointer __anonstruct_Vertex_2))) (__anonstruct_Graph_4_vsize_graph1_15 :
   (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_vsize_graph2_16 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_graph1_15 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_edges_graph2_16 : (memory __anonstruct_Graph_4
   (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_ecnt_graph1_15 :
   (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_ecnt_graph2_16 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_esize_graph1_15 : (memory
   __anonstruct_Graph_4 Int32.t)) (__anonstruct_Graph_4_esize_graph2_16 :
   (memory __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 127 13 27#
    (#"graph_4_c.jc" 286 12 2751#
    ((#"graph_4_c.jc" 286 12 2751#
     ((<=) (offset_min __anonstruct_Graph_4_graph1_15_alloc_table graph1)
     (0)))
    /\
    (#"graph_4_c.jc" 286 12 2751#
    ((#"graph_4_c.jc" 286 12 2751#
     ((>=) (offset_max __anonstruct_Graph_4_graph1_15_alloc_table graph1)
     (0)))
    /\ (#"graph_4_c.jc" 286 12 2751# ((=) true true)))))))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 128 13 26#
    (valid_0 graph1 __anonstruct_Vertex_2_vertices_33_alloc_table
    __anonstruct_Edge_3_edges_32_alloc_table
    __anonstruct_Graph_4_esize_graph1_15 __anonstruct_Graph_4_ecnt_graph1_15
    __anonstruct_Graph_4_edges_graph1_15 __anonstruct_Graph_4_vsize_graph1_15
    __anonstruct_Graph_4_vertices_graph1_15
    !__anonstruct_Edge_3_existent_0_edges_32 !__anonstruct_Edge_3_to_edges_32
    !__anonstruct_Edge_3_from_edges_32
    __anonstruct_Vertex_2_existent_vertices_33))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 129 13 21#
    (Int32.(<=) (#"graph_4_c.jc" 290 36 48# "expl:Integer cast" (Int32.of_int
    (0))) pos_1))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 129 18 36#
    (Int32.(<) pos_1 (select __anonstruct_Graph_4_ecnt_graph1_15 graph1)))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 130 13 41#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_32
    (shift (select __anonstruct_Graph_4_edges_graph1_15 graph1)
    (Int32.to_int pos_1)))) (0)))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 131 13 33#
    (is_vertex graph1 (Int32.to_int f_1_0)
    __anonstruct_Graph_4_vsize_graph1_15))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 132 13 33#
    (is_vertex graph1 (Int32.to_int t_1_0)
    __anonstruct_Graph_4_vsize_graph1_15))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 133 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_33
    (shift (select __anonstruct_Graph_4_vertices_graph1_15 graph1)
    (Int32.to_int f_1_0)))) (0))))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 134 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_33
    (shift (select __anonstruct_Graph_4_vertices_graph1_15 graph1)
    (Int32.to_int t_1_0)))) (0))))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 136 13 27#
    (#"graph_4_c.jc" 286 12 2751#
    ((#"graph_4_c.jc" 286 12 2751#
     ((<=) (offset_min __anonstruct_Graph_4_graph2_16_alloc_table graph2)
     (0)))
    /\
    (#"graph_4_c.jc" 286 12 2751#
    ((#"graph_4_c.jc" 286 12 2751#
     ((>=) (offset_max __anonstruct_Graph_4_graph2_16_alloc_table graph2)
     (0)))
    /\ (#"graph_4_c.jc" 286 12 2751# ((=) true true)))))))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 137 13 26#
    (valid_0 graph2 __anonstruct_Vertex_2_vertices_35_alloc_table
    __anonstruct_Edge_3_edges_32_alloc_table
    __anonstruct_Graph_4_esize_graph2_16 __anonstruct_Graph_4_ecnt_graph2_16
    __anonstruct_Graph_4_edges_graph2_16 __anonstruct_Graph_4_vsize_graph2_16
    __anonstruct_Graph_4_vertices_graph2_16
    !__anonstruct_Edge_3_existent_0_edges_32 !__anonstruct_Edge_3_to_edges_32
    !__anonstruct_Edge_3_from_edges_32
    __anonstruct_Vertex_2_existent_vertices_35))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 138 13 21#
    (Int32.(<=) (#"graph_4_c.jc" 306 52 64# "expl:Integer cast" (Int32.of_int
    (0))) pos_1))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 138 18 36#
    (Int32.(<) pos_1 (select __anonstruct_Graph_4_ecnt_graph2_16 graph2)))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 139 13 41#
    ((=)
    (Int32.to_int
    (select !__anonstruct_Edge_3_existent_0_edges_32
    (shift (select __anonstruct_Graph_4_edges_graph2_16 graph2)
    (Int32.to_int pos_1)))) (0)))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 140 13 33#
    (is_vertex graph2 (Int32.to_int f_1_0)
    __anonstruct_Graph_4_vsize_graph2_16))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 141 13 33#
    (is_vertex graph2 (Int32.to_int t_1_0)
    __anonstruct_Graph_4_vsize_graph2_16))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 142 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_35
    (shift (select __anonstruct_Graph_4_vertices_graph2_16 graph2)
    (Int32.to_int f_1_0)))) (0))))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 143 13 41#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_35
    (shift (select __anonstruct_Graph_4_vertices_graph2_16 graph2)
    (Int32.to_int t_1_0)))) (0))))
   /\
   (#"graph_4_c.jc" 286 12 2751#
   ((#"/home/debian/mfsp/examples/regions/graph_4.c" 145 13 43#
    (not
    ((=) (select __anonstruct_Graph_4_edges_graph1_15 graph1)
    (select __anonstruct_Graph_4_edges_graph2_16 graph2))))
   /\
   (#"/home/debian/mfsp/examples/regions/graph_4.c" 146 13 67#
   (not
   (same_block (select __anonstruct_Graph_4_edges_graph1_15 graph1)
   (select __anonstruct_Graph_4_edges_graph2_16 graph2))))))))))))))))))))))))))))))))))))))))))
   } ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) }  ->
   'Init:
   try
    begin
    (let _jessie_50 = graph1 in
    (let _jessie_49 = pos_1 in
    (let _jessie_48 = f_1_0 in
    (let _jessie_47 = t_1_0 in
    (#"/home/debian/mfsp/examples/regions/graph_4.c" 150 4 34#
    "expl:Precondition for insert_edge"
    (Function_insert_edge.insert_edge  _jessie_50 _jessie_49 _jessie_48
     _jessie_47 __anonstruct_Edge_3_existent_0_edges_32
     __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
     __anonstruct_Vertex_2_vertices_33_alloc_table
     __anonstruct_Graph_4_graph1_15_alloc_table
     __anonstruct_Edge_3_edges_32_alloc_table
     __anonstruct_Edge_3_edges_32_tag_table
     __anonstruct_Graph_4_esize_graph1_15 __anonstruct_Graph_4_ecnt_graph1_15
     __anonstruct_Graph_4_edges_graph1_15
     __anonstruct_Graph_4_vsize_graph1_15
     __anonstruct_Graph_4_vertices_graph1_15
     __anonstruct_Vertex_2_existent_vertices_33 ))))));
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 151 15 29#
     "expl:Assertion in line 151"
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 151 15 29#
     "expl:Assertion in line 151"
     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 151 15 29#
      "expl:Assertion in line 151"
      ((<=) (offset_min __anonstruct_Graph_4_graph2_16_alloc_table graph2)
      (0)))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 151 15 29#
     "expl:Assertion in line 151"
     ((#"/home/debian/mfsp/examples/regions/graph_4.c" 151 15 29#
      "expl:Assertion in line 151"
      ((>=) (offset_max __anonstruct_Graph_4_graph2_16_alloc_table graph2)
      (0)))
     /\
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 151 15 29#
     "expl:Assertion in line 151" ((=) true true))))))) }); () end;
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 152 17 45#
     "expl:Assertion in line 152"
     (not
     ((=)
     (Int32.to_int
     (select __anonstruct_Vertex_2_existent_vertices_35
     (shift (select __anonstruct_Graph_4_vertices_graph2_16 graph2)
     (Int32.to_int f_1_0)))) (0)))) }); () end;
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 153 17 45#
     "expl:Assertion in line 153"
     ((=)
     (Int32.to_int
     (select !__anonstruct_Edge_3_existent_0_edges_32
     (shift (select __anonstruct_Graph_4_edges_graph2_16 graph2)
     (Int32.to_int pos_1)))) (0))) }); () end;
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 154 17 50#
     "expl:Assertion in line 154"
     (edges_valid graph2
     (Int32.to_int (select __anonstruct_Graph_4_ecnt_graph2_16 graph2))
     __anonstruct_Graph_4_edges_graph2_16
     __anonstruct_Graph_4_vsize_graph2_16
     __anonstruct_Graph_4_vertices_graph2_16
     !__anonstruct_Edge_3_existent_0_edges_32
     !__anonstruct_Edge_3_to_edges_32 !__anonstruct_Edge_3_from_edges_32
     __anonstruct_Vertex_2_existent_vertices_35)) }); () end;
     begin
     (assert {
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 155 17 100#
     "expl:Assertion in line 155"
     (forall k_8 : int.
      ((((<=)
        (Int32.to_int (select __anonstruct_Graph_4_ecnt_graph2_16 graph2))
        k_8)
       /\
       ((<) k_8
       (Int32.to_int (select __anonstruct_Graph_4_esize_graph2_16 graph2))))
       ->
       ((=)
       (Int32.to_int
       (select !__anonstruct_Edge_3_existent_0_edges_32
       (shift (select __anonstruct_Graph_4_edges_graph2_16 graph2) k_8)))
       (0))))) }); () end;
     begin
     (let _jessie_54 = graph2 in
     (let _jessie_53 = pos_1 in
     (let _jessie_52 = f_1_0 in
     (let _jessie_51 = t_1_0 in
     (#"/home/debian/mfsp/examples/regions/graph_4.c" 156 6 36#
     "expl:Precondition for insert_edge"
     (Function_insert_edge.insert_edge  _jessie_54 _jessie_53 _jessie_52
      _jessie_51 __anonstruct_Edge_3_existent_0_edges_32
      __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32
      __anonstruct_Vertex_2_vertices_35_alloc_table
      __anonstruct_Graph_4_graph2_16_alloc_table
      __anonstruct_Edge_3_edges_32_alloc_table
      __anonstruct_Edge_3_edges_32_tag_table
      __anonstruct_Graph_4_esize_graph2_16
      __anonstruct_Graph_4_ecnt_graph2_16
      __anonstruct_Graph_4_edges_graph2_16
      __anonstruct_Graph_4_vsize_graph2_16
      __anonstruct_Graph_4_vertices_graph2_16
      __anonstruct_Vertex_2_existent_vertices_35 )))))); (raise Return) end;
     (raise Return) end with Return -> () end
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct___anonstruct_Edge_3

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Edge_3_tag  : (tag_id
  __anonstruct_Edge_3)
  
  axiom U___anonstruct_Edge_3_parenttag_bottom  :
  (parenttag __anonstruct_Edge_3_tag bottom_tag)
  
  axiom U___anonstruct_Edge_3_is_final  :
  (forall __anonstruct_Edge_3_tag_table : (tag_table __anonstruct_Edge_3).
   (forall p : (pointer __anonstruct_Edge_3).
    ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) ->
     ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag))))
  
  predicate frame_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  =
     ((tag_extends old___anonstruct_Edge_3_tag_table
      __anonstruct_Edge_3_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Edge_3_tag_table
     __anonstruct_Edge_3_tag_table p))
  
  predicate frame_free_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3))
  =
     ((free_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (free_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (old___anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  =
     ((alloc_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (alloc_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (tag_fresh __anonstruct_Edge_3_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = (alloc_fresh __anonstruct_Edge_3_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) = true
  
  predicate container_of_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3)) = true
  
  predicate typeof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
  
  predicate typeof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     (((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Edge_3_tag_table (shift p i))
       __anonstruct_Edge_3_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag)
  
  predicate instanceof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Edge_3_tag_table (shift p i)
       __anonstruct_Edge_3_tag))))
  
  predicate right_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (b : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  axiom U___anonstruct_Edge_3_int  :
  ((=) (int_of_tag __anonstruct_Edge_3_tag) (4))
  
end

module Struct___anonstruct_Edge_3_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Edge_3_alloc_table p)) }
    writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3_requires
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { ((>=) n (0)) } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
end

module Struct___anonstruct_Edge_3_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires { true } writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { true } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Edge_3
  (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
    (pointer __anonstruct_Edge_3)
    requires { true } writes { __anonstruct_Edge_3_alloc_table,
    __anonstruct_Edge_3_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Edge_3 result (0) (0)
       !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Edge_3 result (1) (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Edge_3 result (old
       !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Edge_3 result
       !__anonstruct_Edge_3_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Edge_3 result
      !__anonstruct_Edge_3_tag_table))))))) }
  
end

theory Struct___anonstruct_Graph_4

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Graph_4_tag  : (tag_id
  __anonstruct_Graph_4)
  
  axiom U___anonstruct_Graph_4_parenttag_bottom  :
  (parenttag __anonstruct_Graph_4_tag bottom_tag)
  
  axiom U___anonstruct_Graph_4_is_final  :
  (forall __anonstruct_Graph_4_tag_table : (tag_table __anonstruct_Graph_4).
   (forall p : (pointer __anonstruct_Graph_4).
    ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     ->
     ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag))))
  
  predicate frame_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  =
     ((tag_extends old___anonstruct_Graph_4_tag_table
      __anonstruct_Graph_4_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Graph_4_tag_table
     __anonstruct_Graph_4_tag_table p))
  
  predicate frame_free_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4))
  =
     ((free_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (free_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (old___anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  =
     ((alloc_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (alloc_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_tag_table :
  (tag_table __anonstruct_Graph_4))
  = (tag_fresh __anonstruct_Graph_4_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = (alloc_fresh __anonstruct_Graph_4_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) = true
  
  predicate container_of_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4)) = true
  
  predicate typeof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
  
  predicate typeof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     (((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Graph_4_tag_table (shift p i))
       __anonstruct_Graph_4_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = (instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
  
  predicate instanceof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Graph_4_tag_table (shift p i)
       __anonstruct_Graph_4_tag))))
  
  predicate right_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (b : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  axiom U___anonstruct_Graph_4_int  :
  ((=) (int_of_tag __anonstruct_Graph_4_tag) (5))
  
end

module Struct___anonstruct_Graph_4_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Graph_4_alloc_table p)) }
    writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4_requires
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { ((>=) n (0)) } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
end

module Struct___anonstruct_Graph_4_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires { true } writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { true } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Graph_4
  (__anonstruct_Graph_4_alloc_table : ref (alloc_table
   __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
    (pointer __anonstruct_Graph_4)
    requires { true } writes { __anonstruct_Graph_4_alloc_table,
    __anonstruct_Graph_4_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Graph_4 result (0) (0)
       !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Graph_4 result (1) (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Graph_4 result (old
       !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Graph_4 result
       !__anonstruct_Graph_4_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Graph_4 result
      !__anonstruct_Graph_4_tag_table))))))) }
  
end

theory Struct___anonstruct_Vertex_2

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Vertex_2_tag  : (tag_id
  __anonstruct_Vertex_2)
  
  axiom U___anonstruct_Vertex_2_parenttag_bottom  :
  (parenttag __anonstruct_Vertex_2_tag bottom_tag)
  
  axiom U___anonstruct_Vertex_2_is_final  :
  (forall __anonstruct_Vertex_2_tag_table : (tag_table
   __anonstruct_Vertex_2).
   (forall p : (pointer __anonstruct_Vertex_2).
    ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     ->
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag))))
  
  predicate frame_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((tag_extends old___anonstruct_Vertex_2_tag_table
      __anonstruct_Vertex_2_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Vertex_2_tag_table
     __anonstruct_Vertex_2_tag_table p))
  
  predicate frame_free_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((free_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (free_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((alloc_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (alloc_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_tag_table :
  (tag_table __anonstruct_Vertex_2))
  = (tag_fresh __anonstruct_Vertex_2_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = (alloc_fresh __anonstruct_Vertex_2_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) = true
  
  predicate container_of_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  = true
  
  predicate typeof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag)
  
  predicate typeof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     (((=) (typeof __anonstruct_Vertex_2_tag_table p)
      __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Vertex_2_tag_table (shift p i))
       __anonstruct_Vertex_2_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  = (instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
  
  predicate instanceof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Vertex_2_tag_table (shift p i)
       __anonstruct_Vertex_2_tag))))
  
  predicate right_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (b : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  axiom U___anonstruct_Vertex_2_int  :
  ((=) (int_of_tag __anonstruct_Vertex_2_tag) (6))
  
end

module Struct___anonstruct_Vertex_2_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Vertex_2_alloc_table p)) }
    writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2_requires
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { ((>=) n (0)) } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
end

module Struct___anonstruct_Vertex_2_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires { true } writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { true } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Vertex_2
  (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
   __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_tag_table : ref (tag_table
    __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
    requires { true } writes { __anonstruct_Vertex_2_alloc_table,
    __anonstruct_Vertex_2_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Vertex_2 result (0) (0)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Vertex_2 result (1) (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Vertex_2 result (old
       !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Vertex_2 result
       !__anonstruct_Vertex_2_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Vertex_2 result
      !__anonstruct_Vertex_2_tag_table))))))) }
  
end

theory Struct_voidP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate strict_left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_charP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

theory Logic_range_existent

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate range_existent (g_6 : (pointer __anonstruct_Graph_4)) (m_0 : int)
  (n_3 : int) (__anonstruct_Graph_4_edges_g_6_9_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_22_at_L : (memory __anonstruct_Edge_3
  Int32.t))
  =
     (forall k_6 : int.
      ((((<=) m_0 k_6) /\ ((<) k_6 n_3)) ->
       (not
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_22_at_L
       (shift (select __anonstruct_Graph_4_edges_g_6_9_at_L g_6) k_6))) (0)))))
  
  
end

theory Logic_full

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_range_existent 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate full (g_5 : (pointer __anonstruct_Graph_4))
  (__anonstruct_Graph_4_esize_g_5_8_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_edges_g_5_8_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_56_at_L : (memory __anonstruct_Edge_3
  Int32.t))
  =
     (range_existent g_5 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_5_8_at_L g_5))
     __anonstruct_Graph_4_edges_g_5_8_at_L
     __anonstruct_Edge_3_existent_0_edges_56_at_L)
  
  
end

module Function_insert_double_edge

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_double_edge
  (graph : (pointer __anonstruct_Graph_4)) 
   (pos : Int32.t) 
    (pos2 : Int32.t) 
     (f_2 : Int32.t) 
      (t_2 : Int32.t) 
       (f2 : Int32.t) 
        (t2 : Int32.t) 
         (__anonstruct_Edge_3_existent_0_edges_30 : ref (memory
          __anonstruct_Edge_3 Int32.t)) 
          (__anonstruct_Edge_3_to_edges_30 : ref (memory __anonstruct_Edge_3
           Int32.t)) 
           (__anonstruct_Edge_3_from_edges_30 : ref (memory
            __anonstruct_Edge_3 Int32.t)) 
            (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
             __anonstruct_Vertex_2)) 
             (__anonstruct_Graph_4_graph_14_alloc_table : (alloc_table
              __anonstruct_Graph_4)) 
              (__anonstruct_Edge_3_edges_30_alloc_table : (alloc_table
               __anonstruct_Edge_3)) 
               (__anonstruct_Edge_3_edges_30_tag_table : (tag_table
                __anonstruct_Edge_3)) 
                (__anonstruct_Graph_4_esize_graph_14 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_ecnt_graph_14 : (memory
                  __anonstruct_Graph_4 Int32.t)) 
                  (__anonstruct_Graph_4_edges_graph_14 : (memory
                   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                   (__anonstruct_Graph_4_vsize_graph_14 : (memory
                    __anonstruct_Graph_4 Int32.t)) 
                    (__anonstruct_Graph_4_vertices_graph_14 : (memory
                     __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                     (__anonstruct_Vertex_2_existent_vertices_31 : (memory
                      __anonstruct_Vertex_2 Int32.t)) : unit
                      requires { true } reads {
                      __anonstruct_Edge_3_existent_0_edges_30,
                      __anonstruct_Edge_3_from_edges_30,
                      __anonstruct_Edge_3_to_edges_30 } writes {
                      __anonstruct_Edge_3_existent_0_edges_30,
                      __anonstruct_Edge_3_from_edges_30,
                      __anonstruct_Edge_3_to_edges_30 }
                      ensures {
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                        "expl:Ensures clause"
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                         "expl:Ensures clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_30
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 111 12 39#
                         "expl:Ensures clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_30
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos2)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 112 12 39#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_30
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos))) f_2))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 113 12 41#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_30
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos2))) f2))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 114 12 37#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_to_edges_30
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos))) t_2))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 115 12 39#
                        "expl:Ensures clause"
                        (Int32.(=)
                        (select !__anonstruct_Edge_3_to_edges_30
                        (shift
                        (select __anonstruct_Graph_4_edges_graph_14 graph)
                        (Int32.to_int pos2))) t2))))))))))))) }
  
end

module Function_insert_double_edge_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_double_edge
  (graph : (pointer __anonstruct_Graph_4)) 
   (pos : Int32.t) 
    (pos2 : Int32.t) 
     (f_2 : Int32.t) 
      (t_2 : Int32.t) 
       (f2 : Int32.t) 
        (t2 : Int32.t) 
         (__anonstruct_Edge_3_existent_0_edges_30 : ref (memory
          __anonstruct_Edge_3 Int32.t)) 
          (__anonstruct_Edge_3_to_edges_30 : ref (memory __anonstruct_Edge_3
           Int32.t)) 
           (__anonstruct_Edge_3_from_edges_30 : ref (memory
            __anonstruct_Edge_3 Int32.t)) 
            (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
             __anonstruct_Vertex_2)) 
             (__anonstruct_Graph_4_graph_14_alloc_table : (alloc_table
              __anonstruct_Graph_4)) 
              (__anonstruct_Edge_3_edges_30_alloc_table : (alloc_table
               __anonstruct_Edge_3)) 
               (__anonstruct_Edge_3_edges_30_tag_table : (tag_table
                __anonstruct_Edge_3)) 
                (__anonstruct_Graph_4_esize_graph_14 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_ecnt_graph_14 : (memory
                  __anonstruct_Graph_4 Int32.t)) 
                  (__anonstruct_Graph_4_edges_graph_14 : (memory
                   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                   (__anonstruct_Graph_4_vsize_graph_14 : (memory
                    __anonstruct_Graph_4 Int32.t)) 
                    (__anonstruct_Graph_4_vertices_graph_14 : (memory
                     __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                     (__anonstruct_Vertex_2_existent_vertices_31 : (memory
                      __anonstruct_Vertex_2 Int32.t)) : unit
                      requires {
                        ("expl:Internal"
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 95 13 26#
                         "expl:Requires clause"
                         (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                         ((#"graph_4_c.jc" 201 12 2006#
                          "expl:Requires clause"
                          ((<=)
                          (offset_min
                          __anonstruct_Graph_4_graph_14_alloc_table graph)
                          (0)))
                         /\
                         (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                         ((#"graph_4_c.jc" 201 12 2006#
                          "expl:Requires clause"
                          ((>=)
                          (offset_max
                          __anonstruct_Graph_4_graph_14_alloc_table graph)
                          (0)))
                         /\
                         (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                         ((=) true true)))))))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 96 13 25#
                         "expl:Requires clause"
                         (valid_0 graph
                         __anonstruct_Vertex_2_vertices_31_alloc_table
                         __anonstruct_Edge_3_edges_30_alloc_table
                         __anonstruct_Graph_4_esize_graph_14
                         __anonstruct_Graph_4_ecnt_graph_14
                         __anonstruct_Graph_4_edges_graph_14
                         __anonstruct_Graph_4_vsize_graph_14
                         __anonstruct_Graph_4_vertices_graph_14
                         !__anonstruct_Edge_3_existent_0_edges_30
                         !__anonstruct_Edge_3_to_edges_30
                         !__anonstruct_Edge_3_from_edges_30
                         __anonstruct_Vertex_2_existent_vertices_31))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 97 13 21#
                         "expl:Requires clause"
                         (Int32.(<=) (#"graph_4_c.jc" 205 36 48#
                         "expl:Integer cast" (Int32.of_int (0))) pos))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 97 18 35#
                         "expl:Requires clause"
                         (Int32.(<) pos
                         (select __anonstruct_Graph_4_ecnt_graph_14 graph)))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 98 13 22#
                         "expl:Requires clause"
                         (Int32.(<=) (#"graph_4_c.jc" 207 38 50#
                         "expl:Integer cast" (Int32.of_int (0))) pos2))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 98 18 36#
                         "expl:Requires clause"
                         (Int32.(<) pos2
                         (select __anonstruct_Graph_4_ecnt_graph_14 graph)))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 99 13 24#
                         "expl:Requires clause" (not (Int32.(=) pos pos2)))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 100 13 40#
                         "expl:Requires clause"
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_30
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos)))) (0)))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 101 13 41#
                         "expl:Requires clause"
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_30
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos2)))) (0)))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 102 13 32#
                         "expl:Requires clause"
                         (is_vertex graph (Int32.to_int f_2)
                         __anonstruct_Graph_4_vsize_graph_14))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 103 13 33#
                         "expl:Requires clause"
                         (is_vertex graph (Int32.to_int f2)
                         __anonstruct_Graph_4_vsize_graph_14))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 104 13 32#
                         "expl:Requires clause"
                         (is_vertex graph (Int32.to_int t_2)
                         __anonstruct_Graph_4_vsize_graph_14))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 105 13 33#
                         "expl:Requires clause"
                         (is_vertex graph (Int32.to_int t2)
                         __anonstruct_Graph_4_vsize_graph_14))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 106 13 40#
                         "expl:Requires clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select __anonstruct_Vertex_2_existent_vertices_31
                         (shift
                         (select __anonstruct_Graph_4_vertices_graph_14
                         graph) (Int32.to_int f_2)))) (0))))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 107 13 40#
                         "expl:Requires clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select __anonstruct_Vertex_2_existent_vertices_31
                         (shift
                         (select __anonstruct_Graph_4_vertices_graph_14
                         graph) (Int32.to_int t_2)))) (0))))
                        /\
                        (#"graph_4_c.jc" 201 12 2006# "expl:Requires clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 108 13 41#
                         "expl:Requires clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select __anonstruct_Vertex_2_existent_vertices_31
                         (shift
                         (select __anonstruct_Graph_4_vertices_graph_14
                         graph) (Int32.to_int f2)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 109 13 41#
                        "expl:Requires clause"
                        (not
                        ((=)
                        (Int32.to_int
                        (select __anonstruct_Vertex_2_existent_vertices_31
                        (shift
                        (select __anonstruct_Graph_4_vertices_graph_14 graph)
                        (Int32.to_int t2)))) (0)))))))))))))))))))))))))))))))))))))
                        }
                      reads { __anonstruct_Edge_3_existent_0_edges_30,
                      __anonstruct_Edge_3_from_edges_30,
                      __anonstruct_Edge_3_to_edges_30 } writes {
                      __anonstruct_Edge_3_existent_0_edges_30,
                      __anonstruct_Edge_3_from_edges_30,
                      __anonstruct_Edge_3_to_edges_30 }
                      ensures {
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                        "expl:Ensures clause"
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                         "expl:Ensures clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_30
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 111 12 39#
                         "expl:Ensures clause"
                         (not
                         ((=)
                         (Int32.to_int
                         (select !__anonstruct_Edge_3_existent_0_edges_30
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos2)))) (0))))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 112 12 39#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_30
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos))) f_2))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 113 12 41#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_30
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos2))) f2))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 110 12 38#
                        "expl:Ensures clause"
                        ((#"/home/debian/mfsp/examples/regions/graph_4.c" 114 12 37#
                         "expl:Ensures clause"
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_to_edges_30
                         (shift
                         (select __anonstruct_Graph_4_edges_graph_14 graph)
                         (Int32.to_int pos))) t_2))
                        /\
                        (#"/home/debian/mfsp/examples/regions/graph_4.c" 115 12 39#
                        "expl:Ensures clause"
                        (Int32.(=)
                        (select !__anonstruct_Edge_3_to_edges_30
                        (shift
                        (select __anonstruct_Graph_4_edges_graph_14 graph)
                        (Int32.to_int pos2))) t2))))))))))))) }
  
end

module Function_insert_edge_to_2graphs

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_edge_to_2graphs
  (graph1 : (pointer __anonstruct_Graph_4)) 
   (graph2 : (pointer __anonstruct_Graph_4)) 
    (pos_1 : Int32.t) 
     (f_1_0 : Int32.t) 
      (t_1_0 : Int32.t) 
       (__anonstruct_Edge_3_existent_0_edges_32 : ref (memory
        __anonstruct_Edge_3 Int32.t)) 
        (__anonstruct_Edge_3_to_edges_32 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Edge_3_from_edges_32 : ref (memory __anonstruct_Edge_3
          Int32.t)) 
          (__anonstruct_Vertex_2_vertices_35_alloc_table : (alloc_table
           __anonstruct_Vertex_2)) 
           (__anonstruct_Vertex_2_vertices_33_alloc_table : (alloc_table
            __anonstruct_Vertex_2)) 
            (__anonstruct_Graph_4_graph2_16_alloc_table : (alloc_table
             __anonstruct_Graph_4)) 
             (__anonstruct_Graph_4_graph1_15_alloc_table : (alloc_table
              __anonstruct_Graph_4)) 
              (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
               __anonstruct_Edge_3)) 
               (__anonstruct_Edge_3_edges_32_tag_table : (tag_table
                __anonstruct_Edge_3)) 
                (__anonstruct_Graph_4_esize_graph2_16 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_esize_graph1_15 : (memory
                  __anonstruct_Graph_4 Int32.t)) 
                  (__anonstruct_Graph_4_ecnt_graph2_16 : (memory
                   __anonstruct_Graph_4 Int32.t)) 
                   (__anonstruct_Graph_4_ecnt_graph1_15 : (memory
                    __anonstruct_Graph_4 Int32.t)) 
                    (__anonstruct_Graph_4_edges_graph2_16 : (memory
                     __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                     (__anonstruct_Graph_4_edges_graph1_15 : (memory
                      __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                      (__anonstruct_Graph_4_vsize_graph2_16 : (memory
                       __anonstruct_Graph_4 Int32.t)) 
                       (__anonstruct_Graph_4_vsize_graph1_15 : (memory
                        __anonstruct_Graph_4 Int32.t)) 
                        (__anonstruct_Graph_4_vertices_graph2_16 : (memory
                         __anonstruct_Graph_4 (pointer
                         __anonstruct_Vertex_2))) 
                         (__anonstruct_Graph_4_vertices_graph1_15 : (memory
                          __anonstruct_Graph_4 (pointer
                          __anonstruct_Vertex_2))) 
                          (__anonstruct_Vertex_2_existent_vertices_35 :
                           (memory __anonstruct_Vertex_2 Int32.t)) 
                           (__anonstruct_Vertex_2_existent_vertices_33 :
                            (memory __anonstruct_Vertex_2 Int32.t)) : unit
                            requires { true } reads {
                            __anonstruct_Edge_3_existent_0_edges_32,
                            __anonstruct_Edge_3_from_edges_32,
                            __anonstruct_Edge_3_to_edges_32 } writes {
                            __anonstruct_Edge_3_existent_0_edges_32,
                            __anonstruct_Edge_3_from_edges_32,
                            __anonstruct_Edge_3_to_edges_32 }
                            ensures { true }
  
end

module Function_insert_edge_to_2graphs_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val insert_edge_to_2graphs
  (graph1 : (pointer __anonstruct_Graph_4)) 
   (graph2 : (pointer __anonstruct_Graph_4)) 
    (pos_1 : Int32.t) 
     (f_1_0 : Int32.t) 
      (t_1_0 : Int32.t) 
       (__anonstruct_Edge_3_existent_0_edges_32 : ref (memory
        __anonstruct_Edge_3 Int32.t)) 
        (__anonstruct_Edge_3_to_edges_32 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Edge_3_from_edges_32 : ref (memory __anonstruct_Edge_3
          Int32.t)) 
          (__anonstruct_Vertex_2_vertices_35_alloc_table : (alloc_table
           __anonstruct_Vertex_2)) 
           (__anonstruct_Vertex_2_vertices_33_alloc_table : (alloc_table
            __anonstruct_Vertex_2)) 
            (__anonstruct_Graph_4_graph2_16_alloc_table : (alloc_table
             __anonstruct_Graph_4)) 
             (__anonstruct_Graph_4_graph1_15_alloc_table : (alloc_table
              __anonstruct_Graph_4)) 
              (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
               __anonstruct_Edge_3)) 
               (__anonstruct_Edge_3_edges_32_tag_table : (tag_table
                __anonstruct_Edge_3)) 
                (__anonstruct_Graph_4_esize_graph2_16 : (memory
                 __anonstruct_Graph_4 Int32.t)) 
                 (__anonstruct_Graph_4_esize_graph1_15 : (memory
                  __anonstruct_Graph_4 Int32.t)) 
                  (__anonstruct_Graph_4_ecnt_graph2_16 : (memory
                   __anonstruct_Graph_4 Int32.t)) 
                   (__anonstruct_Graph_4_ecnt_graph1_15 : (memory
                    __anonstruct_Graph_4 Int32.t)) 
                    (__anonstruct_Graph_4_edges_graph2_16 : (memory
                     __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                     (__anonstruct_Graph_4_edges_graph1_15 : (memory
                      __anonstruct_Graph_4 (pointer __anonstruct_Edge_3))) 
                      (__anonstruct_Graph_4_vsize_graph2_16 : (memory
                       __anonstruct_Graph_4 Int32.t)) 
                       (__anonstruct_Graph_4_vsize_graph1_15 : (memory
                        __anonstruct_Graph_4 Int32.t)) 
                        (__anonstruct_Graph_4_vertices_graph2_16 : (memory
                         __anonstruct_Graph_4 (pointer
                         __anonstruct_Vertex_2))) 
                         (__anonstruct_Graph_4_vertices_graph1_15 : (memory
                          __anonstruct_Graph_4 (pointer
                          __anonstruct_Vertex_2))) 
                          (__anonstruct_Vertex_2_existent_vertices_35 :
                           (memory __anonstruct_Vertex_2 Int32.t)) 
                           (__anonstruct_Vertex_2_existent_vertices_33 :
                            (memory __anonstruct_Vertex_2 Int32.t)) : unit
                            requires {
                              ("expl:Internal"
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 127 13 27#
                               "expl:Requires clause"
                               (#"graph_4_c.jc" 286 12 2751#
                               "expl:Requires clause"
                               ((#"graph_4_c.jc" 286 12 2751#
                                "expl:Requires clause"
                                ((<=)
                                (offset_min
                                __anonstruct_Graph_4_graph1_15_alloc_table
                                graph1) (0)))
                               /\
                               (#"graph_4_c.jc" 286 12 2751#
                               "expl:Requires clause"
                               ((#"graph_4_c.jc" 286 12 2751#
                                "expl:Requires clause"
                                ((>=)
                                (offset_max
                                __anonstruct_Graph_4_graph1_15_alloc_table
                                graph1) (0)))
                               /\
                               (#"graph_4_c.jc" 286 12 2751#
                               "expl:Requires clause" ((=) true true)))))))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 128 13 26#
                               "expl:Requires clause"
                               (valid_0 graph1
                               __anonstruct_Vertex_2_vertices_33_alloc_table
                               __anonstruct_Edge_3_edges_32_alloc_table
                               __anonstruct_Graph_4_esize_graph1_15
                               __anonstruct_Graph_4_ecnt_graph1_15
                               __anonstruct_Graph_4_edges_graph1_15
                               __anonstruct_Graph_4_vsize_graph1_15
                               __anonstruct_Graph_4_vertices_graph1_15
                               !__anonstruct_Edge_3_existent_0_edges_32
                               !__anonstruct_Edge_3_to_edges_32
                               !__anonstruct_Edge_3_from_edges_32
                               __anonstruct_Vertex_2_existent_vertices_33))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 129 13 21#
                               "expl:Requires clause"
                               (Int32.(<=) (#"graph_4_c.jc" 290 36 48#
                               "expl:Integer cast" (Int32.of_int (0))) pos_1))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 129 18 36#
                               "expl:Requires clause"
                               (Int32.(<) pos_1
                               (select __anonstruct_Graph_4_ecnt_graph1_15
                               graph1)))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 130 13 41#
                               "expl:Requires clause"
                               ((=)
                               (Int32.to_int
                               (select
                               !__anonstruct_Edge_3_existent_0_edges_32
                               (shift
                               (select __anonstruct_Graph_4_edges_graph1_15
                               graph1) (Int32.to_int pos_1)))) (0)))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 131 13 33#
                               "expl:Requires clause"
                               (is_vertex graph1 (Int32.to_int f_1_0)
                               __anonstruct_Graph_4_vsize_graph1_15))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 132 13 33#
                               "expl:Requires clause"
                               (is_vertex graph1 (Int32.to_int t_1_0)
                               __anonstruct_Graph_4_vsize_graph1_15))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 133 13 41#
                               "expl:Requires clause"
                               (not
                               ((=)
                               (Int32.to_int
                               (select
                               __anonstruct_Vertex_2_existent_vertices_33
                               (shift
                               (select
                               __anonstruct_Graph_4_vertices_graph1_15
                               graph1) (Int32.to_int f_1_0)))) (0))))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 134 13 41#
                               "expl:Requires clause"
                               (not
                               ((=)
                               (Int32.to_int
                               (select
                               __anonstruct_Vertex_2_existent_vertices_33
                               (shift
                               (select
                               __anonstruct_Graph_4_vertices_graph1_15
                               graph1) (Int32.to_int t_1_0)))) (0))))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 136 13 27#
                               "expl:Requires clause"
                               (#"graph_4_c.jc" 286 12 2751#
                               "expl:Requires clause"
                               ((#"graph_4_c.jc" 286 12 2751#
                                "expl:Requires clause"
                                ((<=)
                                (offset_min
                                __anonstruct_Graph_4_graph2_16_alloc_table
                                graph2) (0)))
                               /\
                               (#"graph_4_c.jc" 286 12 2751#
                               "expl:Requires clause"
                               ((#"graph_4_c.jc" 286 12 2751#
                                "expl:Requires clause"
                                ((>=)
                                (offset_max
                                __anonstruct_Graph_4_graph2_16_alloc_table
                                graph2) (0)))
                               /\
                               (#"graph_4_c.jc" 286 12 2751#
                               "expl:Requires clause" ((=) true true)))))))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 137 13 26#
                               "expl:Requires clause"
                               (valid_0 graph2
                               __anonstruct_Vertex_2_vertices_35_alloc_table
                               __anonstruct_Edge_3_edges_32_alloc_table
                               __anonstruct_Graph_4_esize_graph2_16
                               __anonstruct_Graph_4_ecnt_graph2_16
                               __anonstruct_Graph_4_edges_graph2_16
                               __anonstruct_Graph_4_vsize_graph2_16
                               __anonstruct_Graph_4_vertices_graph2_16
                               !__anonstruct_Edge_3_existent_0_edges_32
                               !__anonstruct_Edge_3_to_edges_32
                               !__anonstruct_Edge_3_from_edges_32
                               __anonstruct_Vertex_2_existent_vertices_35))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 138 13 21#
                               "expl:Requires clause"
                               (Int32.(<=) (#"graph_4_c.jc" 306 52 64#
                               "expl:Integer cast" (Int32.of_int (0))) pos_1))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 138 18 36#
                               "expl:Requires clause"
                               (Int32.(<) pos_1
                               (select __anonstruct_Graph_4_ecnt_graph2_16
                               graph2)))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 139 13 41#
                               "expl:Requires clause"
                               ((=)
                               (Int32.to_int
                               (select
                               !__anonstruct_Edge_3_existent_0_edges_32
                               (shift
                               (select __anonstruct_Graph_4_edges_graph2_16
                               graph2) (Int32.to_int pos_1)))) (0)))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 140 13 33#
                               "expl:Requires clause"
                               (is_vertex graph2 (Int32.to_int f_1_0)
                               __anonstruct_Graph_4_vsize_graph2_16))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 141 13 33#
                               "expl:Requires clause"
                               (is_vertex graph2 (Int32.to_int t_1_0)
                               __anonstruct_Graph_4_vsize_graph2_16))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 142 13 41#
                               "expl:Requires clause"
                               (not
                               ((=)
                               (Int32.to_int
                               (select
                               __anonstruct_Vertex_2_existent_vertices_35
                               (shift
                               (select
                               __anonstruct_Graph_4_vertices_graph2_16
                               graph2) (Int32.to_int f_1_0)))) (0))))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 143 13 41#
                               "expl:Requires clause"
                               (not
                               ((=)
                               (Int32.to_int
                               (select
                               __anonstruct_Vertex_2_existent_vertices_35
                               (shift
                               (select
                               __anonstruct_Graph_4_vertices_graph2_16
                               graph2) (Int32.to_int t_1_0)))) (0))))
                              /\
                              (#"graph_4_c.jc" 286 12 2751#
                              "expl:Requires clause"
                              ((#"/home/debian/mfsp/examples/regions/graph_4.c" 145 13 43#
                               "expl:Requires clause"
                               (not
                               ((=)
                               (select __anonstruct_Graph_4_edges_graph1_15
                               graph1)
                               (select __anonstruct_Graph_4_edges_graph2_16
                               graph2))))
                              /\
                              (#"/home/debian/mfsp/examples/regions/graph_4.c" 146 13 67#
                              "expl:Requires clause"
                              (not
                              (same_block
                              (select __anonstruct_Graph_4_edges_graph1_15
                              graph1)
                              (select __anonstruct_Graph_4_edges_graph2_16
                              graph2)))))))))))))))))))))))))))))))))))))))))))
                              }
                            reads { __anonstruct_Edge_3_existent_0_edges_32,
                            __anonstruct_Edge_3_from_edges_32,
                            __anonstruct_Edge_3_to_edges_32 } writes {
                            __anonstruct_Edge_3_existent_0_edges_32,
                            __anonstruct_Edge_3_from_edges_32,
                            __anonstruct_Edge_3_to_edges_32 }
                            ensures { true }
  
end
