
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

axiomatic Count {

  logic integer count{L}(intP[..] a, integer m, integer n_1, integer p)
   
  axiom count_base{L} :
  (_C_1 : (\forall intP[..] a_0;
            (\forall integer m_0;
              (\forall integer n_2;
                (\forall integer p_0;
                  ((m_0 >= n_2) ==> (count{L}(a_0, m_0, n_2, p_0) == 0)))))))
   
  axiom count_split{L} :
  (_C_2 : (\forall intP[..] a_1;
            (\forall integer m_1;
              (\forall integer n_3;
                (\forall integer k_1;
                  (\forall integer p_1;
                    (((m_1 <= n_3) && (n_3 <= k_1)) ==>
                      (count{L}(a_1, m_1, k_1, p_1) ==
                        (count{L}(a_1, m_1, n_3, p_1) +
                          count{L}(a_1, n_3, k_1, p_1))))))))))
   
  axiom count_one{L} :
  (_C_3 : (\forall intP[..] a_2;
            (\forall integer m_2;
              (\forall integer p_2;
                (count{L}(a_2, m_2, (m_2 + 1), p_2) ==
                  (if (((a_2 + m_2).intM :> integer) == p_2) then 1 else 0))))))
  
}

axiomatic Ordered {

  predicate ordered{L}(intP[..] a_3, integer m_3, integer n_4)
   
  axiom ordered_base{L} :
  (_C_4 : (\forall intP[..] a_4;
            (\forall integer m_4;
              (\forall integer n_5;
                ((m_4 >= n_5) ==> ordered{L}(a_4, m_4, n_5))))))
   
  axiom ordered_split{L} :
  (_C_5 : (\forall intP[..] a_5;
            (\forall integer m_5;
              (\forall integer k_2;
                (\forall integer n_6;
                  ((((m_5 <= n_6) && (n_6 <= k_2)) ==>
                     ordered{L}(a_5, m_5, k_2)) <==>
                    (ordered{L}(a_5, m_5, n_6) && ordered{L}(a_5, n_6, k_2))))))))
   
  axiom ordered_two{L} :
  (_C_6 : (\forall intP[..] a_6;
            (\forall integer m_6;
              (ordered{L}(a_6, m_6, (m_6 + 1)) <==>
                ((a_6 + m_6).intM <= (a_6 + (m_6 + 1)).intM)))))
  
}

predicate array_saved{L1, L2}(intP[..] a_7, integer m_7, integer n_7) =
(\forall integer k_3;
  (((m_7 <= k_3) && (k_3 <= n_7)) ==>
    (\at((a_7 + k_3).intM,L1) == \at((a_7 + k_3).intM,L2))))

predicate count_saved{L1, L2}(intP[..] a_8, integer m_8, integer n_8) =
(\forall integer p_3;
  (count{L1}(a_8, m_8, n_8, p_3) == count{L2}(a_8, m_8, n_8, p_3)))

lemma count_frame{L1, L2} :
(_C_7 : (\forall intP[..] a_9;
          (\forall integer m_9;
            (\forall integer n_9;
              (array_saved{L1,
                L2}(a_9, m_9, (n_9 - 1)) ==>
                count_saved{L1,
                L2}(a_9, m_9, n_9))))))

predicate minimum{L}(intP[..] a_10, integer m_10, integer n_10, integer k_4) =
\at((\forall integer i;
      (((m_10 <= i) && (i < n_10)) ==>
        ((a_10 + k_4).intM <= (a_10 + i).intM))),L)

unit sort(intP[..] a, int32 n_9)
  requires ((_C_62 : (n_9 >= (0 :> int32))) &&
             (_C_63 : \at((if (\at(0,Here) <=
                                \at(((n_9 :> integer) - 1),Here)) then 
                          (((\offset_min(\at(a,Here)) <= \at(0,Here)) &&
                             (\offset_max(\at(a,Here)) >=
                               \at(((n_9 :> integer) - 1),Here))) &&
                            (\forall integer __framac_tmp1;
                              (((\at(0,Here) <= __framac_tmp1) &&
                                 (__framac_tmp1 <=
                                   \at(((n_9 :> integer) - 1),Here))) ==>
                                true))) else true),Here)));
behavior default:
  ensures (_C_59 : ((_C_60 : ordered{Here}(\at(a,Old), 0,
                                           ((\at(n_9,Old) :> integer) - 1))) &&
                     (_C_61 : (\forall integer p_4;
                                (count{Here}(\at(a,Old), 0,
                                             (\at(n_9,Old) :> integer), p_4) ==
                                  count{Old}(\at(a,Old), 0,
                                             (\at(n_9,Old) :> integer), p_4))))));
{  
   (var int32 i);
   
   (var int32 min_pos);
   
   (var int32 j);
   
   (var int32 tmp);
   
   {  (_C_8 : (i = (0 :> int32)));
      
      loop 
      behavior default:
        invariant (_C_15 : ordered{Here}(a, 0, ((i :> integer) - 1)));
      behavior default:
        invariant (_C_14 : ((i > (0 :> int32)) ==>
                             minimum{Here}(a, (i :> integer),
                                           (n_9 :> integer),
                                           ((i :> integer) - 1))));
      behavior default:
        invariant (_C_13 : count_saved{Here, Pre}(a, 0, (n_9 :> integer)));
      behavior default:
        invariant (_C_10 : ((_C_11 : ((0 :> int32) <= i)) &&
                             (_C_12 : (i <= n_9))));
      variant (_C_9 : ((n_9 :> integer) - (i :> integer)));
      while (true)
      {  
         {  (if (_C_16 : (i < n_9)) then () else 
            (goto while_0_break));
            
            {  (_Liter : ());
               (_C_17 : (min_pos = i));
               
               {  (_C_20 : (j = (_C_19 : ((_C_18 : (i + (1 :> int32))) :> int32))));
                  
                  loop 
                  behavior default:
                    invariant (_C_28 : minimum{Here}(a, (i :> integer),
                                                     (j :> integer),
                                                     (min_pos :> integer)));
                  behavior default:
                    invariant (_C_25 : ((_C_26 : (i <= min_pos)) &&
                                         (_C_27 : (min_pos < n_9))));
                  behavior default:
                    invariant (_C_22 : ((_C_23 : (((i :> integer) + 1) <=
                                                   (j :> integer))) &&
                                         (_C_24 : (j <= n_9))));
                  variant (_C_21 : ((n_9 :> integer) - (j :> integer)));
                  while (true)
                  {  
                     {  (if (_C_29 : (j < n_9)) then () else 
                        (goto while_1_break));
                        
                        {  (if (_C_35 : ((_C_34 : (_C_33 : (a + j)).intM) <
                                          (_C_32 : (_C_31 : (a + min_pos)).intM))) then 
                           (_C_30 : (min_pos = j)) else ())
                        };
                        (_C_38 : (j = (_C_37 : ((_C_36 : (j + (1 :> int32))) :> int32))))
                     }
                  };
                  (while_1_break : ())
               };
               (if (_C_55 : (min_pos != i)) then 
               {  
                  {  
                     (assert for default: (_C_39 : (astraver : (\forall integer p;
                                                                 ((((count{Here}(
                                                                    a, 0,
                                                                    (n_9 :> integer),
                                                                    p) ==
                                                                    (count{Here}(
                                                                    a, 0,
                                                                    (i :> integer),
                                                                    p) +
                                                                    count{Here}(
                                                                    a,
                                                                    (i :> integer),
                                                                    (n_9 :> integer),
                                                                    p))) &&
                                                                    (count{Here}(
                                                                    a,
                                                                    (i :> integer),
                                                                    (n_9 :> integer),
                                                                    p) ==
                                                                    (count{Here}(
                                                                    a,
                                                                    (i :> integer),
                                                                    ((i :> integer) +
                                                                    1), p) +
                                                                    count{Here}(
                                                                    a,
                                                                    ((i :> integer) +
                                                                    1),
                                                                    (n_9 :> integer),
                                                                    p)))) &&
                                                                    (count{Here}(
                                                                    a,
                                                                    ((i :> integer) +
                                                                    1),
                                                                    (n_9 :> integer),
                                                                    p) ==
                                                                    (count{Here}(
                                                                    a,
                                                                    ((i :> integer) +
                                                                    1),
                                                                    (min_pos :> integer),
                                                                    p) +
                                                                    count{Here}(
                                                                    a,
                                                                    (min_pos :> integer),
                                                                    (n_9 :> integer),
                                                                    p)))) &&
                                                                   (count{Here}(
                                                                    a,
                                                                    (min_pos :> integer),
                                                                    (n_9 :> integer),
                                                                    p) ==
                                                                    (count{Here}(
                                                                    a,
                                                                    (min_pos :> integer),
                                                                    ((min_pos :> integer) +
                                                                    1), p) +
                                                                    count{Here}(
                                                                    a,
                                                                    ((min_pos :> integer) +
                                                                    1),
                                                                    (n_9 :> integer),
                                                                    p))))))));
                     ()
                  };
                  (_C_42 : (tmp = (_C_41 : (_C_40 : (a + min_pos)).intM)));
                  (_C_47 : ((_C_46 : (_C_45 : (a + min_pos)).intM) = 
                  (_C_44 : (_C_43 : (a + i)).intM)));
                  (_C_50 : ((_C_49 : (_C_48 : (a + i)).intM) = tmp));
                  
                  {  
                     (assert for default: (_C_51 : (astraver : (array_saved{Here,
                                                                 _Liter}(
                                                                 a,
                                                                 ((i :> integer) +
                                                                   1),
                                                                 ((min_pos :> integer) -
                                                                   1)) ==>
                                                                 count_saved{Here,
                                                                 _Liter}(
                                                                 a,
                                                                 ((i :> integer) +
                                                                   1),
                                                                 (min_pos :> integer))))));
                     ()
                  };
                  
                  {  
                     (assert for default: (_C_52 : (astraver : (array_saved{Here,
                                                                 _Liter}(
                                                                 a,
                                                                 ((min_pos :> integer) +
                                                                   1),
                                                                 ((n_9 :> integer) -
                                                                   1)) ==>
                                                                 count_saved{Here,
                                                                 _Liter}(
                                                                 a,
                                                                 ((min_pos :> integer) +
                                                                   1),
                                                                 (n_9 :> integer))))));
                     ()
                  };
                  
                  {  
                     (assert for default: (_C_53 : (astraver : (\forall integer p;
                                                                 ((count{Here}(
                                                                    a,
                                                                    (min_pos :> integer),
                                                                    ((min_pos :> integer) +
                                                                    1), p) ==
                                                                    count{_Liter}(
                                                                    a,
                                                                    (i :> integer),
                                                                    ((i :> integer) +
                                                                    1), p)) &&
                                                                   (count{_Liter}(
                                                                    a,
                                                                    (min_pos :> integer),
                                                                    ((min_pos :> integer) +
                                                                    1), p) ==
                                                                    count{Here}(
                                                                    a,
                                                                    (i :> integer),
                                                                    ((i :> integer) +
                                                                    1), p)))))));
                     ()
                  };
                  
                  {  
                     (assert for default: (_C_54 : (astraver : (\forall integer p;
                                                                 ((((count{Here}(
                                                                    a, 0,
                                                                    (n_9 :> integer),
                                                                    p) ==
                                                                    (count{Here}(
                                                                    a, 0,
                                                                    (i :> integer),
                                                                    p) +
                                                                    count{Here}(
                                                                    a,
                                                                    (i :> integer),
                                                                    (n_9 :> integer),
                                                                    p))) &&
                                                                    (count{Here}(
                                                                    a,
                                                                    (i :> integer),
                                                                    (n_9 :> integer),
                                                                    p) ==
                                                                    (count{Here}(
                                                                    a,
                                                                    (i :> integer),
                                                                    ((i :> integer) +
                                                                    1), p) +
                                                                    count{Here}(
                                                                    a,
                                                                    ((i :> integer) +
                                                                    1),
                                                                    (n_9 :> integer),
                                                                    p)))) &&
                                                                    (count{Here}(
                                                                    a,
                                                                    ((i :> integer) +
                                                                    1),
                                                                    (n_9 :> integer),
                                                                    p) ==
                                                                    (count{Here}(
                                                                    a,
                                                                    ((i :> integer) +
                                                                    1),
                                                                    (min_pos :> integer),
                                                                    p) +
                                                                    count{Here}(
                                                                    a,
                                                                    (min_pos :> integer),
                                                                    (n_9 :> integer),
                                                                    p)))) &&
                                                                   (count{Here}(
                                                                    a,
                                                                    (min_pos :> integer),
                                                                    (n_9 :> integer),
                                                                    p) ==
                                                                    (count{Here}(
                                                                    a,
                                                                    (min_pos :> integer),
                                                                    ((min_pos :> integer) +
                                                                    1), p) +
                                                                    count{Here}(
                                                                    a,
                                                                    ((min_pos :> integer) +
                                                                    1),
                                                                    (n_9 :> integer),
                                                                    p))))))));
                     ()
                  }
               } else ())
            };
            (_C_58 : (i = (_C_57 : ((_C_56 : (i + (1 :> int32))) :> int32))))
         }
      };
      (while_0_break : ());
      
      (return ())
   }
}
