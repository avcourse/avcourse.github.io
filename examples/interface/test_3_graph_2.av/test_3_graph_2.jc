
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag __anonstruct_Vertex_2 = voidP with {
  padding padding_1: 32; 
  int32 existent: 32;
}

tag __anonstruct_Edge_3 = voidP with {
  int32 from: 32; 
  int32 to: 32; 
  int32 existent_0: 32;
}

tag __anonstruct_Graph_4 = voidP with {
  __anonstruct_Vertex_2[..] vertices: 64; 
  int32 vsize: 32; 
  padding padding_2: 32; 
  __anonstruct_Edge_3[..] edges: 64; 
  int32 ecnt: 32; 
  int32 esize: 32;
}

predicate is_vertex{L}(__anonstruct_Graph_4[..] g, integer v) =
\at(((0 <= v) && (v < (g.vsize :> integer))),L)

predicate edge_valid{L}(__anonstruct_Graph_4[..] g_0, integer k_1) =
\at(((! ((g_0.edges + k_1).existent_0 == 0)) ==>
      (((is_vertex{L}(g_0, ((g_0.edges + k_1).from :> integer)) &&
          is_vertex{L}(g_0, ((g_0.edges + k_1).to :> integer))) &&
         (! ((g_0.vertices + ((g_0.edges + k_1).from :> integer)).existent ==
              0))) &&
        (! ((g_0.vertices + ((g_0.edges + k_1).to :> integer)).existent == 0)))),L)

predicate edges_valid{L}(__anonstruct_Graph_4[..] g_1, integer n_1) =
\at((\forall integer k_2;
      (((0 <= k_2) && (k_2 < n_1)) ==> edge_valid{L}(g_1, k_2))),L)

predicate valid{L}(__anonstruct_Graph_4[..] g_2) =
\at(((((((((g_2.vsize > (0 :> int32)) && (g_2.esize > (0 :> int32))) &&
           (g_2.esize >= g_2.ecnt)) &&
          (g_2.ecnt >= (0 :> int32))) &&
         \at((if (\at(0,L) <= \at(((g_2.vsize :> integer) - 1),L)) then 
             (((\offset_min(\at(g_2.vertices,L)) <= \at(0,L)) &&
                (\offset_max(\at(g_2.vertices,L)) >=
                  \at(((g_2.vsize :> integer) - 1),L))) &&
               (\forall integer __framac_tmp2;
                 (((\at(0,L) <= __framac_tmp2) &&
                    (__framac_tmp2 <= \at(((g_2.vsize :> integer) - 1),L))) ==>
                   true))) else true),L)) &&
        \at((if (\at(0,L) <= \at(((g_2.esize :> integer) - 1),L)) then 
            (((\offset_min(\at(g_2.edges,L)) <= \at(0,L)) &&
               (\offset_max(\at(g_2.edges,L)) >=
                 \at(((g_2.esize :> integer) - 1),L))) &&
              (\forall integer __framac_tmp1;
                (((\at(0,L) <= __framac_tmp1) &&
                   (__framac_tmp1 <= \at(((g_2.esize :> integer) - 1),L))) ==>
                  true))) else true),L)) &&
       edges_valid{L}(g_2, (g_2.ecnt :> integer))) &&
      (\forall integer k_3;
        ((((g_2.ecnt :> integer) <= k_3) && (k_3 < (g_2.esize :> integer))) ==>
          ((g_2.edges + k_3).existent_0 == 0)))),L)

predicate edge_saved{L1, L2}(__anonstruct_Graph_4[..] g_3, integer k_4) =
((\at((g_3.edges + k_4).from,L1) == \at((g_3.edges + k_4).from,L2)) &&
  ((\at((g_3.edges + k_4).to,L1) == \at((g_3.edges + k_4).to,L2)) &&
    (\at((g_3.edges + k_4).existent_0,L1) ==
      \at((g_3.edges + k_4).existent_0,L2))))

predicate edges_saved{L1, L2}(__anonstruct_Graph_4[..] g_4, integer m,
                              integer n_2) =
(\forall integer k_5;
  (((m <= k_5) && (k_5 < n_2)) ==> edge_saved{L1, L2}(g_4, k_5)))

predicate full{L}(__anonstruct_Graph_4[..] g_5) =
\at(range_existent(g_5, 0, (g_5.esize :> integer)),L)

predicate range_existent{L}(__anonstruct_Graph_4[..] g_6, integer m_0,
                            integer n_3) =
\at((\forall integer k_6;
      (((m_0 <= k_6) && (k_6 < n_3)) ==>
        (! ((g_6.edges + k_6).existent_0 == 0)))),L)

axiomatic EdgesCount {

  logic integer count{L}(__anonstruct_Graph_4[..] g_7, integer f, integer t,
                         integer m_1, integer n_4)
   
  logic integer all_count{L}(__anonstruct_Graph_4[..] g_8, integer f_0,
                             integer t_0) =
  \at(count{L}(g_8, f_0, t_0, 0, (g_8.esize :> integer)),L)
   
  predicate count_saved{L1, L2}(__anonstruct_Graph_4[..] g_9, integer f_1,
                                integer t_1, integer m_2, integer n_5) =
  (count{L1}(g_9, f_1, t_1, m_2, n_5) == count{L2}(g_9, f_1, t_1, m_2, n_5))
   
  axiom count_zero{L} :
  (_C_1 : (\forall __anonstruct_Graph_4[..] g_10;
            (\forall integer f_2;
              (\forall integer t_2;
                (\forall integer m_3;
                  (\forall integer n_6;
                    ((m_3 >= n_6) ==>
                      (count{L}(g_10, f_2, t_2, m_3, n_6) == 0))))))))
   
  axiom count_one{L} :
  (_C_2 : (\forall __anonstruct_Graph_4[..] g_11;
            (\forall integer f_3;
              (\forall integer t_3;
                (\forall integer m_4;
                  (count{L}(g_11, f_3, t_3, m_4, (m_4 + 1)) ==
                    (if (((((g_11.edges + m_4).existent_0 :> integer) != 0) &&
                           (((g_11.edges + m_4).from :> integer) == f_3)) &&
                          (((g_11.edges + m_4).to :> integer) == t_3)) then 1 else 0)))))))
   
  axiom count_split{L} :
  (_C_3 : (\forall __anonstruct_Graph_4[..] g_12;
            (\forall integer f_4;
              (\forall integer t_4;
                (\forall integer m_5;
                  (\forall integer n_7;
                    (\forall integer k_7;
                      (((m_5 <= n_7) && (n_7 <= k_7)) ==>
                        (count{L}(g_12, f_4, t_4, m_5, k_7) ==
                          (count{L}(g_12, f_4, t_4, m_5, n_7) +
                            count{L}(g_12, f_4, t_4, n_7, k_7)))))))))))
   
  axiom count_saved_ax{L1, L2} :
  (_C_4 : (\forall __anonstruct_Graph_4[..] g_13;
            (\forall integer f_5;
              (\forall integer t_5;
                (\forall integer m_6;
                  (\forall integer n_8;
                    (edges_saved{L1,
                      L2}(g_13, m_6, n_8) ==>
                      count_saved{L1,
                      L2}(g_13, f_5, t_5, m_6, n_8))))))))
  
}

unit test1()
behavior default:
  ensures true;
{  
   (var __anonstruct_Graph_4[..] g);
   
   {  (_C_6 : (g = (_C_5 : graph_create())));
      (if (_C_7 : (! (g != null))) then 
      (goto return_label) else ());
      (_C_8 : graph_destroy(g));
      
      {  
         (assert for default: (_C_9 : (astraver : \allocable{Here}(g.vertices))));
         ()
      };
      
      {  
         (assert for default: (_C_10 : (astraver : \freeable{Here}(g.vertices))));
         ()
      };
      
      {  
         (assert for default: (_C_11 : (astraver : (! (0 == 0)))));
         ()
      };
      (return_label : 
      (return ()))
   }
}

__anonstruct_Graph_4[..] graph_create()
behavior default:
  ensures (_C_73 : ((! (\result == null)) ==>
                     ((((((((valid{Here}(\result) &&
                              \at((((\offset_min(\at(\result,Here)) <=
                                      \at(0,Here)) &&
                                     (\offset_max(\at(\result,Here)) >=
                                       \at(0,Here))) &&
                                    true),Here)) &&
                             \freeable{Here}(\result)) &&
                            \freeable{Here}(\result.vertices)) &&
                           \freeable{Here}(\result.edges)) &&
                          \allocable{Old}(\result)) &&
                         \allocable{Old}(\result.vertices)) &&
                        \allocable{Old}(\result.edges)) &&
                       (\result.ecnt == (0 :> int32)))));
{  
   (var __anonstruct_Graph_4[..] g_0);
   
   (var __anonstruct_Graph_4[..] tmp_0);
   
   (var int32 i);
   
   (var int32 i_0);
   
   (var __anonstruct_Graph_4[..] __retres);
   
   {  (_C_13 : (g_0 = (_C_12 : (new __anonstruct_Graph_4[1]))));
      (if (_C_15 : (! (g_0 != null))) then 
      {  (_C_14 : (__retres = null));
         
         (goto return_label_0)
      } else ());
      (_C_17 : ((_C_16 : g_0.vsize) = (1024 :> int32)));
      (_C_22 : ((_C_21 : g_0.vertices) = (_C_20 : (new __anonstruct_Vertex_2[
                                         (_C_19 : ((_C_18 : g_0.vsize) :> uint64))]))));
      (if (_C_26 : (! ((_C_25 : g_0.vertices) != null))) then 
      {  (_C_23 : (free(g_0)));
         
         {  (_C_24 : (__retres = null));
            
            (goto return_label_0)
         }
      } else ());
      (_C_28 : ((_C_27 : g_0.esize) = (1024 :> int32)));
      (_C_30 : ((_C_29 : g_0.ecnt) = (0 :> int32)));
      (_C_35 : ((_C_34 : g_0.edges) = (_C_33 : (new __anonstruct_Edge_3[
                                      (_C_32 : ((_C_31 : g_0.esize) :> uint64))]))));
      (if (_C_41 : (! ((_C_40 : g_0.edges) != null))) then 
      {  (_C_37 : (free((_C_36 : g_0.vertices))));
         (_C_38 : (free(g_0)));
         
         {  (_C_39 : (__retres = null));
            
            (goto return_label_0)
         }
      } else ());
      
      {  (_C_42 : (i = (0 :> int32)));
         (LoopEntry : 
         loop 
         behavior default:
           invariant (_C_47 : (\forall integer k_8;
                                (((0 <= k_8) && (k_8 < (i :> integer))) ==>
                                  ((g_0.vertices + k_8).existent == 0))));
         behavior default:
           invariant (_C_44 : ((_C_45 : ((0 :> int32) <= i)) &&
                                (_C_46 : (i <= g_0.vsize))));
         variant (_C_43 : ((g_0.vsize :> integer) - (i :> integer)));
         while (true)
         {  
            {  (LoopCurrent : (if (_C_49 : (i < (_C_48 : g_0.vsize))) then () else 
                              (goto while_0_break)));
               (_C_53 : ((_C_52 : (_C_51 : ((_C_50 : g_0.vertices) + i)).existent) = (0 :> int32)));
               (_C_56 : (i = (_C_55 : ((_C_54 : (i + (1 :> int32))) :> int32))))
            }
         });
         (while_0_break : ())
      };
      
      {  (_C_57 : (i_0 = (0 :> int32)));
         (LoopEntry : 
         loop 
         behavior default:
           invariant (_C_62 : (\forall integer k_9;
                                (((0 <= k_9) && (k_9 < (i_0 :> integer))) ==>
                                  ((g_0.edges + k_9).existent_0 == 0))));
         behavior default:
           invariant (_C_59 : ((_C_60 : ((0 :> int32) <= i_0)) &&
                                (_C_61 : (i_0 <= g_0.esize))));
         variant (_C_58 : ((g_0.esize :> integer) - (i_0 :> integer)));
         while (true)
         {  
            {  (LoopCurrent : (if (_C_64 : (i_0 < (_C_63 : g_0.esize))) then () else 
                              (goto while_0_break_0)));
               (_C_68 : ((_C_67 : (_C_66 : ((_C_65 : g_0.edges) + i_0)).existent_0) = (0 :> int32)));
               (_C_71 : (i_0 = (_C_70 : ((_C_69 : (i_0 + (1 :> int32))) :> int32))))
            }
         });
         (while_0_break_0 : ())
      };
      (_C_72 : (__retres = g_0));
      (return_label_0 : 
      (return __retres))
   }
}

unit graph_destroy(__anonstruct_Graph_4[..] graph)
  requires ((_C_84 : valid{Here}(graph)) &&
             ((_C_85 : \at((((\offset_min(\at(graph,Here)) <= \at(0,Here)) &&
                              (\offset_max(\at(graph,Here)) >= \at(0,Here))) &&
                             true),Here)) &&
               ((_C_86 : \freeable{Here}(graph)) &&
                 ((_C_87 : \freeable{Here}(graph.vertices)) &&
                   (_C_88 : \freeable{Here}(graph.edges))))));
behavior default:
  ensures (_C_79 : ((_C_80 : \allocable{Here}(\at(graph,Old))) &&
                     ((_C_82 : \allocable{Here}(\at(graph.vertices,Old))) &&
                       (_C_83 : \allocable{Here}(\at(graph.edges,Old))))));
{  
   {  (_C_75 : (free((_C_74 : graph.edges))));
      (_C_77 : (free((_C_76 : graph.vertices))));
      (_C_78 : (free(graph)));
      
      (return ())
   }
}
