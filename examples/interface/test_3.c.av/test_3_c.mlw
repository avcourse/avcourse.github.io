
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_unsafe

  use why3.Bool.Bool 
  
end

theory Root___anonstruct_Graph_4

  use why3.Bool.Bool 
  
  type __anonstruct_Graph_4 
  
end

theory Root___anonstruct_Edge_3

  use why3.Bool.Bool 
  
  type __anonstruct_Edge_3 
  
end

theory Logic_edge_saved

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate edge_saved (g_3 : (pointer __anonstruct_Graph_4)) (k_4 : int)
  (__anonstruct_Graph_4_edges_g_3_6_at_L2 : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_edges_g_3_6_at_L1 :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_19_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_19_at_L1 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_19_at_L2 :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_to_edges_19_at_L1 : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_from_edges_19_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_19_at_L1 :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((Int32.(=)
      (select __anonstruct_Edge_3_from_edges_19_at_L1
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L1 g_3) k_4))
      (select __anonstruct_Edge_3_from_edges_19_at_L2
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L2 g_3) k_4)))
     /\
     ((Int32.(=)
      (select __anonstruct_Edge_3_to_edges_19_at_L1
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L1 g_3) k_4))
      (select __anonstruct_Edge_3_to_edges_19_at_L2
      (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L2 g_3) k_4)))
     /\
     (Int32.(=)
     (select __anonstruct_Edge_3_existent_0_edges_19_at_L1
     (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L1 g_3) k_4))
     (select __anonstruct_Edge_3_existent_0_edges_19_at_L2
     (shift (select __anonstruct_Graph_4_edges_g_3_6_at_L2 g_3) k_4)))))
  
  
end

theory Logic_edges_saved

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edge_saved 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edges_saved (g_4 : (pointer __anonstruct_Graph_4)) (m : int) (n_2
  : int) (__anonstruct_Graph_4_edges_g_4_7_at_L2 : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Graph_4_edges_g_4_7_at_L1 : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_51_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_51_at_L1 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_51_at_L2 :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_to_edges_51_at_L1 : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_from_edges_51_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_51_at_L1 :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     (forall k_5 : int.
      ((((<=) m k_5) /\ ((<) k_5 n_2)) ->
       (edge_saved g_4 k_5 __anonstruct_Graph_4_edges_g_4_7_at_L2
       __anonstruct_Graph_4_edges_g_4_7_at_L1
       __anonstruct_Edge_3_existent_0_edges_51_at_L2
       __anonstruct_Edge_3_existent_0_edges_51_at_L1
       __anonstruct_Edge_3_to_edges_51_at_L2
       __anonstruct_Edge_3_to_edges_51_at_L1
       __anonstruct_Edge_3_from_edges_51_at_L2
       __anonstruct_Edge_3_from_edges_51_at_L1)))
  
  
end

theory Axiomatic_EdgesCount

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edges_saved 
  
  use enum.Int32 
  
  use import int.Int 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  function count (pointer __anonstruct_Graph_4) int int int int (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)) (memory
  __anonstruct_Edge_3 Int32.t) (memory __anonstruct_Edge_3 Int32.t) (memory
  __anonstruct_Edge_3 Int32.t) : int
  
  
  axiom Count_zero
  #"/home/debian/mfsp/examples/interface/graph_1.h" 58 65 180#
  "expl:Axiom count_zero"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_23_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_23_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_23_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/debian/mfsp/examples/interface/graph_1.h" 60 26 112#
      (forall g_10 : (pointer __anonstruct_Graph_4).
       (forall f_2 : int.
        (forall t_2 : int.
         (forall m_3 : int.
          (forall n_6 : int.
           (((>=) m_3 n_6) ->
            ((=)
            (count g_10 f_2 t_2 m_3 n_6
            __anonstruct_Graph_4_edges_g_7_10_at_L
            __anonstruct_Edge_3_existent_0_edges_23_at_L
            __anonstruct_Edge_3_to_edges_23_at_L
            __anonstruct_Edge_3_from_edges_23_at_L) (0)))))))))))))
  
  axiom Count_one
  #"/home/debian/mfsp/examples/interface/graph_1.h" 61 38 219#
  "expl:Axiom count_one"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_23_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_23_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_23_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/debian/mfsp/examples/interface/graph_1.h" 63 25 178#
      (forall g_11 : (pointer __anonstruct_Graph_4).
       (forall f_3 : int.
        (forall t_3 : int.
         (forall m_4 : int.
          ((=)
          (count g_11 f_3 t_3 m_4 (Int.(+) m_4 (1))
          __anonstruct_Graph_4_edges_g_7_10_at_L
          __anonstruct_Edge_3_existent_0_edges_23_at_L
          __anonstruct_Edge_3_to_edges_23_at_L
          __anonstruct_Edge_3_from_edges_23_at_L)
          (if
           (Bool.andb
           (Bool.andb
           ((<>)
           (Int32.to_int
           (select __anonstruct_Edge_3_existent_0_edges_23_at_L
           (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4)))
           (0))
           ((=)
           (Int32.to_int
           (select __anonstruct_Edge_3_from_edges_23_at_L
           (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4)))
           f_3))
           ((=)
           (Int32.to_int
           (select __anonstruct_Edge_3_to_edges_23_at_L
           (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4)))
           t_3)) then (1) else (0))))))))))))
  
  axiom Count_split
  #"/home/debian/mfsp/examples/interface/graph_1.h" 64 119 285#
  "expl:Axiom count_split"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_23_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_23_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_23_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/debian/mfsp/examples/interface/graph_1.h" 66 27 163#
      (forall g_12 : (pointer __anonstruct_Graph_4).
       (forall f_4 : int.
        (forall t_4 : int.
         (forall m_5 : int.
          (forall n_7 : int.
           (forall k_7 : int.
            ((((<=) m_5 n_7) /\ ((<=) n_7 k_7)) ->
             ((=)
             (count g_12 f_4 t_4 m_5 k_7
             __anonstruct_Graph_4_edges_g_7_10_at_L
             __anonstruct_Edge_3_existent_0_edges_23_at_L
             __anonstruct_Edge_3_to_edges_23_at_L
             __anonstruct_Edge_3_from_edges_23_at_L)
             (Int.(+)
             (count g_12 f_4 t_4 m_5 n_7
             __anonstruct_Graph_4_edges_g_7_10_at_L
             __anonstruct_Edge_3_existent_0_edges_23_at_L
             __anonstruct_Edge_3_to_edges_23_at_L
             __anonstruct_Edge_3_from_edges_23_at_L)
             (count g_12 f_4 t_4 n_7 k_7
             __anonstruct_Graph_4_edges_g_7_10_at_L
             __anonstruct_Edge_3_existent_0_edges_23_at_L
             __anonstruct_Edge_3_to_edges_23_at_L
             __anonstruct_Edge_3_from_edges_23_at_L)))))))))))))))
  
  predicate count_saved (g_9 : (pointer __anonstruct_Graph_4)) (f_1 : int)
  (t_1 : int) (m_2 : int) (n_5 : int)
  (__anonstruct_Graph_4_edges_g_7_10_at_L2 : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_edges_g_7_10_at_L1 :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_23_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_23_at_L1 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_23_at_L2 :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_to_edges_23_at_L1 : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_from_edges_23_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_23_at_L1 :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((=)
     (count g_9 f_1 t_1 m_2 n_5 __anonstruct_Graph_4_edges_g_7_10_at_L1
     __anonstruct_Edge_3_existent_0_edges_23_at_L1
     __anonstruct_Edge_3_to_edges_23_at_L1
     __anonstruct_Edge_3_from_edges_23_at_L1)
     (count g_9 f_1 t_1 m_2 n_5 __anonstruct_Graph_4_edges_g_7_10_at_L2
     __anonstruct_Edge_3_existent_0_edges_23_at_L2
     __anonstruct_Edge_3_to_edges_23_at_L2
     __anonstruct_Edge_3_from_edges_23_at_L2))
  
  
  axiom Count_saved_ax
  #"/home/debian/mfsp/examples/interface/graph_1.h" 67 80 238#
  "expl:Axiom count_saved_ax"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L2 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Graph_4_edges_g_7_10_at_L1 : (memory
    __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
    (forall __anonstruct_Edge_3_existent_0_edges_23_at_L2 : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_existent_0_edges_23_at_L1 : (memory
      __anonstruct_Edge_3 Int32.t).
      (forall __anonstruct_Edge_3_to_edges_23_at_L2 : (memory
       __anonstruct_Edge_3 Int32.t).
       (forall __anonstruct_Edge_3_to_edges_23_at_L1 : (memory
        __anonstruct_Edge_3 Int32.t).
        (forall __anonstruct_Edge_3_from_edges_23_at_L2 : (memory
         __anonstruct_Edge_3 Int32.t).
         (forall __anonstruct_Edge_3_from_edges_23_at_L1 : (memory
          __anonstruct_Edge_3 Int32.t).
          (#"/home/debian/mfsp/examples/interface/graph_1.h" 69 38 155#
          (forall g_13 : (pointer __anonstruct_Graph_4).
           (forall f_5 : int.
            (forall t_5 : int.
             (forall m_6 : int.
              (forall n_8 : int.
               ((edges_saved g_13 m_6 n_8
                __anonstruct_Graph_4_edges_g_7_10_at_L2
                __anonstruct_Graph_4_edges_g_7_10_at_L1
                __anonstruct_Edge_3_existent_0_edges_23_at_L2
                __anonstruct_Edge_3_existent_0_edges_23_at_L1
                __anonstruct_Edge_3_to_edges_23_at_L2
                __anonstruct_Edge_3_to_edges_23_at_L1
                __anonstruct_Edge_3_from_edges_23_at_L2
                __anonstruct_Edge_3_from_edges_23_at_L1) ->
                (count_saved g_13 f_5 t_5 m_6 n_8
                __anonstruct_Graph_4_edges_g_7_10_at_L2
                __anonstruct_Graph_4_edges_g_7_10_at_L1
                __anonstruct_Edge_3_existent_0_edges_23_at_L2
                __anonstruct_Edge_3_existent_0_edges_23_at_L1
                __anonstruct_Edge_3_to_edges_23_at_L2
                __anonstruct_Edge_3_to_edges_23_at_L1
                __anonstruct_Edge_3_from_edges_23_at_L2
                __anonstruct_Edge_3_from_edges_23_at_L1))))))))))))))))
  
  function all_count (g_8 : (pointer __anonstruct_Graph_4)) (f_0 : int) (t_0
  : int) (__anonstruct_Graph_4_esize_g_8_11_at_L : (memory
  __anonstruct_Graph_4 Int32.t)) (__anonstruct_Graph_4_edges_g_8_11_at_L :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_79_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_79_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_79_at_L :
  (memory __anonstruct_Edge_3 Int32.t)) : int
  =
     (count g_8 f_0 t_0 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_8_11_at_L g_8))
     __anonstruct_Graph_4_edges_g_8_11_at_L
     __anonstruct_Edge_3_existent_0_edges_79_at_L
     __anonstruct_Edge_3_to_edges_79_at_L
     __anonstruct_Edge_3_from_edges_79_at_L)
  
  
end

theory Root___anonstruct_Vertex_2

  use why3.Bool.Bool 
  
  type __anonstruct_Vertex_2 
  
end

theory Logic_is_vertex

  use import Root___anonstruct_Graph_4 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate is_vertex (g : (pointer __anonstruct_Graph_4)) (v : int)
  (__anonstruct_Graph_4_vsize_g_2_at_L : (memory __anonstruct_Graph_4
  Int32.t))
  =
     (((<=) (0) v) /\
     ((<) v (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_at_L g))))
  
  
end

theory Logic_edge_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edge_valid (g_0 : (pointer __anonstruct_Graph_4)) (k_1 : int)
  (__anonstruct_Graph_4_edges_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_0_3_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_15_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_15_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_15_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_16_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((not
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_existent_0_edges_15_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))) (0)))
      ->
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_15_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_to_edges_15_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((not
       ((=)
       (Int32.to_int
       (select __anonstruct_Vertex_2_existent_vertices_16_at_L
       (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_15_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
       (0)))
      /\
      (not
      ((=)
      (Int32.to_int
      (select __anonstruct_Vertex_2_existent_vertices_16_at_L
      (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
      (Int32.to_int
      (select __anonstruct_Edge_3_to_edges_15_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
      (0)))))))
  
  
end

theory Logic_edges_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edge_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edges_valid (g_1 : (pointer __anonstruct_Graph_4)) (n_1 : int)
  (__anonstruct_Graph_4_edges_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_1_4_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_39_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_39_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_39_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_40_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     (forall k_2 : int.
      ((((<=) (0) k_2) /\ ((<) k_2 n_1)) ->
       (edge_valid g_1 k_2 __anonstruct_Graph_4_edges_g_1_4_at_L
       __anonstruct_Graph_4_vsize_g_1_4_at_L
       __anonstruct_Graph_4_vertices_g_1_4_at_L
       __anonstruct_Edge_3_existent_0_edges_39_at_L
       __anonstruct_Edge_3_to_edges_39_at_L
       __anonstruct_Edge_3_from_edges_39_at_L
       __anonstruct_Vertex_2_existent_vertices_40_at_L)))
  
  
end

theory Logic_valid_0

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edges_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  predicate valid_0 (g_2 : (pointer __anonstruct_Graph_4))
  (__anonstruct_Vertex_2_vertices_17_alloc_table_at_L : (alloc_table
  __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_18_alloc_table_at_L :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Graph_4_esize_g_2_5_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_ecnt_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_edges_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Graph_4_vsize_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_vertices_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_18_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_18_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_18_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_17_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((Int32.(>) (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)
      (#"test_3_c.jc" 59 24 36# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (#"test_3_c.jc" 59 54 66# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)
      (#"test_3_c.jc" 61 23 35# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Vertex_2_vertices_17_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Vertex_2_vertices_17_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp2 : int.
        ((((<=) (0) __framac_tmp2) /\
         ((<=) __framac_tmp2
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Edge_3_edges_18_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Edge_3_edges_18_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp1 : int.
        ((((<=) (0) __framac_tmp1) /\
         ((<=) __framac_tmp1
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((edges_valid g_2
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
      __anonstruct_Graph_4_edges_g_2_5_at_L
      __anonstruct_Graph_4_vsize_g_2_5_at_L
      __anonstruct_Graph_4_vertices_g_2_5_at_L
      __anonstruct_Edge_3_existent_0_edges_18_at_L
      __anonstruct_Edge_3_to_edges_18_at_L
      __anonstruct_Edge_3_from_edges_18_at_L
      __anonstruct_Vertex_2_existent_vertices_17_at_L)
     /\
     (forall k_3 : int.
      ((((<=)
        (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)) k_3)
       /\
       ((<) k_3
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)))) ->
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_18_at_L
       (shift (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2) k_3))) (0)))))))))))
  
  
end

theory Struct___anonstruct_Graph_4

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Graph_4_tag  : (tag_id
  __anonstruct_Graph_4)
  
  axiom U___anonstruct_Graph_4_parenttag_bottom  :
  (parenttag __anonstruct_Graph_4_tag bottom_tag)
  
  axiom U___anonstruct_Graph_4_is_final  :
  (forall __anonstruct_Graph_4_tag_table : (tag_table __anonstruct_Graph_4).
   (forall p : (pointer __anonstruct_Graph_4).
    ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     ->
     ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag))))
  
  predicate frame_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  =
     ((tag_extends old___anonstruct_Graph_4_tag_table
      __anonstruct_Graph_4_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Graph_4_tag_table
     __anonstruct_Graph_4_tag_table p))
  
  predicate frame_free_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4))
  =
     ((free_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (free_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (old___anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  =
     ((alloc_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (alloc_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_tag_table :
  (tag_table __anonstruct_Graph_4))
  = (tag_fresh __anonstruct_Graph_4_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = (alloc_fresh __anonstruct_Graph_4_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) = true
  
  predicate container_of_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4)) = true
  
  predicate typeof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
  
  predicate typeof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     (((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Graph_4_tag_table (shift p i))
       __anonstruct_Graph_4_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = (instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
  
  predicate instanceof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Graph_4_tag_table (shift p i)
       __anonstruct_Graph_4_tag))))
  
  predicate right_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (b : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  axiom U___anonstruct_Graph_4_int  :
  ((=) (int_of_tag __anonstruct_Graph_4_tag) (5))
  
end

theory Struct___anonstruct_Vertex_2

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Vertex_2_tag  : (tag_id
  __anonstruct_Vertex_2)
  
  axiom U___anonstruct_Vertex_2_parenttag_bottom  :
  (parenttag __anonstruct_Vertex_2_tag bottom_tag)
  
  axiom U___anonstruct_Vertex_2_is_final  :
  (forall __anonstruct_Vertex_2_tag_table : (tag_table
   __anonstruct_Vertex_2).
   (forall p : (pointer __anonstruct_Vertex_2).
    ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     ->
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag))))
  
  predicate frame_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((tag_extends old___anonstruct_Vertex_2_tag_table
      __anonstruct_Vertex_2_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Vertex_2_tag_table
     __anonstruct_Vertex_2_tag_table p))
  
  predicate frame_free_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((free_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (free_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((alloc_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (alloc_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_tag_table :
  (tag_table __anonstruct_Vertex_2))
  = (tag_fresh __anonstruct_Vertex_2_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = (alloc_fresh __anonstruct_Vertex_2_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) = true
  
  predicate container_of_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  = true
  
  predicate typeof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag)
  
  predicate typeof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     (((=) (typeof __anonstruct_Vertex_2_tag_table p)
      __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Vertex_2_tag_table (shift p i))
       __anonstruct_Vertex_2_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  = (instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
  
  predicate instanceof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Vertex_2_tag_table (shift p i)
       __anonstruct_Vertex_2_tag))))
  
  predicate right_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (b : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  axiom U___anonstruct_Vertex_2_int  :
  ((=) (int_of_tag __anonstruct_Vertex_2_tag) (6))
  
end

theory Struct___anonstruct_Edge_3

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Edge_3_tag  : (tag_id
  __anonstruct_Edge_3)
  
  axiom U___anonstruct_Edge_3_parenttag_bottom  :
  (parenttag __anonstruct_Edge_3_tag bottom_tag)
  
  axiom U___anonstruct_Edge_3_is_final  :
  (forall __anonstruct_Edge_3_tag_table : (tag_table __anonstruct_Edge_3).
   (forall p : (pointer __anonstruct_Edge_3).
    ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) ->
     ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag))))
  
  predicate frame_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  =
     ((tag_extends old___anonstruct_Edge_3_tag_table
      __anonstruct_Edge_3_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Edge_3_tag_table
     __anonstruct_Edge_3_tag_table p))
  
  predicate frame_free_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3))
  =
     ((free_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (free_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (old___anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  =
     ((alloc_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (alloc_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (tag_fresh __anonstruct_Edge_3_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = (alloc_fresh __anonstruct_Edge_3_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) = true
  
  predicate container_of_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3)) = true
  
  predicate typeof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
  
  predicate typeof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     (((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Edge_3_tag_table (shift p i))
       __anonstruct_Edge_3_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag)
  
  predicate instanceof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Edge_3_tag_table (shift p i)
       __anonstruct_Edge_3_tag))))
  
  predicate right_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (b : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  axiom U___anonstruct_Edge_3_int  :
  ((=) (int_of_tag __anonstruct_Edge_3_tag) (4))
  
end

module Function_graph_create_safe

  use import Struct___anonstruct_Vertex_2 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val graph_create
  (__anonstruct_Vertex_2_vertices_27_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) 
   (__anonstruct_Graph_4_result_13_alloc_table : (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Edge_3_edges_28_alloc_table : (alloc_table
     __anonstruct_Edge_3)) 
     (__anonstruct_Graph_4_esize_result_13 : (memory __anonstruct_Graph_4
      Int32.t)) 
      (__anonstruct_Graph_4_ecnt_result_13 : (memory __anonstruct_Graph_4
       Int32.t)) 
       (__anonstruct_Graph_4_edges_result_13 : (memory __anonstruct_Graph_4
        (pointer __anonstruct_Edge_3))) 
        (__anonstruct_Graph_4_vsize_result_13 : (memory __anonstruct_Graph_4
         Int32.t)) 
         (__anonstruct_Graph_4_vertices_result_13 : (memory
          __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
          (__anonstruct_Edge_3_existent_0_edges_28 : (memory
           __anonstruct_Edge_3 Int32.t)) 
           (__anonstruct_Edge_3_to_edges_28 : (memory __anonstruct_Edge_3
            Int32.t)) 
            (__anonstruct_Edge_3_from_edges_28 : (memory __anonstruct_Edge_3
             Int32.t)) 
             (__anonstruct_Vertex_2_existent_vertices_27 : (memory
              __anonstruct_Vertex_2 Int32.t)) : (pointer
              __anonstruct_Graph_4)
              requires { (true) }
              ensures {
                (#"/home/debian/mfsp/examples/interface/graph_1.h" 75 12 340#
                "expl:Ensures clause"
                ((not ((=) result null)) ->
                 ((valid_0 result
                  __anonstruct_Vertex_2_vertices_27_alloc_table
                  __anonstruct_Edge_3_edges_28_alloc_table
                  __anonstruct_Graph_4_esize_result_13
                  __anonstruct_Graph_4_ecnt_result_13
                  __anonstruct_Graph_4_edges_result_13
                  __anonstruct_Graph_4_vsize_result_13
                  __anonstruct_Graph_4_vertices_result_13
                  __anonstruct_Edge_3_existent_0_edges_28
                  __anonstruct_Edge_3_to_edges_28
                  __anonstruct_Edge_3_from_edges_28
                  __anonstruct_Vertex_2_existent_vertices_27)
                 /\
                 ((((<=)
                   (offset_min __anonstruct_Graph_4_result_13_alloc_table
                   result) (0))
                  /\
                  (((>=)
                   (offset_max __anonstruct_Graph_4_result_13_alloc_table
                   result) (0))
                  /\ ((=) true true)))
                 /\
                 (((strict_left_valid_struct___anonstruct_Graph_4 result (0)
                   __anonstruct_Graph_4_result_13_alloc_table)
                  /\
                  (right_valid_struct___anonstruct_Graph_4 result
                  (Int.(-_) 1) __anonstruct_Graph_4_result_13_alloc_table))
                 /\
                 (((strict_left_valid_struct___anonstruct_Vertex_2
                   (select __anonstruct_Graph_4_vertices_result_13 result)
                   (0) __anonstruct_Vertex_2_vertices_27_alloc_table)
                  /\
                  (right_valid_struct___anonstruct_Vertex_2
                  (select __anonstruct_Graph_4_vertices_result_13 result)
                  (Int.(-_) 1) __anonstruct_Vertex_2_vertices_27_alloc_table))
                 /\
                 (((strict_left_valid_struct___anonstruct_Edge_3
                   (select __anonstruct_Graph_4_edges_result_13 result) (0)
                   __anonstruct_Edge_3_edges_28_alloc_table)
                  /\
                  (right_valid_struct___anonstruct_Edge_3
                  (select __anonstruct_Graph_4_edges_result_13 result)
                  (Int.(-_) 1) __anonstruct_Edge_3_edges_28_alloc_table))
                 /\
                 ((fresh_alloc_struct___anonstruct_Graph_4 result (0)
                  __anonstruct_Graph_4_result_13_alloc_table)
                 /\
                 ((fresh_alloc_struct___anonstruct_Vertex_2
                  (select __anonstruct_Graph_4_vertices_result_13 result) (0)
                  __anonstruct_Vertex_2_vertices_27_alloc_table)
                 /\
                 ((fresh_alloc_struct___anonstruct_Edge_3
                  (select __anonstruct_Graph_4_edges_result_13 result) (0)
                  __anonstruct_Edge_3_edges_28_alloc_table)
                 /\
                 (Int32.(=)
                 (select __anonstruct_Graph_4_ecnt_result_13 result)
                 (#"test_3_c.jc" 176 39 51# "expl:Integer cast" (Int32.of_int
                 (0)))))))))))))) }
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Function_graph_destroy_safe

  use import Struct___anonstruct_Vertex_2 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val graph_destroy
  (graph : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_esize_graph_14 : ref (memory __anonstruct_Graph_4
    Int32.t)) 
    (__anonstruct_Graph_4_ecnt_graph_14 : ref (memory __anonstruct_Graph_4
     Int32.t)) 
     (__anonstruct_Graph_4_edges_graph_14 : ref (memory __anonstruct_Graph_4
      (pointer __anonstruct_Edge_3))) 
      (__anonstruct_Graph_4_vsize_graph_14 : ref (memory __anonstruct_Graph_4
       Int32.t)) 
       (__anonstruct_Graph_4_vertices_graph_14 : ref (memory
        __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
        (__anonstruct_Vertex_2_vertices_29_alloc_table : (alloc_table
         __anonstruct_Vertex_2)) 
         (__anonstruct_Graph_4_graph_14_alloc_table : (alloc_table
          __anonstruct_Graph_4)) 
          (__anonstruct_Edge_3_edges_30_alloc_table : (alloc_table
           __anonstruct_Edge_3)) 
           (__anonstruct_Edge_3_existent_0_edges_30 : (memory
            __anonstruct_Edge_3 Int32.t)) 
            (__anonstruct_Edge_3_to_edges_30 : (memory __anonstruct_Edge_3
             Int32.t)) 
             (__anonstruct_Edge_3_from_edges_30 : (memory __anonstruct_Edge_3
              Int32.t)) 
              (__anonstruct_Vertex_2_existent_vertices_29 : (memory
               __anonstruct_Vertex_2 Int32.t)) : unit
               requires {
                 ("expl:External"
                 (#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                 ((#"/home/debian/mfsp/examples/interface/graph_1.h" 89 13 25#
                  "expl:Requires clause"
                  (valid_0 graph
                  __anonstruct_Vertex_2_vertices_29_alloc_table
                  __anonstruct_Edge_3_edges_30_alloc_table
                  !__anonstruct_Graph_4_esize_graph_14
                  !__anonstruct_Graph_4_ecnt_graph_14
                  !__anonstruct_Graph_4_edges_graph_14
                  !__anonstruct_Graph_4_vsize_graph_14
                  !__anonstruct_Graph_4_vertices_graph_14
                  __anonstruct_Edge_3_existent_0_edges_30
                  __anonstruct_Edge_3_to_edges_30
                  __anonstruct_Edge_3_from_edges_30
                  __anonstruct_Vertex_2_existent_vertices_29))
                 /\
                 (#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                 ((#"/home/debian/mfsp/examples/interface/graph_1.h" 90 13 26#
                  "expl:Requires clause"
                  (#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                  ((#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                   ((<=)
                   (offset_min __anonstruct_Graph_4_graph_14_alloc_table
                   graph) (0)))
                  /\
                  (#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                  ((#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                   ((>=)
                   (offset_max __anonstruct_Graph_4_graph_14_alloc_table
                   graph) (0)))
                  /\
                  (#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                  ((=) true true)))))))
                 /\
                 (#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                 ((#"/home/debian/mfsp/examples/interface/graph_1.h" 91 13 29#
                  "expl:Requires clause"
                  (#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                  ((#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                   (strict_left_valid_struct___anonstruct_Graph_4 graph (0)
                   __anonstruct_Graph_4_graph_14_alloc_table))
                  /\
                  (#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                  (right_valid_struct___anonstruct_Graph_4 graph (Int.(-_) 1)
                  __anonstruct_Graph_4_graph_14_alloc_table)))))
                 /\
                 (#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                 ((#"/home/debian/mfsp/examples/interface/graph_1.h" 92 13 39#
                  "expl:Requires clause"
                  (#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                  ((#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                   (strict_left_valid_struct___anonstruct_Vertex_2
                   (select !__anonstruct_Graph_4_vertices_graph_14 graph) (0)
                   __anonstruct_Vertex_2_vertices_29_alloc_table))
                  /\
                  (#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                  (right_valid_struct___anonstruct_Vertex_2
                  (select !__anonstruct_Graph_4_vertices_graph_14 graph)
                  (Int.(-_) 1) __anonstruct_Vertex_2_vertices_29_alloc_table)))))
                 /\
                 (#"/home/debian/mfsp/examples/interface/graph_1.h" 93 13 36#
                 "expl:Requires clause"
                 (#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                 ((#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                  (strict_left_valid_struct___anonstruct_Edge_3
                  (select !__anonstruct_Graph_4_edges_graph_14 graph) (0)
                  __anonstruct_Edge_3_edges_30_alloc_table))
                 /\
                 (#"test_3_c.jc" 180 12 422# "expl:Requires clause"
                 (right_valid_struct___anonstruct_Edge_3
                 (select !__anonstruct_Graph_4_edges_graph_14 graph)
                 (Int.(-_) 1) __anonstruct_Edge_3_edges_30_alloc_table))))))))))))))
                 }
               reads { __anonstruct_Graph_4_ecnt_graph_14,
               __anonstruct_Graph_4_edges_graph_14,
               __anonstruct_Graph_4_esize_graph_14,
               __anonstruct_Graph_4_vertices_graph_14,
               __anonstruct_Graph_4_vsize_graph_14 } writes {
               __anonstruct_Graph_4_ecnt_graph_14,
               __anonstruct_Graph_4_edges_graph_14,
               __anonstruct_Graph_4_esize_graph_14,
               __anonstruct_Graph_4_vertices_graph_14,
               __anonstruct_Graph_4_vsize_graph_14 }
               ensures {
                 ((((((#"test_3_c.jc" 188 10 83# "expl:Assigns clause"
                      (not_assigns __anonstruct_Graph_4_graph_14_alloc_table
                      __anonstruct_Graph_4_graph_14_alloc_table (old
                      !__anonstruct_Graph_4_vertices_graph_14)
                      !__anonstruct_Graph_4_vertices_graph_14
                      (pset_singleton graph)))
                     /\
                     (#"test_3_c.jc" 188 10 83# "expl:Assigns clause"
                     (not_assigns __anonstruct_Graph_4_graph_14_alloc_table
                     __anonstruct_Graph_4_graph_14_alloc_table (old
                     !__anonstruct_Graph_4_vsize_graph_14)
                     !__anonstruct_Graph_4_vsize_graph_14
                     (pset_singleton graph))))
                    /\
                    (#"test_3_c.jc" 188 10 83# "expl:Assigns clause"
                    (not_assigns __anonstruct_Graph_4_graph_14_alloc_table
                    __anonstruct_Graph_4_graph_14_alloc_table (old
                    !__anonstruct_Graph_4_edges_graph_14)
                    !__anonstruct_Graph_4_edges_graph_14
                    (pset_singleton graph))))
                   /\
                   (#"test_3_c.jc" 188 10 83# "expl:Assigns clause"
                   (not_assigns __anonstruct_Graph_4_graph_14_alloc_table
                   __anonstruct_Graph_4_graph_14_alloc_table (old
                   !__anonstruct_Graph_4_ecnt_graph_14)
                   !__anonstruct_Graph_4_ecnt_graph_14
                   (pset_singleton graph))))
                  /\
                  (#"test_3_c.jc" 188 10 83# "expl:Assigns clause"
                  (not_assigns __anonstruct_Graph_4_graph_14_alloc_table
                  __anonstruct_Graph_4_graph_14_alloc_table (old
                  !__anonstruct_Graph_4_esize_graph_14)
                  !__anonstruct_Graph_4_esize_graph_14
                  (pset_singleton graph))))
                 /\
                 (#"/home/debian/mfsp/examples/interface/graph_1.h" 94 12 29#
                 "expl:Ensures clause"
                 (#"/home/debian/mfsp/examples/interface/graph_1.h" 94 12 29#
                 "expl:Ensures clause"
                 ((#"/home/debian/mfsp/examples/interface/graph_1.h" 94 12 29#
                  "expl:Ensures clause"
                  (fresh_alloc_struct___anonstruct_Graph_4 graph (0)
                  __anonstruct_Graph_4_graph_14_alloc_table))
                 /\
                 (#"/home/debian/mfsp/examples/interface/graph_1.h" 94 12 29#
                 "expl:Ensures clause"
                 ((#"/home/debian/mfsp/examples/interface/graph_1.h" 95 12 49#
                  "expl:Ensures clause"
                  (fresh_alloc_struct___anonstruct_Vertex_2
                  (select (old !__anonstruct_Graph_4_vertices_graph_14)
                  graph) (0) __anonstruct_Vertex_2_vertices_29_alloc_table))
                 /\
                 (#"/home/debian/mfsp/examples/interface/graph_1.h" 96 12 46#
                 "expl:Ensures clause"
                 (fresh_alloc_struct___anonstruct_Edge_3
                 (select (old !__anonstruct_Graph_4_edges_graph_14) graph)
                 (0) __anonstruct_Edge_3_edges_30_alloc_table)))))))) }
  
end

module Function_test1_safety
#"/home/debian/mfsp/examples/interface/test_3.c" 3 5 16# "expl:test1, safety"

  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_graph_destroy_safe 
  
  use Function_graph_create_safe 
  
  use import Exceptions 
  
  use import core.Eq_pointer_safe 
  
  use bool.Bool 
  
  use import core.Any_pointer 
  
  use import core.Any_memory 
  
  use import core.Any_alloc_table 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  let test1 #"/home/debian/mfsp/examples/interface/test_3.c" 3 5 16#
  "expl:Function test1, safety" =
  fun (tt : unit) 
   requires { (true) } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let __anonstruct_Graph_4_esize_g_31 = ref
   (any_memory  () : (memory __anonstruct_Graph_4 Int32.t)) in
   (let __anonstruct_Graph_4_ecnt_g_31 = ref
   (any_memory  () : (memory __anonstruct_Graph_4 Int32.t)) in
   (let __anonstruct_Graph_4_edges_g_31 = ref
   (any_memory  () : (memory __anonstruct_Graph_4 (pointer
    __anonstruct_Edge_3))) in
   (let __anonstruct_Graph_4_vsize_g_31 = ref
   (any_memory  () : (memory __anonstruct_Graph_4 Int32.t)) in
   (let __anonstruct_Graph_4_vertices_g_31 = ref
   (any_memory  () : (memory __anonstruct_Graph_4 (pointer
    __anonstruct_Vertex_2))) in
   (let __anonstruct_Edge_3_existent_0_edges_109 =
   (any_memory  () : (memory __anonstruct_Edge_3 Int32.t)) in
   (let __anonstruct_Edge_3_to_edges_109 =
   (any_memory  () : (memory __anonstruct_Edge_3 Int32.t)) in
   (let __anonstruct_Edge_3_from_edges_109 =
   (any_memory  () : (memory __anonstruct_Edge_3 Int32.t)) in
   (let __anonstruct_Vertex_2_existent_vertices_34 =
   (any_memory  () : (memory __anonstruct_Vertex_2 Int32.t)) in
   (let __anonstruct_Vertex_2_vertices_34_alloc_table =
   (any_alloc_table  () : (alloc_table __anonstruct_Vertex_2)) in
   (let __anonstruct_Graph_4_g_31_alloc_table =
   (any_alloc_table  () : (alloc_table __anonstruct_Graph_4)) in
   (let __anonstruct_Edge_3_edges_109_alloc_table =
   (any_alloc_table  () : (alloc_table __anonstruct_Edge_3)) in
   try
    begin
    (let g_14 = ref (any_pointer  () : (pointer __anonstruct_Graph_4)) in
    try
     begin
     (g_14 :=
      (let _jessie_5 =
      (#"/home/debian/mfsp/examples/interface/test_3.c" 5 15 29#
      "expl:Precondition for graph_create"
      (Function_graph_create_safe.graph_create 
       __anonstruct_Vertex_2_vertices_34_alloc_table
       __anonstruct_Graph_4_g_31_alloc_table
       __anonstruct_Edge_3_edges_109_alloc_table
       !__anonstruct_Graph_4_esize_g_31 !__anonstruct_Graph_4_ecnt_g_31
       !__anonstruct_Graph_4_edges_g_31 !__anonstruct_Graph_4_vsize_g_31
       !__anonstruct_Graph_4_vertices_g_31
       __anonstruct_Edge_3_existent_0_edges_109
       __anonstruct_Edge_3_to_edges_109 __anonstruct_Edge_3_from_edges_109
       __anonstruct_Vertex_2_existent_vertices_34 )) in
      begin
      (assert {
      (#"/home/debian/mfsp/examples/interface/test_3.c" 5 15 29#
      "expl:Pointer index bounds" true) }); _jessie_5 end));
      (if
      (#"/home/debian/mfsp/examples/interface/test_3.c" 6 8 10#
      (Bool.notb 
       (#"test_3_c.jc" 205 23 32#
       (neq_pointer  __anonstruct_Graph_4_g_31_alloc_table
        __anonstruct_Graph_4_g_31_alloc_table !g_14 (null  ) )) ))
      then (raise (Return_label_exc ())) else ());
      begin
      (let _jessie_4 = !g_14 in
      (#"/home/debian/mfsp/examples/interface/test_3.c" 7 4 20#
      "expl:Precondition for graph_destroy"
      (Function_graph_destroy_safe.graph_destroy  _jessie_4
       __anonstruct_Graph_4_esize_g_31 __anonstruct_Graph_4_ecnt_g_31
       __anonstruct_Graph_4_edges_g_31 __anonstruct_Graph_4_vsize_g_31
       __anonstruct_Graph_4_vertices_g_31
       __anonstruct_Vertex_2_vertices_34_alloc_table
       __anonstruct_Graph_4_g_31_alloc_table
       __anonstruct_Edge_3_edges_109_alloc_table
       __anonstruct_Edge_3_existent_0_edges_109
       __anonstruct_Edge_3_to_edges_109 __anonstruct_Edge_3_from_edges_109
       __anonstruct_Vertex_2_existent_vertices_34 )));
       begin
       any unit
       requires { true } reads { __anonstruct_Graph_4_vertices_g_31 }
       ensures {
         (#"/home/debian/mfsp/examples/interface/test_3.c" 8 15 38#
         (fresh_alloc_struct___anonstruct_Vertex_2
         (select !__anonstruct_Graph_4_vertices_g_31 !g_14) (0)
         __anonstruct_Vertex_2_vertices_34_alloc_table)) } ; () end;
       begin
       any unit
       requires { true } reads { __anonstruct_Graph_4_vertices_g_31 }
       ensures {
         (#"/home/debian/mfsp/examples/interface/test_3.c" 9 15 37#
         (#"/home/debian/mfsp/examples/interface/test_3.c" 9 15 37#
         ((#"/home/debian/mfsp/examples/interface/test_3.c" 9 15 37#
          (strict_left_valid_struct___anonstruct_Vertex_2
          (select !__anonstruct_Graph_4_vertices_g_31 !g_14) (0)
          __anonstruct_Vertex_2_vertices_34_alloc_table))
         /\
         (#"/home/debian/mfsp/examples/interface/test_3.c" 9 15 37#
         (right_valid_struct___anonstruct_Vertex_2
         (select !__anonstruct_Graph_4_vertices_g_31 !g_14) (Int.(-_) 1)
         __anonstruct_Vertex_2_vertices_34_alloc_table))))) } ; () end;
       begin
       any unit
       requires { true }
       ensures {
         (#"/home/debian/mfsp/examples/interface/test_3.c" 10 15 21#
         (not ((=) (0) (0)))) } ; () end; (raise (Return_label_exc ())) end
     end with Return_label_exc _jessie_1 ->
     'Return_label: 'Return_label: (raise Return) end); (raise Return) end
    with Return -> () end))))))))))))
  
end

module Function_graph_create

  use import Struct___anonstruct_Vertex_2 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_valid_0 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val graph_create
  (__anonstruct_Vertex_2_vertices_27_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) 
   (__anonstruct_Graph_4_result_13_alloc_table : (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Edge_3_edges_28_alloc_table : (alloc_table
     __anonstruct_Edge_3)) 
     (__anonstruct_Graph_4_esize_result_13 : (memory __anonstruct_Graph_4
      Int32.t)) 
      (__anonstruct_Graph_4_ecnt_result_13 : (memory __anonstruct_Graph_4
       Int32.t)) 
       (__anonstruct_Graph_4_edges_result_13 : (memory __anonstruct_Graph_4
        (pointer __anonstruct_Edge_3))) 
        (__anonstruct_Graph_4_vsize_result_13 : (memory __anonstruct_Graph_4
         Int32.t)) 
         (__anonstruct_Graph_4_vertices_result_13 : (memory
          __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
          (__anonstruct_Edge_3_existent_0_edges_28 : (memory
           __anonstruct_Edge_3 Int32.t)) 
           (__anonstruct_Edge_3_to_edges_28 : (memory __anonstruct_Edge_3
            Int32.t)) 
            (__anonstruct_Edge_3_from_edges_28 : (memory __anonstruct_Edge_3
             Int32.t)) 
             (__anonstruct_Vertex_2_existent_vertices_27 : (memory
              __anonstruct_Vertex_2 Int32.t)) : (pointer
              __anonstruct_Graph_4)
              requires { true }
              ensures {
                (#"/home/debian/mfsp/examples/interface/graph_1.h" 75 12 340#
                "expl:Ensures clause"
                ((not ((=) result null)) ->
                 ((valid_0 result
                  __anonstruct_Vertex_2_vertices_27_alloc_table
                  __anonstruct_Edge_3_edges_28_alloc_table
                  __anonstruct_Graph_4_esize_result_13
                  __anonstruct_Graph_4_ecnt_result_13
                  __anonstruct_Graph_4_edges_result_13
                  __anonstruct_Graph_4_vsize_result_13
                  __anonstruct_Graph_4_vertices_result_13
                  __anonstruct_Edge_3_existent_0_edges_28
                  __anonstruct_Edge_3_to_edges_28
                  __anonstruct_Edge_3_from_edges_28
                  __anonstruct_Vertex_2_existent_vertices_27)
                 /\
                 ((((<=)
                   (offset_min __anonstruct_Graph_4_result_13_alloc_table
                   result) (0))
                  /\
                  (((>=)
                   (offset_max __anonstruct_Graph_4_result_13_alloc_table
                   result) (0))
                  /\ ((=) true true)))
                 /\
                 (((strict_left_valid_struct___anonstruct_Graph_4 result (0)
                   __anonstruct_Graph_4_result_13_alloc_table)
                  /\
                  (right_valid_struct___anonstruct_Graph_4 result
                  (Int.(-_) 1) __anonstruct_Graph_4_result_13_alloc_table))
                 /\
                 (((strict_left_valid_struct___anonstruct_Vertex_2
                   (select __anonstruct_Graph_4_vertices_result_13 result)
                   (0) __anonstruct_Vertex_2_vertices_27_alloc_table)
                  /\
                  (right_valid_struct___anonstruct_Vertex_2
                  (select __anonstruct_Graph_4_vertices_result_13 result)
                  (Int.(-_) 1) __anonstruct_Vertex_2_vertices_27_alloc_table))
                 /\
                 (((strict_left_valid_struct___anonstruct_Edge_3
                   (select __anonstruct_Graph_4_edges_result_13 result) (0)
                   __anonstruct_Edge_3_edges_28_alloc_table)
                  /\
                  (right_valid_struct___anonstruct_Edge_3
                  (select __anonstruct_Graph_4_edges_result_13 result)
                  (Int.(-_) 1) __anonstruct_Edge_3_edges_28_alloc_table))
                 /\
                 ((fresh_alloc_struct___anonstruct_Graph_4 result (0)
                  __anonstruct_Graph_4_result_13_alloc_table)
                 /\
                 ((fresh_alloc_struct___anonstruct_Vertex_2
                  (select __anonstruct_Graph_4_vertices_result_13 result) (0)
                  __anonstruct_Vertex_2_vertices_27_alloc_table)
                 /\
                 ((fresh_alloc_struct___anonstruct_Edge_3
                  (select __anonstruct_Graph_4_edges_result_13 result) (0)
                  __anonstruct_Edge_3_edges_28_alloc_table)
                 /\
                 (Int32.(=)
                 (select __anonstruct_Graph_4_ecnt_result_13 result)
                 (#"test_3_c.jc" 176 39 51# "expl:Integer cast" (Int32.of_int
                 (0)))))))))))))) }
  
end

module Function_graph_destroy

  use import Struct___anonstruct_Vertex_2 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val graph_destroy
  (graph : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_esize_graph_14 : ref (memory __anonstruct_Graph_4
    Int32.t)) 
    (__anonstruct_Graph_4_ecnt_graph_14 : ref (memory __anonstruct_Graph_4
     Int32.t)) 
     (__anonstruct_Graph_4_edges_graph_14 : ref (memory __anonstruct_Graph_4
      (pointer __anonstruct_Edge_3))) 
      (__anonstruct_Graph_4_vsize_graph_14 : ref (memory __anonstruct_Graph_4
       Int32.t)) 
       (__anonstruct_Graph_4_vertices_graph_14 : ref (memory
        __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
        (__anonstruct_Vertex_2_vertices_29_alloc_table : (alloc_table
         __anonstruct_Vertex_2)) 
         (__anonstruct_Graph_4_graph_14_alloc_table : (alloc_table
          __anonstruct_Graph_4)) 
          (__anonstruct_Edge_3_edges_30_alloc_table : (alloc_table
           __anonstruct_Edge_3)) 
           (__anonstruct_Edge_3_existent_0_edges_30 : (memory
            __anonstruct_Edge_3 Int32.t)) 
            (__anonstruct_Edge_3_to_edges_30 : (memory __anonstruct_Edge_3
             Int32.t)) 
             (__anonstruct_Edge_3_from_edges_30 : (memory __anonstruct_Edge_3
              Int32.t)) 
              (__anonstruct_Vertex_2_existent_vertices_29 : (memory
               __anonstruct_Vertex_2 Int32.t)) : unit
               requires { true } reads { __anonstruct_Graph_4_ecnt_graph_14,
               __anonstruct_Graph_4_edges_graph_14,
               __anonstruct_Graph_4_esize_graph_14,
               __anonstruct_Graph_4_vertices_graph_14,
               __anonstruct_Graph_4_vsize_graph_14 } writes {
               __anonstruct_Graph_4_ecnt_graph_14,
               __anonstruct_Graph_4_edges_graph_14,
               __anonstruct_Graph_4_esize_graph_14,
               __anonstruct_Graph_4_vertices_graph_14,
               __anonstruct_Graph_4_vsize_graph_14 }
               ensures {
                 ((((((#"test_3_c.jc" 188 10 83# "expl:Assigns clause"
                      (not_assigns __anonstruct_Graph_4_graph_14_alloc_table
                      __anonstruct_Graph_4_graph_14_alloc_table (old
                      !__anonstruct_Graph_4_vertices_graph_14)
                      !__anonstruct_Graph_4_vertices_graph_14
                      (pset_singleton graph)))
                     /\
                     (#"test_3_c.jc" 188 10 83# "expl:Assigns clause"
                     (not_assigns __anonstruct_Graph_4_graph_14_alloc_table
                     __anonstruct_Graph_4_graph_14_alloc_table (old
                     !__anonstruct_Graph_4_vsize_graph_14)
                     !__anonstruct_Graph_4_vsize_graph_14
                     (pset_singleton graph))))
                    /\
                    (#"test_3_c.jc" 188 10 83# "expl:Assigns clause"
                    (not_assigns __anonstruct_Graph_4_graph_14_alloc_table
                    __anonstruct_Graph_4_graph_14_alloc_table (old
                    !__anonstruct_Graph_4_edges_graph_14)
                    !__anonstruct_Graph_4_edges_graph_14
                    (pset_singleton graph))))
                   /\
                   (#"test_3_c.jc" 188 10 83# "expl:Assigns clause"
                   (not_assigns __anonstruct_Graph_4_graph_14_alloc_table
                   __anonstruct_Graph_4_graph_14_alloc_table (old
                   !__anonstruct_Graph_4_ecnt_graph_14)
                   !__anonstruct_Graph_4_ecnt_graph_14
                   (pset_singleton graph))))
                  /\
                  (#"test_3_c.jc" 188 10 83# "expl:Assigns clause"
                  (not_assigns __anonstruct_Graph_4_graph_14_alloc_table
                  __anonstruct_Graph_4_graph_14_alloc_table (old
                  !__anonstruct_Graph_4_esize_graph_14)
                  !__anonstruct_Graph_4_esize_graph_14
                  (pset_singleton graph))))
                 /\
                 (#"/home/debian/mfsp/examples/interface/graph_1.h" 94 12 29#
                 "expl:Ensures clause"
                 (#"/home/debian/mfsp/examples/interface/graph_1.h" 94 12 29#
                 "expl:Ensures clause"
                 ((#"/home/debian/mfsp/examples/interface/graph_1.h" 94 12 29#
                  "expl:Ensures clause"
                  (fresh_alloc_struct___anonstruct_Graph_4 graph (0)
                  __anonstruct_Graph_4_graph_14_alloc_table))
                 /\
                 (#"/home/debian/mfsp/examples/interface/graph_1.h" 94 12 29#
                 "expl:Ensures clause"
                 ((#"/home/debian/mfsp/examples/interface/graph_1.h" 95 12 49#
                  "expl:Ensures clause"
                  (fresh_alloc_struct___anonstruct_Vertex_2
                  (select (old !__anonstruct_Graph_4_vertices_graph_14)
                  graph) (0) __anonstruct_Vertex_2_vertices_29_alloc_table))
                 /\
                 (#"/home/debian/mfsp/examples/interface/graph_1.h" 96 12 46#
                 "expl:Ensures clause"
                 (fresh_alloc_struct___anonstruct_Edge_3
                 (select (old !__anonstruct_Graph_4_edges_graph_14) graph)
                 (0) __anonstruct_Edge_3_edges_30_alloc_table)))))))) }
  
end

module Function_test1_behaviors
#"/home/debian/mfsp/examples/interface/test_3.c" 3 5 16#
"expl:test1, behaviors"

  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_graph_destroy 
  
  use Function_graph_create 
  
  use import Exceptions 
  
  use bool.Bool 
  
  use import core.Any_pointer 
  
  use import core.Any_memory 
  
  use import core.Any_alloc_table 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  let test1_ensures_default
  #"/home/debian/mfsp/examples/interface/test_3.c" 3 5 16#
  "expl:Function test1, default behavior" =
  fun (tt : unit) 
   requires { (true) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) }  ->
   'Init:
   (let __anonstruct_Graph_4_esize_g_31 = ref
   (any_memory  () : (memory __anonstruct_Graph_4 Int32.t)) in
   (let __anonstruct_Graph_4_ecnt_g_31 = ref
   (any_memory  () : (memory __anonstruct_Graph_4 Int32.t)) in
   (let __anonstruct_Graph_4_edges_g_31 = ref
   (any_memory  () : (memory __anonstruct_Graph_4 (pointer
    __anonstruct_Edge_3))) in
   (let __anonstruct_Graph_4_vsize_g_31 = ref
   (any_memory  () : (memory __anonstruct_Graph_4 Int32.t)) in
   (let __anonstruct_Graph_4_vertices_g_31 = ref
   (any_memory  () : (memory __anonstruct_Graph_4 (pointer
    __anonstruct_Vertex_2))) in
   (let __anonstruct_Edge_3_existent_0_edges_109 =
   (any_memory  () : (memory __anonstruct_Edge_3 Int32.t)) in
   (let __anonstruct_Edge_3_to_edges_109 =
   (any_memory  () : (memory __anonstruct_Edge_3 Int32.t)) in
   (let __anonstruct_Edge_3_from_edges_109 =
   (any_memory  () : (memory __anonstruct_Edge_3 Int32.t)) in
   (let __anonstruct_Vertex_2_existent_vertices_34 =
   (any_memory  () : (memory __anonstruct_Vertex_2 Int32.t)) in
   (let __anonstruct_Vertex_2_vertices_34_alloc_table =
   (any_alloc_table  () : (alloc_table __anonstruct_Vertex_2)) in
   (let __anonstruct_Graph_4_g_31_alloc_table =
   (any_alloc_table  () : (alloc_table __anonstruct_Graph_4)) in
   (let __anonstruct_Edge_3_edges_109_alloc_table =
   (any_alloc_table  () : (alloc_table __anonstruct_Edge_3)) in
   try
    begin
    (let g_14 = ref (any_pointer  () : (pointer __anonstruct_Graph_4)) in
    try
     begin
     (g_14 :=
      (#"/home/debian/mfsp/examples/interface/test_3.c" 5 15 29#
      "expl:Precondition for graph_create"
      (Function_graph_create.graph_create 
       __anonstruct_Vertex_2_vertices_34_alloc_table
       __anonstruct_Graph_4_g_31_alloc_table
       __anonstruct_Edge_3_edges_109_alloc_table
       !__anonstruct_Graph_4_esize_g_31 !__anonstruct_Graph_4_ecnt_g_31
       !__anonstruct_Graph_4_edges_g_31 !__anonstruct_Graph_4_vsize_g_31
       !__anonstruct_Graph_4_vertices_g_31
       __anonstruct_Edge_3_existent_0_edges_109
       __anonstruct_Edge_3_to_edges_109 __anonstruct_Edge_3_from_edges_109
       __anonstruct_Vertex_2_existent_vertices_34 )));
      (if
      (#"/home/debian/mfsp/examples/interface/test_3.c" 6 8 10#
      (Bool.notb  ((<>)  !g_14 (null  ) ) ))
      then (raise (Return_label_exc ())) else ());
      begin
      (let _jessie_2 = !g_14 in
      (#"/home/debian/mfsp/examples/interface/test_3.c" 7 4 20#
      "expl:Precondition for graph_destroy"
      (Function_graph_destroy.graph_destroy  _jessie_2
       __anonstruct_Graph_4_esize_g_31 __anonstruct_Graph_4_ecnt_g_31
       __anonstruct_Graph_4_edges_g_31 __anonstruct_Graph_4_vsize_g_31
       __anonstruct_Graph_4_vertices_g_31
       __anonstruct_Vertex_2_vertices_34_alloc_table
       __anonstruct_Graph_4_g_31_alloc_table
       __anonstruct_Edge_3_edges_109_alloc_table
       __anonstruct_Edge_3_existent_0_edges_109
       __anonstruct_Edge_3_to_edges_109 __anonstruct_Edge_3_from_edges_109
       __anonstruct_Vertex_2_existent_vertices_34 )));
       begin
       (assert {
       (#"/home/debian/mfsp/examples/interface/test_3.c" 8 15 38#
       "expl:Assertion in line 8"
       (fresh_alloc_struct___anonstruct_Vertex_2
       (select !__anonstruct_Graph_4_vertices_g_31 !g_14) (0)
       __anonstruct_Vertex_2_vertices_34_alloc_table)) }); () end;
       begin
       (assert {
       (#"/home/debian/mfsp/examples/interface/test_3.c" 9 15 37#
       "expl:Assertion in line 9"
       (#"/home/debian/mfsp/examples/interface/test_3.c" 9 15 37#
       "expl:Assertion in line 9"
       ((#"/home/debian/mfsp/examples/interface/test_3.c" 9 15 37#
        "expl:Assertion in line 9"
        (strict_left_valid_struct___anonstruct_Vertex_2
        (select !__anonstruct_Graph_4_vertices_g_31 !g_14) (0)
        __anonstruct_Vertex_2_vertices_34_alloc_table))
       /\
       (#"/home/debian/mfsp/examples/interface/test_3.c" 9 15 37#
       "expl:Assertion in line 9"
       (right_valid_struct___anonstruct_Vertex_2
       (select !__anonstruct_Graph_4_vertices_g_31 !g_14) (Int.(-_) 1)
       __anonstruct_Vertex_2_vertices_34_alloc_table))))) }); () end;
       begin
       (assert {
       (#"/home/debian/mfsp/examples/interface/test_3.c" 10 15 21#
       "expl:Assertion in line 10" (not ((=) (0) (0)))) }); () end;
       (raise (Return_label_exc ())) end end with Return_label_exc _jessie_1
     -> 'Return_label: 'Return_label: (raise Return) end); (raise Return) end
    with Return -> () end))))))))))))
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

module Struct___anonstruct_Edge_3_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Edge_3_alloc_table p)) }
    writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3_requires
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { ((>=) n (0)) } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
end

module Struct___anonstruct_Edge_3_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires { true } writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { true } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Edge_3
  (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
    (pointer __anonstruct_Edge_3)
    requires { true } writes { __anonstruct_Edge_3_alloc_table,
    __anonstruct_Edge_3_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Edge_3 result (0) (0)
       !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Edge_3 result (1) (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Edge_3 result (old
       !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Edge_3 result
       !__anonstruct_Edge_3_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Edge_3 result
      !__anonstruct_Edge_3_tag_table))))))) }
  
end

module Struct___anonstruct_Graph_4_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Graph_4_alloc_table p)) }
    writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4_requires
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { ((>=) n (0)) } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
end

module Struct___anonstruct_Graph_4_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires { true } writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { true } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Graph_4
  (__anonstruct_Graph_4_alloc_table : ref (alloc_table
   __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
    (pointer __anonstruct_Graph_4)
    requires { true } writes { __anonstruct_Graph_4_alloc_table,
    __anonstruct_Graph_4_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Graph_4 result (0) (0)
       !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Graph_4 result (1) (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Graph_4 result (old
       !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Graph_4 result
       !__anonstruct_Graph_4_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Graph_4 result
      !__anonstruct_Graph_4_tag_table))))))) }
  
end

module Struct___anonstruct_Vertex_2_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Vertex_2_alloc_table p)) }
    writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2_requires
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { ((>=) n (0)) } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
end

module Struct___anonstruct_Vertex_2_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires { true } writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { true } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Vertex_2
  (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
   __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_tag_table : ref (tag_table
    __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
    requires { true } writes { __anonstruct_Vertex_2_alloc_table,
    __anonstruct_Vertex_2_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Vertex_2 result (0) (0)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Vertex_2 result (1) (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Vertex_2 result (old
       !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Vertex_2 result
       !__anonstruct_Vertex_2_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Vertex_2 result
      !__anonstruct_Vertex_2_tag_table))))))) }
  
end

theory Struct_voidP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate strict_left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_charP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

theory Logic_range_existent

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate range_existent (g_6 : (pointer __anonstruct_Graph_4)) (m_0 : int)
  (n_3 : int) (__anonstruct_Graph_4_edges_g_6_9_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_20_at_L : (memory __anonstruct_Edge_3
  Int32.t))
  =
     (forall k_6 : int.
      ((((<=) m_0 k_6) /\ ((<) k_6 n_3)) ->
       (not
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_20_at_L
       (shift (select __anonstruct_Graph_4_edges_g_6_9_at_L g_6) k_6))) (0)))))
  
  
end

theory Logic_full

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_range_existent 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate full (g_5 : (pointer __anonstruct_Graph_4))
  (__anonstruct_Graph_4_esize_g_5_8_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_edges_g_5_8_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_55_at_L : (memory __anonstruct_Edge_3
  Int32.t))
  =
     (range_existent g_5 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_5_8_at_L g_5))
     __anonstruct_Graph_4_edges_g_5_8_at_L
     __anonstruct_Edge_3_existent_0_edges_55_at_L)
  
  
end

module Function_test1

  use why3.Bool.Bool 
  
  val test1 (tt : unit) : unit requires { true } ensures { true }
  
end

module Function_test1_safe

  use why3.Bool.Bool 
  
  val test1 (tt : unit) : unit requires { (true) } ensures { true }
  
end
