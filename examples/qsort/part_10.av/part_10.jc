
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

predicate permutation{L1, L2}(intP[..] a, integer l, integer h) {
case Permut_refl{L}: \at((\forall intP[..] a_0;
                           (\forall integer l_0;
                             (\forall integer h_0;
                               permutation{L,
                               L}(a_0, l_0, h_0)))),L);
  
  case Permut_sym{L1, L2}: (\forall intP[..] a_1;
                             (\forall integer l_1;
                               (\forall integer h_1;
                                 (permutation{L1,
                                   L2}(a_1, l_1, h_1) ==>
                                   permutation{L2,
                                   L1}(a_1, l_1, h_1)))));
  
  case Permut_trans{L1, L2, L3}: (\forall intP[..] a_2;
                                   (\forall integer l_2;
                                     (\forall integer h_2;
                                       ((permutation{L1,
                                          L2}(a_2, l_2, h_2) &&
                                          permutation{L2,
                                          L3}(a_2, l_2, h_2)) ==>
                                         permutation{L1,
                                         L3}(a_2, l_2, h_2)))));
  
  case Permut_swap{L1, L2}: (\forall intP[..] a_3;
                              (\forall integer l_3;
                                (\forall integer h_3;
                                  (\forall integer i;
                                    (\forall integer j;
                                      ((((((l_3 <= i) && (i <= h_3)) &&
                                           (l_3 <= j)) &&
                                          (j <= h_3)) &&
                                         Swap{L1,
                                         L2}(a_3, i, j)) ==>
                                        permutation{L1,
                                        L2}(a_3, l_3, h_3)))))));
  
}

predicate Swap{L1, L2}(intP[..] a_4, integer i_0, integer j_0) =
(((\at((a_4 + i_0).intM,L1) == \at((a_4 + j_0).intM,L2)) &&
   (\at((a_4 + j_0).intM,L1) == \at((a_4 + i_0).intM,L2))) &&
  (\forall integer k_1;
    (((! (k_1 == i_0)) && (! (k_1 == j_0))) ==>
      (\at((a_4 + k_1).intM,L1) == \at((a_4 + k_1).intM,L2)))))

predicate ordered{L}(intP[..] a_5, integer n_1, integer m) =
(\forall integer k_2;
  (((n_1 <= k_2) && (k_2 <= m)) ==>
    minimum{L}(a_5, k_2, m, ((a_5 + k_2).intM :> integer))))

predicate minimum{L}(intP[..] a_6, integer n_2, integer m_0, integer p) =
(\forall integer k_3;
  (((n_2 <= k_3) && (k_3 <= m_0)) ==> (p <= ((a_6 + k_3).intM :> integer))))

unit swap(intP[..] a_0, int32 i, int32 j)
  requires ((_C_13 : \at((((\offset_min(\at(a_0,Here)) <=
                             \at((i :> integer),Here)) &&
                            (\offset_max(\at(a_0,Here)) >=
                              \at((i :> integer),Here))) &&
                           (\forall integer __framac_tmp1;
                             (((\at((i :> integer),Here) <= __framac_tmp1) &&
                                (__framac_tmp1 <= \at((i :> integer),Here))) ==>
                               true))),Here)) &&
             (_C_14 : \at((((\offset_min(\at(a_0,Here)) <=
                              \at((j :> integer),Here)) &&
                             (\offset_max(\at(a_0,Here)) >=
                               \at((j :> integer),Here))) &&
                            (\forall integer __framac_tmp2;
                              (((\at((j :> integer),Here) <= __framac_tmp2) &&
                                 (__framac_tmp2 <= \at((j :> integer),Here))) ==>
                                true))),Here)));
behavior default:
  assigns (a_0 + (i :> integer)).intM,
  (a_0 + (j :> integer)).intM;
  ensures (_C_12 : Swap{Old,
          Here}(\at(a_0,Old), (\at(i,Old) :> integer),
                (\at(j,Old) :> integer)));
{  
   (var int32 tmp);
   
   {  (_C_3 : (tmp = (_C_2 : (_C_1 : (a_0 + i)).intM)));
      (_C_8 : ((_C_7 : (_C_6 : (a_0 + i)).intM) = (_C_5 : (_C_4 : (a_0 + j)).intM)));
      (_C_11 : ((_C_10 : (_C_9 : (a_0 + j)).intM) = tmp));
      
      (return ())
   }
}

int32 partition(intP[..] a, int32 l, int32 u)
  requires ((_C_62 : ((u :> integer) >= ((l :> integer) + 1))) &&
             (_C_63 : \at((if (\at(l,Here) <= \at(u,Here)) then (((\offset_min(
                                                                    \at(a,Here)) <=
                                                                    \at(l,Here)) &&
                                                                   (\offset_max(
                                                                    \at(a,Here)) >=
                                                                    \at(u,Here))) &&
                                                                  (\forall integer __framac_tmp3;
                                                                    (((\at(l,Here) <=
                                                                    __framac_tmp3) &&
                                                                    (__framac_tmp3 <=
                                                                    \at(u,Here))) ==>
                                                                    true))) else true),Here)));
behavior default:
  assigns (a + [(l :> integer)..(u :> integer)]).intM;
  ensures (_C_53 : ((_C_54 : permutation{Old,
                    Here}(\at(a,Old), (\at(l,Old) :> integer),
                          (\at(u,Old) :> integer))) &&
                     (((_C_57 : (\at(l,Old) <= \result)) &&
                        (_C_58 : (\result <= \at(u,Old)))) &&
                       ((_C_60 : (\forall integer k_4;
                                   ((((\at(l,Old) :> integer) <= k_4) &&
                                      (k_4 <= ((\result :> integer) - 1))) ==>
                                     minimum{Here}(\at(a,Old),
                                                   (\result :> integer),
                                                   (\at(u,Old) :> integer),
                                                   ((\at(a,Old) + k_4).intM :> integer))))) &&
                         (_C_61 : minimum{Here}(\at(a,Old),
                                                ((\result :> integer) + 1),
                                                (\at(u,Old) :> integer),
                                                ((\at(a,Old) +
                                                   (\result :> integer)).intM :> integer)))))));
{  
   (var int32 m);
   
   (var int32 i_0);
   
   {  (_C_15 : (m = l));
      (_C_16 : (i_0 = l));
      
      loop 
      behavior default:
        invariant (_C_27 : permutation{Pre,
                  Here}(a, (l :> integer), (u :> integer)));
      behavior default:
        invariant (_C_24 : ((_C_25 : (l <= m)) && (_C_26 : (m <= i_0))));
      behavior default:
        invariant (_C_21 : ((_C_22 : (l <= i_0)) && (_C_23 : (i_0 <= u))));
      behavior default:
        invariant (_C_20 : (\forall integer k;
                             ((((l :> integer) <= k) &&
                                (k <= (m :> integer))) ==>
                               minimum{Here}(a, ((m :> integer) + 1),
                                             (i_0 :> integer),
                                             ((a + k).intM :> integer)))));
      behavior default:
        invariant (_C_19 : (\forall integer k;
                             (((((l :> integer) + 1) <= k) &&
                                (k <= (m :> integer))) ==>
                               minimum{Here}(a, (l :> integer),
                                             (l :> integer),
                                             ((a + k).intM :> integer)))));
      behavior default:
        invariant (_C_18 : minimum{Here}(a, ((m :> integer) + 1),
                                         (i_0 :> integer),
                                         ((a + (l :> integer)).intM :> integer)));
      behavior default:
        
        assigns (a + [(l :> integer)..(i_0 :> integer)]).intM;
      variant (_C_17 : ((u :> integer) - (i_0 :> integer)));
      while (true)
      {  
         {  (if (_C_28 : (i_0 < u)) then () else 
            (goto while_0_break));
            
            {  (_C_31 : (i_0 = (_C_30 : ((_C_29 : (i_0 + (1 :> int32))) :> int32))));
               (if (_C_40 : ((_C_39 : (_C_38 : (a + i_0)).intM) <
                              (_C_37 : (_C_36 : (a + l)).intM))) then 
               {  
                  {  ();
                     (_C_34 : (m = (_C_33 : ((_C_32 : (m + (1 :> int32))) :> int32))));
                     ()
                  };
                  (_C_35 : swap(a, m, i_0))
               } else ())
            }
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_41 : (astraver : minimum{Here}(a,
                                                                 (l :> integer),
                                                                 (l :> integer),
                                                                 ((a +
                                                                    (m :> integer)).intM :> integer)))));
         ()
      };
      (_L1 : ());
      (_C_42 : swap(a, l, m));
      
      {  
         (assert for default: (_C_43 : (astraver : permutation{Here,
                                       _L1}(a, (l :> integer), (m :> integer)))));
         ()
      };
      
      {  
         (assert for default: (_C_44 : (astraver : permutation{Here,
                                       _L1}(a, ((m :> integer) + 1),
                                            (u :> integer)))));
         ()
      };
      
      {  
         (assert for default: (_C_45 : (astraver : minimum{Here}(a,
                                                                 ((m :> integer) +
                                                                   1),
                                                                 (i_0 :> integer),
                                                                 ((a +
                                                                    (m :> integer)).intM :> integer)))));
         ()
      };
      
      {  
         (assert for default: (_C_46 : (astraver : minimum{Here}(a,
                                                                 (m :> integer),
                                                                 (m :> integer),
                                                                 ((a +
                                                                    (l :> integer)).intM :> integer)))));
         ()
      };
      
      {  
         (assert for default: (_C_47 : (astraver : (\forall integer k;
                                                     (((((l :> integer) + 1) <=
                                                         k) &&
                                                        (k <=
                                                          ((m :> integer) -
                                                            1))) ==>
                                                       minimum{Here}(
                                                       a, (m :> integer),
                                                       (m :> integer),
                                                       ((a + k).intM :> integer)))))));
         ()
      };
      
      {  
         (assert for default: (_C_48 : (astraver : (\forall integer i;
                                                     ((((l :> integer) <= i) &&
                                                        (i <= (m :> integer))) ==>
                                                       minimum{_L1}(a,
                                                                    ((m :> integer) +
                                                                    1),
                                                                    (u :> integer),
                                                                    (
                                                                    \at(
                                                                    (a +
                                                                    i).intM,_L1) :> integer)))))));
         ()
      };
      
      {  
         (assert for default: (_C_49 : (astraver : (\forall integer i;
                                                     ((((l :> integer) <= i) &&
                                                        (i <= (m :> integer))) ==>
                                                       minimum{Here}(
                                                       a,
                                                       ((m :> integer) + 1),
                                                       (u :> integer),
                                                       ((a + i).intM :> integer)))))));
         ()
      };
      
      {  
         (assert for default: (_C_50 : (astraver : (\forall integer i;
                                                     ((((l :> integer) <= i) &&
                                                        (i <=
                                                          ((m :> integer) -
                                                            1))) ==>
                                                       minimum{Here}(
                                                       a,
                                                       ((m :> integer) + 1),
                                                       (u :> integer),
                                                       ((a + i).intM :> integer)))))));
         ()
      };
      
      {  
         (assert for default: (_C_51 : (astraver : (\forall integer i;
                                                     ((((l :> integer) <= i) &&
                                                        (i <=
                                                          ((m :> integer) -
                                                            1))) ==>
                                                       minimum{Here}(
                                                       a, (m :> integer),
                                                       (m :> integer),
                                                       ((a + i).intM :> integer)))))));
         ()
      };
      
      {  
         (assert for default: (_C_52 : (astraver : (\forall integer i;
                                                     ((((l :> integer) <= i) &&
                                                        (i <=
                                                          ((m :> integer) -
                                                            1))) ==>
                                                       minimum{Here}(
                                                       a, (m :> integer),
                                                       (u :> integer),
                                                       ((a + i).intM :> integer)))))));
         ()
      };
      
      (return m)
   }
}

lemma permutation_reads{L1, L2} :
(_C_64 : (\forall intP[..] a_7;
           (\forall integer n_3;
             (\forall integer m_1;
               ((\forall integer i_1;
                  (((n_3 <= i_1) && (i_1 <= m_1)) ==>
                    (\at((a_7 + i_1).intM,L1) == \at((a_7 + i_1).intM,L2)))) ==>
                 permutation{L1,
                 L2}(a_7, n_3, m_1))))))

lemma permutation_saves_min{L1, L2} :
(_C_65 : (\forall intP[..] a_8;
           (\forall integer n_4;
             (\forall integer m_2;
               (\forall integer s;
                 (permutation{L1,
                   L2}(a_8, n_4, m_2) ==>
                   (minimum{L1}(a_8, n_4, m_2, s) ==>
                     minimum{L2}(a_8, n_4, m_2, s))))))))

lemma permutation_saves_many_min{L1, L2} :
(_C_66 : (\forall intP[..] a_9;
           (\forall integer n_5;
             (\forall integer m_3;
               (\forall integer p_0;
                 (\forall integer q;
                   (((m_3 < p_0) || (q < n_5)) ==>
                     (permutation{L1,
                       L2}(a_9, p_0, q) ==>
                       (permutation{L1,
                         L2}(a_9, n_5, m_3) ==>
                         ((\forall integer i_2;
                            (((n_5 <= i_2) && (i_2 <= m_3)) ==>
                              minimum{L1}(a_9, p_0, q,
                                          (\at((a_9 + i_2).intM,L1) :> integer)))) ==>
                           (\forall integer i_3;
                             (((n_5 <= i_3) && (i_3 <= m_3)) ==>
                               minimum{L2}(a_9, p_0, q,
                                           (\at((a_9 + i_3).intM,L2) :> integer))))))))))))))

lemma permutation_split{L1, L2} :
(_C_67 : (\forall intP[..] a_10;
           (\forall integer n_6;
             (\forall integer m_4;
               (\forall integer k_5;
                 (((n_6 <= m_4) && (m_4 <= k_5)) ==>
                   ((permutation{L1,
                      L2}(a_10, n_6, m_4) &&
                      permutation{L1,
                      L2}(a_10, (m_4 + 1), k_5)) ==>
                     permutation{L1,
                     L2}(a_10, n_6, k_5))))))))
